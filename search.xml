<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>MySQL日志篇</title>
      <link href="/2023/06/27/mysql/MySQL%E6%97%A5%E5%BF%97%E7%AF%87/"/>
      <url>/2023/06/27/mysql/MySQL%E6%97%A5%E5%BF%97%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h2 id="一、常见的日志类型"><a href="#一、常见的日志类型" class="headerlink" title="一、常见的日志类型"></a>一、常见的日志类型</h2><ul><li>错误日志(error log)：对MySQL的启动、运行和关闭进行了记录</li><li><strong>二进制文件</strong>(binary log/binlog)：记录了更改数据库数据的SQL语句（不包括select、show等查询语句）</li><li>一般查询日志(general query log)：记录客户端发送给MySQL服务器的所有SQL语句（因为量很大，所以默认不开启，也不建议开启）</li><li>慢日志查询(slow query log)：执行时间超过<code>long_query_time</code>的语句（一般排查慢查询问题的时候用到）</li><li><strong>事务日志</strong>(redo log和undo log)：redo log是重做日志，undo log是回滚日志</li><li>中继日志(relay log)：relay log是复制过程中的日志，跟binary log猜不到，不过relay log针对的是主从复制中的从库</li><li>DDL日志(metadata log)：DDL语句执行的与数据操作</li></ul><h2 id="二、binlog介绍"><a href="#二、binlog介绍" class="headerlink" title="二、binlog介绍"></a>二、binlog介绍</h2><h3 id="1、概念"><a href="#1、概念" class="headerlink" title="1、概念"></a>1、概念</h3><p><strong>定义</strong>：binlog（即binary log，二进制日志文件），记录了对MySQL数据库执行了更改的所有操作（所有DDL和DML语句）</p><ul><li>DDL（即数据定义语句）：包括create、alter、drop等</li><li>DML（即数据修改语句）：包括insert、update、delete等</li></ul><p><strong>模式</strong>：</p><ul><li><strong>Statement模式</strong>：只记录DML语句（MySQL 5.7.7之前默认使用）</li><li><strong>Row模式</strong>：记录DDL+DML语句（MySQL 5.7.7之后默认使用）</li><li><strong>Mixed模式</strong>：Statement模式+Row模式组合（默认使用Statement模式，少数情况下自动切到Row模式）</li><li>如何查看使用的模式：<code>show variables like </code>%binlog_format%<code>;</code></li><li>*场景<strong>：</strong>主从复制**，<font color=red>依赖binlog去同步数据，保证数据一致性</font></li></ul><h3 id="2、主从复制"><a href="#2、主从复制" class="headerlink" title="2、主从复制"></a>2、主从复制</h3><p><strong>参考文档</strong>：<a href="https://javaguide.cn/high-performance/read-and-write-separation-and-library-subtable.html">https://javaguide.cn/high-performance/read-and-write-separation-and-library-subtable.html</a><br><strong>原理图</strong>：<br> <img src="/images/mysql/mysql%E4%B8%BB%E4%BB%8E%E5%A4%8D%E5%88%B6%E6%B5%81%E7%A8%8B%E5%9B%BE.png"><br><strong>步骤</strong>：</p><ol><li>主库将数据变化写入binlog</li><li>从库连接主库</li><li>从库创建一个I/O线程请求主库的binlog</li><li>主库创建一个binlog dump线程来发送binlog，从库的I/O线程负责接收</li><li>从库的I/O线程把接收到的binlog写入到relay log</li><li>从库的SQL线程读取relay log数据到本地（也就是再执行一遍SQL）</li></ol><h3 id="3、binlog什么时候写入？"><a href="#3、binlog什么时候写入？" class="headerlink" title="3、binlog什么时候写入？"></a>3、binlog什么时候写入？</h3><ul><li>对于InnoDB存储而言，在执行一个事务时，会把日志写到binlog cache，等事务完成了再把binlog cache的日志持久化到binlog中，这样做也是为了考虑性能</li><li><strong>为什么要有binlog cache呢？</strong>因为一个事务的binlog不能被拆开，无论这个事务多大，都要保证一次性写入，所以才会有binlog cache的存在，我们可以通过设置<code>binlog_cache_size</code>来控制单个线程binlog cache的大小（如果超过改大小，就要<font color=red>暂存到磁盘中</font>）</li><li><strong>binlog是什么时候刷新到磁盘中的？</strong>可以通过sync_binlog来控制binlog的刷盘时机：<code>show variables like &#39;sync_binlog&#39;</code><ul><li>sync_binlog=0：不强制要求，由系统自行判断刷盘时机（MySQL5.7之前的默认值）</li><li>sync_binlog=1：每次提交事务的时候都会刷盘（MySQL5.7之后的默认值）</li><li>sync_binlog=N：每N个事务，才会刷盘</li><li>设置建议：不建议设置为0，如果对性能要求比较高/出现I/O瓶颈的画，可以适当增大sync_binlog，不过这样会增加数据丢失的可能（因为间隔变久了）</li></ul></li></ul><h3 id="4、什么时候会重新生成binlog？"><a href="#4、什么时候会重新生成binlog？" class="headerlink" title="4、什么时候会重新生成binlog？"></a>4、什么时候会重新生成binlog？</h3><p>下面这几个情况，MySQL会重新生成新的binlog，并且序号递增：</p><ul><li>MySQL停止或重启</li><li>使用<code>flush logs</code>命令后</li><li>binlog文件大小超过<code>max_binlog_size</code>变量的阈值后</li></ul><h2 id="三、redo-log介绍"><a href="#三、redo-log介绍" class="headerlink" title="三、redo log介绍"></a>三、redo log介绍</h2><h3 id="1、背景"><a href="#1、背景" class="headerlink" title="1、背景"></a>1、背景</h3><ul><li>InnoDB引擎是以页（数据页）为单位来存储数据的，也就是我们往MySQL插入的所有数据最终都会写入到这个页中</li><li>为了减少IO开销，中间会有一个Buffer Pool的区域存在内存中，如果Buffer Pool中没有我们想要的数据，MySQL就会把页中的数据缓存到Buffer Pool中，这样我们就直接操作缓存即可，<font color=red>大大提高了读写性能</font></li></ul><h3 id="2、Buffer-Pool存在带来的问题"><a href="#2、Buffer-Pool存在带来的问题" class="headerlink" title="2、Buffer Pool存在带来的问题"></a>2、Buffer Pool存在带来的问题</h3><p>如果一个事务提交了，在Buffer Pool没来得及刷新（即持久化）回磁盘，MySQL就突然宕机了，这时候这个事务就消失了呢？结论是不会的，这样就违反了事务的持久性。<font color=red>MySQL InnoDB引擎用redo log来保证事务的持久性</font></p><h3 id="3、redo-log是什么？"><a href="#3、redo-log是什么？" class="headerlink" title="3、redo log是什么？"></a>3、redo log是什么？</h3><ul><li><font color=red>redo log是InnoDB引擎独有的，用来保证事务的持久性</font></li><li>主要是记录页的修改，比如哪个页某个偏移量处修改了几个字节的值以及具体被修改的值是什么</li><li>redo log的每一条记录包括：<ul><li>表空间号</li><li>数据页号</li><li>偏移量</li><li>具体修改的数据</li></ul></li></ul><h3 id="4、redo-log有什么用？"><a href="#4、redo-log有什么用？" class="headerlink" title="4、redo log有什么用？"></a>4、redo log有什么用？</h3><p>在事务提交时，我们会将redo log按照刷盘策略刷到磁盘上去，这样即使MySQL宕机了，重启之后也能恢复没有写入磁盘的数据，从而保证数据的持久性</p>]]></content>
      
      
      <categories>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 日志 </tag>
            
            <tag> 主从复制 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>分页插件PageHelper的使用</title>
      <link href="/2022/10/19/%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
      <url>/2022/10/19/%E5%88%86%E9%A1%B5%E6%8F%92%E4%BB%B6PageHelper%E7%9A%84%E4%BD%BF%E7%94%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="一、介绍"><a href="#一、介绍" class="headerlink" title="一、介绍"></a>一、介绍</h2><p>插件地址：<a href="https://github.com/pagehelper/Mybatis-PageHelper/">https://github.com/pagehelper/Mybatis-PageHelper/</a><br><strong>//TODO</strong></p><h2 id="二、怎么使用？"><a href="#二、怎么使用？" class="headerlink" title="二、怎么使用？"></a>二、怎么使用？</h2><h3 id="1-引入依赖-maven"><a href="#1-引入依赖-maven" class="headerlink" title="1.引入依赖(maven)"></a>1.引入依赖(maven)</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>&#123;pagehelper.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果是springboot项目，则改成引入</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>&#123;springbootPagehelperVersion&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-参数介绍"><a href="#2-参数介绍" class="headerlink" title="2.参数介绍"></a>2.参数介绍</h3><p><strong>//TODO</strong></p><h3 id="3-如何在代码中使用"><a href="#3-如何在代码中使用" class="headerlink" title="3.如何在代码中使用"></a>3.如何在代码中使用</h3><p><strong>//TODO</strong></p><h2 id="三、Q-amp-A"><a href="#三、Q-amp-A" class="headerlink" title="三、Q&amp;A"></a>三、Q&amp;A</h2><h3 id="1-springboot使用PageHelper分页不生效怎么办？"><a href="#1-springboot使用PageHelper分页不生效怎么办？" class="headerlink" title="1.springboot使用PageHelper分页不生效怎么办？"></a>1.springboot使用PageHelper分页不生效怎么办？</h3><p>正常分页使用</p><pre class="line-numbers language-none"><code class="language-none">PageHelper.startPage(pageNo,pageSize)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>排查后发现pom依赖错了，springboot环境下要用</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>&#123;springbootPageHelper.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>而不是原来的</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>&#123;pageHelper.version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>因为上面的依赖缺少了</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.github.pagehelper<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>pagehelper-spring-boot-autoconfigure<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="四、Mybatis-Plus如何使用分页插件？"><a href="#四、Mybatis-Plus如何使用分页插件？" class="headerlink" title="四、Mybatis-Plus如何使用分页插件？"></a>四、Mybatis-Plus如何使用分页插件？</h2><p><strong>//TODO</strong></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
          <category> PageHelper </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> PageHelper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Dubbo使用笔记</title>
      <link href="/2022/10/16/Dubbo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/10/16/Dubbo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="Q-amp-A"><a href="#Q-amp-A" class="headerlink" title="Q&amp;A"></a>Q&amp;A</h2><h3 id="1-项目启动时出现循环依赖-A依赖B，B依赖A-，哪一方启动都会报错找不到消费者，如何解决？"><a href="#1-项目启动时出现循环依赖-A依赖B，B依赖A-，哪一方启动都会报错找不到消费者，如何解决？" class="headerlink" title="1.项目启动时出现循环依赖(A依赖B，B依赖A)，哪一方启动都会报错找不到消费者，如何解决？"></a>1.项目启动时出现循环依赖(A依赖B，B依赖A)，哪一方启动都会报错找不到消费者，如何解决？</h3><p><strong>分析</strong>：Dubbo默认会在启动时检查依赖的服务是否可用，不可用时会抛出异常(No provider…)<br><strong>解决</strong>：关闭启动时依赖检查</p><ul><li><strong>方案a：配置spring配置文件</strong><ul><li>关闭某个服务的启动时检查(没有提供者时报错)<br><code>&lt;dubbo:reference interface=&quot;com.demo.UserService&quot; check=&quot;false&quot; /&gt;</code></li><li>关闭所有服务的启动时检查(没有提供者时报错)<br><code>&lt;dubbo:consumer check=&quot;false&quot; /&gt;</code></li><li>关闭注册中心启动时检查(注册订阅失败时报错)<br><code>&lt;dubbo:registry check=&quot;false&quot; /&gt;</code></li></ul></li><li><strong>方案b：配置dubbo.properties</strong><pre class="line-numbers language-none"><code class="language-none">dubbo.reference.com.demo.UserService.check&#x3D;falsedubbo.reference.check&#x3D;falsedubbo.consumer.check&#x3D;falsedubbo.registry.check&#x3D;false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li><li><strong>方案c：配置<code>-D</code>参数</strong><pre class="line-numbers language-none"><code class="language-none">java -Ddubbo.reference.com.demo.UserService.check&#x3D;falsejava -Ddubbo.reference.check&#x3D;falsejava -Ddubbo.consumer.check&#x3D;false java -Ddubbo.registry.check&#x3D;false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> Dubbo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Dubbo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java工具类</title>
      <link href="/2022/10/16/Java%E5%B7%A5%E5%85%B7%E7%B1%BB/"/>
      <url>/2022/10/16/Java%E5%B7%A5%E5%85%B7%E7%B1%BB/</url>
      
        <content type="html"><![CDATA[<h1 id="JSON"><a href="#JSON" class="headerlink" title="JSON"></a>JSON</h1><h2 id="一、Q-amp-A"><a href="#一、Q-amp-A" class="headerlink" title="一、Q&amp;A"></a>一、Q&amp;A</h2><h3 id="1-http接口想返回自定义格式字符串-原Date类型-，如输出”2022-10-16-20-00-00”"><a href="#1-http接口想返回自定义格式字符串-原Date类型-，如输出”2022-10-16-20-00-00”" class="headerlink" title="1.http接口想返回自定义格式字符串(原Date类型)，如输出”2022-10-16 20:00:00”"></a>1.http接口想返回自定义格式字符串(原Date类型)，如输出”2022-10-16 20:00:00”</h3><ul><li><strong>方法</strong>：添加注解<code>@JsonFormat</code></li><li><strong>用途</strong>：将Date转换成String，一般是后台传值给前台<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@JsonFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">,</span> timezone<span class="token operator">=</span><span class="token string">"GMT+8"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Date</span> startTime<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul><h3 id="2-http接口想接收自定义格式字符串-新Date类型-，如输入”2022-10-16-20-00-00”"><a href="#2-http接口想接收自定义格式字符串-新Date类型-，如输入”2022-10-16-20-00-00”" class="headerlink" title="2.http接口想接收自定义格式字符串(新Date类型)，如输入”2022-10-16 20:00:00”"></a>2.http接口想接收自定义格式字符串(新Date类型)，如输入”2022-10-16 20:00:00”</h3><ul><li><strong>方法</strong>：添加注解<code>@DateTimeFormat</code></li><li><strong>用途</strong>：将String转换成Date，一般是前台传值给后台<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@DateTimeFormat</span><span class="token punctuation">(</span>pattern <span class="token operator">=</span> <span class="token string">"yyyy-MM-dd HH:mm:ss"</span><span class="token punctuation">)</span><span class="token keyword">private</span> <span class="token class-name">Date</span> startTime<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 工具类 </tag>
            
            <tag> JSON </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法</title>
      <link href="/2022/03/17/algorithm/%E7%AE%97%E6%B3%95/"/>
      <url>/2022/03/17/algorithm/%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h1 id="算法"><a href="#算法" class="headerlink" title="算法"></a>算法</h1><h2 id="一、链表"><a href="#一、链表" class="headerlink" title="一、链表"></a>一、链表</h2><ul><li><strong>链接</strong>：<a href="../../../../../tags/%E9%93%BE%E8%A1%A8/">点此跳转</a></li><li><strong>总结</strong>：<ul><li>1.善用<code>遍历</code></li></ul></li></ul><h2 id="二、深度优先搜索"><a href="#二、深度优先搜索" class="headerlink" title="二、深度优先搜索"></a>二、深度优先搜索</h2><ul><li><strong>链接</strong>：<a href="../../../../../tags/%E6%B7%B1%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/">点此跳转</a></li><li><strong>经典例子</strong>：<a href="../../../../../2021/12/22/algorithm/%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/">从前序与中序遍历序列构造二叉树</a></li><li><strong>步骤</strong>：<ul><li>1.定义一个<code>深度优先搜索</code>的函数<code>dfs()</code></li><li>2.判断结束条件：<code>边界</code>和逻辑中止(如遇到当前值为1中止)</li><li>3.执行搜索逻辑：如更新当前值等</li><li>4.蔓延：前后左右执行<code>dfs()</code></li></ul></li><li><strong>总结</strong>：<ul><li>1.看到题干有<code>蔓延</code>等同义词优先考虑<code>深度优先搜索</code></li><li>2.注意<code>边界</code>处理</li></ul></li></ul><h2 id="三、移动窗口"><a href="#三、移动窗口" class="headerlink" title="三、移动窗口"></a>三、移动窗口</h2><ul><li><strong>链接</strong>：<a href="../../../../../tags/%E7%A7%BB%E5%8A%A8%E7%AA%97%E5%8F%A3/">点此跳转</a></li><li><strong>总结</strong>：<ul><li>1.该类型做得少，需要<code>重做</code>/<code>多做</code></li><li>2.注意<code>边界</code>处理</li></ul></li></ul><h2 id="四、双指针"><a href="#四、双指针" class="headerlink" title="四、双指针"></a>四、双指针</h2><ul><li><strong>链接</strong>：<a href="../../../../../tags/%E5%8F%8C%E6%8C%87%E9%92%88/">点此跳转</a></li><li><strong>思路</strong>：一个指针遍历，一个指针指向某个值(比如需要交换的值)</li><li><strong>总结</strong>：<ul><li>1.该类型做得少，需要<code>重做</code>/<code>多做</code></li></ul></li></ul><h2 id="五、二分查找"><a href="#五、二分查找" class="headerlink" title="五、二分查找"></a>五、二分查找</h2><ul><li><strong>链接</strong>：<a href="../../../../../tags/%E4%BA%8C%E5%88%86%E6%9F%A5%E6%89%BE/">点此跳转</a></li><li><strong>思路</strong>：<ul><li>1.定义头尾指针<code>left</code>和<code>right</code></li><li>2.while循环每次取中间值<code>middle</code>=<code>left</code>+(<code>right</code>-<code>left</code>)/2</li><li>3.直到<code>middle</code>等于结果值则结束</li></ul></li><li><strong>总结</strong>： <ul><li>1.定义好二分查找的<code>left</code>、<code>right</code>、<code>middle</code>变量即可</li></ul></li></ul><h2 id="六、回溯算法"><a href="#六、回溯算法" class="headerlink" title="六、回溯算法"></a>六、回溯算法</h2><ul><li><strong>链接</strong>：<a href="../../../../../tags/%E5%9B%9E%E6%BA%AF%E7%AE%97%E6%B3%95/">点此跳转</a></li><li><strong>经典例子</strong>：<a href="../../../../../2021/12/24/algorithm/%E5%85%A8%E6%8E%92%E5%88%97/">全排列</a></li><li><strong>思路</strong>：<ul><li>1.定义<code>path</code>记录路径，<code>result</code>记录结果，<code>selected</code>记录选择列表</li><li>2.<strong>结束条件</strong>：到达决策数底层，无法再做选择</li><li>3.通过做选择和撤销选择实现决策树的回溯</li></ul></li><li><strong>总结</strong>： <ul><li>1.题干有<code>结束条件</code>的一般要想到<code>回溯</code></li><li>2.该类型做得少，需要<code>重做</code>/<code>多做</code></li></ul></li></ul><h2 id="七、前缀和"><a href="#七、前缀和" class="headerlink" title="七、前缀和"></a>七、前缀和</h2><ul><li><strong>链接</strong>：<a href="../../../../../tags/%E5%89%8D%E7%BC%80%E5%92%8C/">点此跳转</a></li><li><strong>经典例子</strong>：<a href="../../../../../2021/12/26/algorithm/%E5%92%8C%E4%B8%BAK%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/">和为K的子数组</a></li><li><strong>总结</strong>： <ul><li>1.用来解决双重遍历时间复杂度很高的问题，引入<code>前缀和</code>，可以避免多次不必要的计算</li></ul></li></ul><h2 id="八、排序"><a href="#八、排序" class="headerlink" title="八、排序"></a>八、排序</h2><ul><li><strong>链接</strong>：<a href="../../../../../tags/%E6%8E%92%E5%BA%8F/">点此跳转</a></li></ul><h2 id="九、动态规划"><a href="#九、动态规划" class="headerlink" title="九、动态规划"></a>九、动态规划</h2><ul><li><strong>链接</strong>：<a href="../../../../../tags/%E5%8A%A8%E6%80%81%E8%A7%84%E5%88%92/">点此跳转</a></li><li><strong>思路</strong>：todo</li></ul><h2 id="十、单调栈"><a href="#十、单调栈" class="headerlink" title="十、单调栈"></a>十、单调栈</h2><ul><li><strong>链接</strong>：<a href="../../../../../tags/%E5%8D%95%E8%B0%83%E6%A0%88/">点此跳转</a></li></ul><h2 id="十一、分治算法"><a href="#十一、分治算法" class="headerlink" title="十一、分治算法"></a>十一、分治算法</h2><ul><li><strong>链接</strong>：<a href="../../../../../tags/%E5%88%86%E6%B2%BB%E7%AE%97%E6%B3%95/">点此跳转</a></li><li><strong>思路</strong>：todo</li><li><strong>经典例子</strong>：<a href="../../../../../2021/12/22/algorithm/%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/">从前序与中序遍历序列构造二叉树</a></li></ul><h2 id="十二、广度优先搜索"><a href="#十二、广度优先搜索" class="headerlink" title="十二、广度优先搜索"></a>十二、广度优先搜索</h2><ul><li><strong>链接</strong>：<a href="../../../../../tags/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2/">点此跳转</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 目录 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 目录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue项目创建方式</title>
      <link href="/2022/03/02/Vue%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F/"/>
      <url>/2022/03/02/Vue%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h2 id="一、相关链接"><a href="#一、相关链接" class="headerlink" title="一、相关链接"></a>一、相关链接</h2><p>参考链接：<a href="https://blog.csdn.net/ccf19881030/article/details/105358242">https://blog.csdn.net/ccf19881030/article/details/105358242</a></p><h2 id="二、创建步骤"><a href="#二、创建步骤" class="headerlink" title="二、创建步骤"></a>二、创建步骤</h2><h3 id="1-全局安装vue-cli脚手架"><a href="#1-全局安装vue-cli脚手架" class="headerlink" title="1.全局安装vue-cli脚手架"></a>1.全局安装vue-cli脚手架</h3><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm install vue-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="2-开始创建项目"><a href="#2-开始创建项目" class="headerlink" title="2.开始创建项目"></a>2.开始创建项目</h3><ul><li><p>使用vue初始化基于webpack的新项目</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">vue init webpack test-project<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>创建过程中会提示是否安装eslint，可以跳过不安装(否则项目编译过程中会出现各种代码格式的问题)</p></li><li><p>创建完成后，安装基础模块</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">cd test-projectnpm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre></li><li><p>安装完成后，可在开发模式下运行项目并预览项目效果</p><pre class="line-numbers language-shell" data-language="shell"><code class="language-shell">npm run dev<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><p><img src="/images/Vue%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F1.png" alt="运行成功"></p><ul><li>访问<a href="http://localhost:8080/">http://localhost:8080</a><br><img src="/images/Vue%E9%A1%B9%E7%9B%AE%E5%88%9B%E5%BB%BA%E6%96%B9%E5%BC%8F2.png" alt="项目效果"></li></ul>]]></content>
      
      
      <categories>
          
          <category> vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> vue </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB使用笔记</title>
      <link href="/2022/02/21/MongoDB%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2022/02/21/MongoDB%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p><a href="https://www.runoob.com/mongodb/mongodb-window-install.html">https://www.runoob.com/mongodb/mongodb-window-install.html</a></p><h2 id="二、可视化工具"><a href="#二、可视化工具" class="headerlink" title="二、可视化工具"></a>二、可视化工具</h2><p>下载链接：<a href="https://robomongo.org/download">https://robomongo.org/download</a><br>使用指引：<a href="https://blog.csdn.net/wangmx1993328/article/details/82628805">https://blog.csdn.net/wangmx1993328/article/details/82628805</a></p><h2 id="三、常见指令-随用随更新"><a href="#三、常见指令-随用随更新" class="headerlink" title="三、常见指令(随用随更新)"></a>三、常见指令(随用随更新)</h2><h3 id="1-查询文档"><a href="#1-查询文档" class="headerlink" title="1.查询文档"></a>1.查询文档</h3><p>如查询collection为user的uid为123456的文档，则<br>完整：<code>db.getCollection(&quot;user&quot;).find(&#123;&quot;user&quot;:123456&#125;)</code><br>简化：<code>db.user.find(&#123;&quot;user&quot;:123456&#125;)</code></p><h2 id="四、常见问题"><a href="#四、常见问题" class="headerlink" title="四、常见问题"></a>四、常见问题</h2><h3 id="1-linux如何连接mongo？"><a href="#1-linux如何连接mongo？" class="headerlink" title="1.linux如何连接mongo？"></a>1.linux如何连接mongo？</h3><ul><li>a.下载mongo指令<br><code>wget https://fastdl.mongodb.org/linux/mongodb-shell-linux-x86_64-ubuntu1604-4.0.28.tgz</code></li><li>b.解压<br><code>tar zxvf mongodb-shell-linux-x86_64-ubuntu1604-4.0.28.tgz</code></li><li>c.跳转到指令目录<br><code>cd mongodb-linux-x86_64-ubuntu1604-4.0.28/bin</code></li><li>d.连接<br><code>mongo --host $&#123;host&#125; --port $&#123;port&#125; -u $&#123;username&#125; -p $&#123;password&#125;&quot; </code></li></ul><h3 id="2-linux如何导出mongo数据？"><a href="#2-linux如何导出mongo数据？" class="headerlink" title="2.linux如何导出mongo数据？"></a>2.linux如何导出mongo数据？</h3><ul><li>a.下载mongoexport指令<br><code>wget https://fastdl.mongodb.org/tools/db/mongodb-database-tools-rhel70-x86_64-100.3.1.tgz</code></li><li>b.解压<br><code>tar zxvf mongodb-database-tools-rhel70-x86_64-100.3.1.tgz</code></li><li>c.跳转到指令目录<br><code>cd mongodb-database-tools-rhel70-x86_64-100.3.1/bin</code></li><li>d.导出数据<br><code>mongoexport -d $&#123;database&#125; -c $&#123;collection&#125; -q $&#123;queryJson&#125; --out $&#123;exportFilePath&#125;</code><ul><li><strong>导出类型</strong>：<code>--type</code>默认是<code>json</code>，对应的<code>--out</code>需要是<code>.json</code>后缀，<code>--type</code>也可以是<code>csv</code>，对应的<code>--out</code>需要是<code>.csv</code>后缀.csv类型必须指定导出字段<code>--fields</code></li><li><strong>查询语句</strong>：必须是json语句，且外层用单引号，如<code>-q &#39;&#123;&quot;uid&quot;:123456&#125;&#39;&#39;</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> MongoDB </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MongoDB </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>206. 反转链表</title>
      <link href="/2022/01/09/algorithm/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/"/>
      <url>/2022/01/09/algorithm/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="206-反转链表"><a href="#206-反转链表" class="headerlink" title="206.反转链表"></a>206.反转链表</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给你单链表的头节点<code>head</code>，请你反转链表，并返回反转后的链表。</p><p><strong>示例一</strong>：<br><img src="/images/algorithm/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A81.png"></p><blockquote><p><strong>输入</strong>：head = [1,2,3,4,5]<br><strong>输出</strong>：[5,4,3,2,1]</p></blockquote><p><strong>示例二</strong>：<br><img src="/images/algorithm/%E5%8F%8D%E8%BD%AC%E9%93%BE%E8%A1%A82.png"></p><blockquote><p><strong>输入</strong>：head = [1,2]<br><strong>输出</strong>：[2,1]</p></blockquote><p><strong>示例三</strong>：</p><blockquote><p><strong>输入</strong>：head = []<br><strong>输出</strong>：[]</p></blockquote><p><strong>提示</strong>：</p><ul><li>链表中节点的数目范围是<code>[0, 5000]</code></li><li><code>-5000 &lt;= Node.val &lt;= 5000</code></li></ul><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/reverse-linked-list/">https://leetcode-cn.com/problems/reverse-linked-list/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/reverse-linked-list/solution/fan-zhuan-lian-biao-by-leetcode-solution-d1k2/">https://leetcode-cn.com/problems/reverse-linked-list/solution/fan-zhuan-lian-biao-by-leetcode-solution-d1k2/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：链表</li><li><strong>思路</strong>：遍历链表，并同时将当前的结点反转</li><li><strong>步骤</strong>：以1-&gt;2-&gt;3-&gt;4-&gt;5为例<ul><li>1.定义<code>tail</code>作为反转后链表的最后一个结点</li><li>2.遍历<code>head</code>直到null<ul><li>a.局部变量<code>next</code>存放<code>head</code>的下一个结点<code>head.next</code></li><li>b.<code>head</code>指向反转链表的头结点<code>tail</code></li><li>c.重置<code>tail</code>为<code>head</code></li><li>d.重置<code>head</code>为<code>next</code>(a步骤)</li></ul></li><li>3.输出<code>tail</code></li></ul></li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * Definition for singly-linked list. * public class ListNode &#123; *     int val; *     ListNode next; *     ListNode() &#123;&#125; *     ListNode(int val) &#123; this.val = val; &#125; *     ListNode(int val, ListNode next) &#123; this.val = val; this.next = next; &#125; * &#125; */</span><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">reverseList</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//思路：拿到下一个结点后反转当前结点(最后指向tail)</span>    <span class="token class-name">ListNode</span> tail <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token comment">//例子：1->2->3->4->5</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>head<span class="token operator">!=</span><span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//获取head后面的结点(如1->2)</span>      <span class="token class-name">ListNode</span> next  <span class="token operator">=</span> head<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      <span class="token comment">//重置head的next(反转，1->null)</span>      head<span class="token punctuation">.</span>next <span class="token operator">=</span> tail<span class="token punctuation">;</span>      <span class="token comment">//重置tail的位置(为上一句head)</span>      tail <span class="token operator">=</span> head<span class="token punctuation">;</span>      <span class="token comment">//重置head为后面的结点(如1->2)</span>      head <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> tail<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、执行结果"><a href="#五、执行结果" class="headerlink" title="五、执行结果"></a>五、执行结果</h2><p><strong>执行结果</strong>：<code>通过</code><br><strong>执行用时</strong>：<code>0 ms</code>, 在所有<code>Java</code>提交中击败了<code>100.00%</code>的用户<br><strong>内存消耗</strong>：<code>38.4 MB</code>, 在所有<code>Java</code>提交中击败了<code>20.41%</code>的用户<br><strong>通过测试用例</strong>：<code>28/28</code></p><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><ul><li><strong>难度</strong>：简单</li><li><strong>总结</strong>：典型的链表算法，相关next操作比较容易混，建议画图（一开始没画图导致有些许步骤混淆，有必要记录）</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 简单难度 </tag>
            
            <tag> 链表 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>695. 岛屿的最大面积</title>
      <link href="/2022/01/07/algorithm/%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF/"/>
      <url>/2022/01/07/algorithm/%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF/</url>
      
        <content type="html"><![CDATA[<h1 id="695-岛屿的最大面积"><a href="#695-岛屿的最大面积" class="headerlink" title="695.岛屿的最大面积"></a>695.岛屿的最大面积</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给你一个大小为<code>m x n</code>的二进制矩阵<code>grid</code>。</p><p><strong>岛屿</strong>是由一些相邻的<code>1</code>(代表土地)构成的组合，这里的「相邻」要求两个<code>1</code>必须在<strong>水平或者竖直的四个方向上</strong>相邻。你可以假设<code>grid</code>的四个边缘都被<code>0</code>（代表水）包围着。</p><p>岛屿的面积是岛上值为<code>1</code>的单元格的数目。</p><p>计算并返回<code>grid</code>中最大的岛屿面积。如果没有岛屿，则返回面积为<code>0</code>。</p><p><strong>示例一</strong>：<br><img src="/images/algorithm/%E5%B2%9B%E5%B1%BF%E7%9A%84%E6%9C%80%E5%A4%A7%E9%9D%A2%E7%A7%AF.png"></p><blockquote><p><strong>输入</strong>：grid = [[0,0,1,0,0,0,0,1,0,0,0,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,1,1,0,1,0,0,0,0,0,0,0,0],[0,1,0,0,1,1,0,0,1,0,1,0,0],[0,1,0,0,1,1,0,0,1,1,1,0,0],[0,0,0,0,0,0,0,0,0,0,1,0,0],[0,0,0,0,0,0,0,1,1,1,0,0,0],[0,0,0,0,0,0,0,1,1,0,0,0,0]]<br><strong>输出</strong>：6<br><strong>解释</strong>：答案不应该是 11 ，因为岛屿只能包含水平或垂直这四个方向上的 1 。</p></blockquote><p><strong>示例二</strong>：</p><blockquote><p><strong>输入</strong>：grid = [[0,0,0,0,0,0,0,0]]<br><strong>输出</strong>：0</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>m == grid.length</code></li><li><code>n == grid[i].length</code></li><li><code>1 &lt;= m, n &lt;= 50</code></li><li><code>grid[i][j]</code>为<code>0</code>或<code>1</code></li></ul><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/max-area-of-island/">https://leetcode-cn.com/problems/max-area-of-island/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/max-area-of-island/solution/biao-zhun-javadong-tai-gui-hua-jie-fa-100-by-mark-/">https://leetcode-cn.com/problems/max-area-of-island/solution/biao-zhun-javadong-tai-gui-hua-jie-fa-100-by-mark-/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：深度优先遍历</li><li><strong>思路</strong>：<ul><li>参考<a href="https://garyleeeee.github.io/2022/01/06/algorithm/%E5%9B%BE%E5%83%8F%E6%B8%B2%E6%9F%93/">733.图像渲染</a></li><li>遍历数组，每次进行dfs，返回值判断最大值</li><li>岛屿相连的为1则是同一个岛屿，需要+1，并把该岛屿置为0(防止重复计算)</li></ul></li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxAreaOfIsland</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> maxArea <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//遍历m x n，遇到1的就遍历四个方向，遍历过的就重置为0，防止重新遍历到</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> m<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>m<span class="token operator">&lt;</span>grid<span class="token punctuation">.</span>length<span class="token punctuation">;</span>m<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>n<span class="token operator">&lt;</span>grid<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span>n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//每遍历一次就判断是不是更大的岛屿</span>                maxArea <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>maxArea<span class="token punctuation">,</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>m<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> maxArea<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> grid<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> area <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>x<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> y<span class="token operator">&lt;</span><span class="token number">0</span> <span class="token operator">||</span> x<span class="token operator">></span>grid<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> y<span class="token operator">></span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//该位置不是岛屿，返回0</span>            <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//计算岛屿面积，并重置grid</span>        area<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>        grid<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//看看有没有(上下左右)连接的岛屿</span>        area <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>x<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        area <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>x<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>y<span class="token punctuation">)</span><span class="token punctuation">;</span>        area <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        area <span class="token operator">+=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">dfs</span><span class="token punctuation">(</span>grid<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> area<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、执行结果"><a href="#五、执行结果" class="headerlink" title="五、执行结果"></a>五、执行结果</h2><p><strong>执行结果</strong>：<code>通过</code><br><strong>执行用时</strong>：<code>2 ms</code>, 在所有<code>Java</code>提交中击败了<code>99.78%</code>的用户<br><strong>内存消耗</strong>：<code>38.9 MB</code>, 在所有<code>Java</code>提交中击败了<code>52.10%</code>的用户<br><strong>通过测试用例</strong>：<code>728/728</code></p><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><ul><li><strong>难度</strong>：简单，看一眼题解发现跟之前题目相似思路和解法</li><li><strong>总结</strong>：跟<a href="https://garyleeeee.github.io/2022/01/06/algorithm/%E5%9B%BE%E5%83%8F%E6%B8%B2%E6%9F%93/">733.图像渲染</a>思路一致</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 中等难度 </tag>
            
            <tag> 深度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>733. 图像渲染</title>
      <link href="/2022/01/06/algorithm/%E5%9B%BE%E5%83%8F%E6%B8%B2%E6%9F%93/"/>
      <url>/2022/01/06/algorithm/%E5%9B%BE%E5%83%8F%E6%B8%B2%E6%9F%93/</url>
      
        <content type="html"><![CDATA[<h1 id="733-图像渲染"><a href="#733-图像渲染" class="headerlink" title="733.图像渲染"></a>733.图像渲染</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>有一幅以二维整数数组表示的图画，每一个整数表示该图画的像素值大小，数值在 0 到 65535 之间。</p><p>给你一个坐标<code>(sr, sc)</code>表示图像渲染开始的像素值（行 ，列）和一个新的颜色值<code>newColor</code>，让你重新上色这幅图像。</p><p>为了完成上色工作，从初始坐标开始，记录初始坐标的上下左右四个方向上像素值与初始坐标相同的相连像素点，接着再记录这四个方向上符合条件的像素点与他们对应四个方向上像素值与初始坐标相同的相连像素点，……，重复该过程。将所有有记录的像素点的颜色值改为新的颜色值。</p><p>最后返回经过上色渲染后的图像。</p><p><strong>示例一</strong>：</p><blockquote><p><strong>输入</strong>:<br>image = [[1,1,1],[1,1,0],[1,0,1]]<br>sr = 1, sc = 1, newColor = 2<br><strong>输出</strong>: [[2,2,2],[2,2,0],[2,0,1]]<br><strong>解析</strong>:<br>在图像的正中间，(坐标(sr,sc)=(1,1)),<br>在路径上所有符合条件的像素点的颜色都被更改成2。<br>注意，右下角的像素没有更改为2，<br>因为它不是在上下左右四个方向上与初始点相连的像素点。</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>image</code>和<code>image[0]</code>的长度在范围<code>[1, 50]</code>内。</li><li>给出的初始点将满足<code>0 &lt;= sr &lt; image.length</code>和<code>0 &lt;= sc &lt; image[0].length</code>。</li><li><code>image[i][j]</code>和<code>newColor</code>表示的颜色值在范围<code>[0, 65535]</code>内。</li></ul><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/flood-fill/">https://leetcode-cn.com/problems/flood-fill/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/flood-fill/solution/tu-xiang-xuan-ran-by-leetcode-solution/">https://leetcode-cn.com/problems/flood-fill/solution/tu-xiang-xuan-ran-by-leetcode-solution/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：深度优先遍历</li><li><strong>思路</strong>：看到蔓延就想到是广度/深度优先遍历，因为蔓延上下左右都是同理的</li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">floodFill</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> image<span class="token punctuation">,</span> <span class="token keyword">int</span> sr<span class="token punctuation">,</span> <span class="token keyword">int</span> sc<span class="token punctuation">,</span> <span class="token keyword">int</span> newColor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//渲染前的颜色(不会变)</span>    <span class="token keyword">int</span> needFillOldColor <span class="token operator">=</span> image<span class="token punctuation">[</span>sr<span class="token punctuation">]</span><span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>needFillOldColor <span class="token operator">==</span> newColor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//前后颜色相同，不用蔓延了</span>      <span class="token keyword">return</span> image<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span>sr<span class="token punctuation">,</span>sc<span class="token punctuation">,</span>newColor<span class="token punctuation">,</span>needFillOldColor<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> image<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">dfs</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> image<span class="token punctuation">,</span> <span class="token keyword">int</span> sr<span class="token punctuation">,</span> <span class="token keyword">int</span> sc<span class="token punctuation">,</span> <span class="token keyword">int</span> newColor<span class="token punctuation">,</span> <span class="token keyword">int</span> needFillOldColor<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//边界判断</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>sr <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> sc <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> sr <span class="token operator">></span> image<span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> sc <span class="token operator">></span> image<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token operator">-</span><span class="token number">1</span> <span class="token operator">||</span> needFillOldColor <span class="token operator">!=</span> image<span class="token punctuation">[</span>sr<span class="token punctuation">]</span><span class="token punctuation">[</span>sc<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//不再蔓延</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">//染色</span>    image<span class="token punctuation">[</span>sr<span class="token punctuation">]</span><span class="token punctuation">[</span>sc<span class="token punctuation">]</span> <span class="token operator">=</span> newColor<span class="token punctuation">;</span>    <span class="token comment">//蔓延</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span>sr<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>sc<span class="token punctuation">,</span>newColor<span class="token punctuation">,</span>needFillOldColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//左</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span>sr<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>sc<span class="token punctuation">,</span>newColor<span class="token punctuation">,</span>needFillOldColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//右</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span>sr<span class="token punctuation">,</span>sc<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>newColor<span class="token punctuation">,</span>needFillOldColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//下</span>    <span class="token function">dfs</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span>sr<span class="token punctuation">,</span>sc<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>newColor<span class="token punctuation">,</span>needFillOldColor<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//上</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、执行结果"><a href="#五、执行结果" class="headerlink" title="五、执行结果"></a>五、执行结果</h2><p><strong>执行结果</strong>：<code>通过</code><br><strong>执行用时</strong>：<code>0 ms</code>, 在所有<code>Java</code>提交中击败了<code>100%</code>的用户<br><strong>内存消耗</strong>：<code>39.2 MB</code>, 在所有<code>Java</code>提交中击败了<code>64.99%</code>的用户<br><strong>通过测试用例</strong>：<code>277/277</code></p><h2 id="六、测试用例不通过记录"><a href="#六、测试用例不通过记录" class="headerlink" title="六、测试用例不通过记录"></a>六、测试用例不通过记录</h2><h3 id="1-没有对特殊情况做判断-边界"><a href="#1-没有对特殊情况做判断-边界" class="headerlink" title="1.没有对特殊情况做判断(边界)"></a>1.没有对特殊情况做判断(边界)</h3><p><strong>失败用例</strong>： <code>image = [[0,0,0],[0,1,1]], sr = 1, sc = 1, newColor = 1</code><br><strong>错误结果</strong>: <code>java.lang.StackOverflowError</code><br><strong>预期结果</strong>: <code>[[0,0,0],[0,1,1]]</code><br><strong>修改前</strong>：无<br><strong>修改后</strong>：</p><pre class="line-numbers language-none"><code class="language-none">if(needFillOldColor &#x3D;&#x3D; newColor) &#123;  &#x2F;&#x2F;前后颜色相同，不用蔓延了  return image;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="七、总结"><a href="#七、总结" class="headerlink" title="七、总结"></a>七、总结</h2><ul><li><strong>难度</strong>：简单</li><li><strong>总结</strong>：需要注意处理边界值</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 深度优先搜索 </tag>
            
            <tag> 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>567. 字符串的排列</title>
      <link href="/2022/01/05/algorithm/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/"/>
      <url>/2022/01/05/algorithm/%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="567-字符串的排列"><a href="#567-字符串的排列" class="headerlink" title="567.字符串的排列"></a>567.字符串的排列</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给你两个字符串<code>s1</code>和<code>s2</code>，写一个函数来判断<code>s2</code>是否包含<code>s1</code>的排列。如果是，返回<code>true</code>；否则，返回<code>false</code>。</p><p>换句话说，<code>s1</code>的排列之一是<code>s2</code>的<strong>子串</strong>。</p><p><strong>示例一</strong>：</p><blockquote><p><strong>输入</strong>：s1 = “ab” s2 = “eidbaooo”<br><strong>输出</strong>：true<br><strong>解释</strong>：s2 包含 s1 的排列之一 (“ba”).</p></blockquote><p><strong>示例二</strong>：</p><blockquote><p><strong>输入</strong>：s1= “ab” s2 = “eidboaoo”<br><strong>输出</strong>：false</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>1 &lt;= s1.length, s2.length &lt;= 10^4</code></li><li><code>s1</code>和<code>s2</code>仅包含小写字母</li></ul><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/permutation-in-string/">https://leetcode-cn.com/problems/permutation-in-string/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/permutation-in-string/solution/zhu-shi-chao-xiang-xi-de-hua-dong-chuang-rc7d/">https://leetcode-cn.com/problems/permutation-in-string/solution/zhu-shi-chao-xiang-xi-de-hua-dong-chuang-rc7d/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：哈希表+移动窗口</li><li><strong>思路</strong>：<ul><li>1.移动窗口放在s2中，且长度等于s1</li><li>2.<strong>s1排列之一</strong> = <strong>长度相等</strong> + <strong>每个字符数量一致</strong></li></ul></li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">checkInclusion</span><span class="token punctuation">(</span><span class="token class-name">String</span> s1<span class="token punctuation">,</span> <span class="token class-name">String</span> s2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//用哈希表存s1中每个字符出现的次数</span>        <span class="token comment">//因为判断s2是否包含s1的某一个排列，所以只需要s2中某个连续子串的字符跟次数跟s1对应则为true</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> s1Map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c<span class="token operator">:</span>s1<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token comment">//记录每个字符出现次数，get的时候不存在则默认为0</span>            s1Map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>s1Map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//s2的移动窗口(与s1长度一致)</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> s1<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">&lt;</span>s2<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//如果有某个窗口为true，则说明s1的排列之一是s2的子串，return true</span>            <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isTheSameCharacterCount</span><span class="token punctuation">(</span>s1Map<span class="token punctuation">,</span>s2<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span>right<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//窗口向右滑动</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>            right<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * str中字符所包含的数量是否与targetMap一致     * ps.    str长度=targetMap中value总和     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isTheSameCharacterCount</span><span class="token punctuation">(</span><span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> targetMap<span class="token punctuation">,</span> <span class="token class-name">String</span> str<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> resultMap <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">char</span> c <span class="token operator">:</span> str<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token comment">//查询获取s1中c的数量</span>            <span class="token keyword">int</span> targetCount <span class="token operator">=</span> targetMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>targetCount <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//targetMap不存在c字符，故结果不一致</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//查询s2中滑动窗口c的数量</span>            <span class="token keyword">int</span> count <span class="token operator">=</span> resultMap<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>count <span class="token operator">>=</span> targetCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//str包含比targetMap多的字符，故结果不一致</span>                <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//记录str的c字符数量+1</span>            resultMap<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>count<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、执行结果"><a href="#五、执行结果" class="headerlink" title="五、执行结果"></a>五、执行结果</h2><p><strong>执行结果</strong>：<code>通过</code><br><strong>执行用时</strong>：<code>731 ms</code>, 在所有<code>Java</code>提交中击败了<code>7.56%</code>的用户<br><strong>内存消耗</strong>：<code>39.2 MB</code>, 在所有<code>Java</code>提交中击败了<code>5.12%</code>的用户<br><strong>通过测试用例</strong>：<code>106/106</code></p><h2 id="六、总结"><a href="#六、总结" class="headerlink" title="六、总结"></a>六、总结</h2><ul><li><strong>难度</strong>：较难，思路没想到，过程也复杂</li><li><strong>总结</strong>：<ul><li>1.移动窗口题型比较少接触，需要多做</li><li>2.没有使用题解的解法，而是用了比较容易理解的哈希表（缺点：慢+内存消耗大）</li><li>3.解题耗时长，需要重做，培养解题思路</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 中等难度 </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 移动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>3. 无重复字符的最长子串</title>
      <link href="/2022/01/05/algorithm/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/"/>
      <url>/2022/01/05/algorithm/%E6%97%A0%E9%87%8D%E5%A4%8D%E5%AD%97%E7%AC%A6%E7%9A%84%E6%9C%80%E9%95%BF%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="3-无重复字符的最长子串"><a href="#3-无重复字符的最长子串" class="headerlink" title="3.无重复字符的最长子串"></a>3.无重复字符的最长子串</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给定一个字符串<code>s</code>，请你找出其中不含有重复字符的<strong>最长子串</strong>的长度。</p><p><strong>示例一</strong>：</p><blockquote><p><strong>输入</strong>: s = “abcabcbb”<br><strong>输出</strong>: 3<br><strong>解释</strong>: 因为无重复字符的最长子串是 “abc”，所以其长度为 3。</p></blockquote><p><strong>示例二</strong>：</p><blockquote><p><strong>输入</strong>: s = “bbbbb”<br><strong>输出</strong>: 1<br><strong>解释</strong>: 因为无重复字符的最长子串是 “b”，所以其长度为 1。</p></blockquote><p><strong>示例三</strong>：</p><blockquote><p><strong>输入</strong>: s = “pwwkew”<br><strong>输出</strong>: 3<br><strong>解释</strong>: 因为无重复字符的最长子串是 “wke”，所以其长度为 3。<br>    请注意，你的答案必须是 子串 的长度，”pwke” 是一个子序列，不是子串。</p></blockquote><p><strong>示例四</strong>：</p><blockquote><p><strong>输入</strong>: s = “”<br><strong>输出</strong>: 0</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>0 &lt;= s.length &lt;= 5 * 10^4</code></li><li><code>s</code>由英文字母、数字、符号和空格组成</li></ul><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/hua-jie-suan-fa-3-wu-zhong-fu-zi-fu-de-zui-chang-z/">https://leetcode-cn.com/problems/longest-substring-without-repeating-characters/solution/hua-jie-suan-fa-3-wu-zhong-fu-zi-fu-de-zui-chang-z/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：哈希表+移动窗口</li><li><strong>思路</strong>：从左到右用end遍历字符串并存起来(字符+下标)，遇到重复的字符的话就重置start，并计算长度length=end-start+1</li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLongestSubstring</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//用哈希表基表每个字符的下标，然后遇到有重复的就去掉上一个重复的的</span>        <span class="token comment">//如abca去掉上一个重复的a就是bca就是无重复字符的子串</span>        <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Character</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> start <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> end<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>end<span class="token operator">&lt;</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>end<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">char</span> c <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                <span class="token comment">// start = map.get(c) + 1;</span>                <span class="token comment">// 需要加这个字段防止定位到不连续的下标去(比如abba)</span>                start <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span> start<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            result <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">,</span> end<span class="token operator">-</span>start<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：中等</li><li><strong>总结</strong>：移动窗口题型没做过，需要多做，做熟悉</li></ul><h2 id="六、测试用例不通过记录"><a href="#六、测试用例不通过记录" class="headerlink" title="六、测试用例不通过记录"></a>六、测试用例不通过记录</h2><h3 id="1-没有对特殊情况做判断-边界"><a href="#1-没有对特殊情况做判断-边界" class="headerlink" title="1.没有对特殊情况做判断(边界)"></a>1.没有对特殊情况做判断(边界)</h3><p><strong>失败用例</strong>：”abba”<br><strong>错误结果</strong>: 3<br><strong>预期结果</strong>: 2<br><strong>修改前</strong>：<code>start = map.get(c) + 1;</code><br><strong>修改后</strong>：<code>start = Math.max(map.get(c)+1, start);</code><br><strong>解释</strong>：</p><ul><li>遍历完第三个字符b的时候，start=2,end=2</li><li>遍历到第四个字符a的时候，<code>start=map.get(3)+1=1</code>，但是此时<code>start=end=2</code>（并没有包含了下标为0的a），所以我们不能执行start=1</li><li><code>start = Math.max(map.get(c)+1, start);</code>执行这个的理由是判断<code>map.get(c)</code>是否包含在<code>start</code>-&gt;<code>end</code>中<ul><li>包含：<code>start = map.get(c) + 1</code></li><li>不包含（不处理）：<code>start = start</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 中等难度 </tag>
            
            <tag> 哈希表 </tag>
            
            <tag> 移动窗口 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>977. 有序数组的平方</title>
      <link href="/2021/12/31/algorithm/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/"/>
      <url>/2021/12/31/algorithm/%E6%9C%89%E5%BA%8F%E6%95%B0%E7%BB%84%E7%9A%84%E5%B9%B3%E6%96%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="977-有序数组的平方"><a href="#977-有序数组的平方" class="headerlink" title="977.有序数组的平方"></a>977.有序数组的平方</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给你一个按<strong>非递减顺序</strong>排序的整数数组<code>nums</code>，返回<strong>每个数字的平方</strong>组成的新数组，要求也按<strong>非递减顺序</strong>排序。</p><p><strong>示例一</strong>：</p><blockquote><p><strong>输入</strong>：nums = [-4,-1,0,3,10]<br><strong>输出</strong>：[0,1,9,16,100]<br><strong>解释</strong>：平方后，数组变为 [16,1,0,9,100]<br>排序后，数组变为 [0,1,9,16,100]</p></blockquote><p><strong>示例二</strong>：</p><blockquote><p><strong>输入</strong>：nums = [-7,-3,2,3,11]<br><strong>输出</strong>：[4,9,9,49,121]</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>1 &lt;= nums.length &lt;= 104</code></li><li><code>-104 &lt;= nums[i] &lt;= 104</code></li><li><code>nums</code> 已按<strong>非递减顺序</strong>排序</li></ul><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/squares-of-a-sorted-array/">https://leetcode-cn.com/problems/squares-of-a-sorted-array/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/squares-of-a-sorted-array/solution/you-xu-shu-zu-de-ping-fang-by-leetcode-solution/">https://leetcode-cn.com/problems/squares-of-a-sorted-array/solution/you-xu-shu-zu-de-ping-fang-by-leetcode-solution/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：双指针</li><li><strong>思路</strong>：<ul><li>1.负数的话越小平方的数越大，正数的话越大平方的数越大</li><li>2.用双指针两端往中间遍历直到重合，比较大的就放在结果集后面</li></ul></li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sortedSquares</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//前提：负数的话越小平方的数越大，正数的话越大平方的数越大</span>        <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> right <span class="token operator">=</span> nums<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> result<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> result<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token comment">//result从右往左排</span>        <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;=</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">></span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>                left<span class="token operator">++</span><span class="token punctuation">;</span>                index<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span> <span class="token operator">*</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>                right<span class="token operator">--</span><span class="token punctuation">;</span>                index<span class="token operator">--</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：简单(没想到有题解这种操作)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>283. 移动零</title>
      <link href="/2021/12/31/algorithm/%E7%A7%BB%E5%8A%A8%E9%9B%B6/"/>
      <url>/2021/12/31/algorithm/%E7%A7%BB%E5%8A%A8%E9%9B%B6/</url>
      
        <content type="html"><![CDATA[<h1 id="283-移动零"><a href="#283-移动零" class="headerlink" title="283.移动零"></a>283.移动零</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给定一个数组<code>nums</code>，编写一个函数将所有<code>0</code>移动到数组的末尾，同时保持非零元素的相对顺序。</p><p><strong>示例</strong>：</p><blockquote><p><strong>输入</strong>: [0,1,0,3,12]<br><strong>输出</strong>: [1,3,12,0,0]</p></blockquote><p><strong>说明</strong>：</p><ul><li>必须在原数组上操作，不能拷贝额外的数组。</li><li>尽量减少操作次数。</li></ul><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/move-zeroes/">https://leetcode-cn.com/problems/move-zeroes/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/move-zeroes/solution/dong-hua-yan-shi-283yi-dong-ling-by-wang_ni_ma/">https://leetcode-cn.com/problems/move-zeroes/solution/dong-hua-yan-shi-283yi-dong-ling-by-wang_ni_ma/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：双指针</li><li><strong>思路</strong>：用两个指针，一个遍历数组，一个指向第一个0下标(用于交换数)</li><li><strong>步骤</strong>：<ul><li>1.定义移动指针i=0，指向第一个0的下标j=0</li><li>2.i从0遍历到nums末尾，当nums[i]不为0时，与nums[j]（第一个0）交换，同时j右移</li></ul></li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">moveZeroes</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//指向第一个0的下标</span>    <span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//游动指针从头到尾</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//如果当前数为0，就i+1，j不变</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//调换i和j位置的数</span>        <span class="token keyword">int</span> temp <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token comment">//j+1（第一个0的下标）</span>        j<span class="token operator">+=</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：中等(没有这个思路/思维，需要重做)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 双指针 </tag>
            
            <tag> 简单难度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>278. 第一个错误的版本</title>
      <link href="/2021/12/30/algorithm/%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC/"/>
      <url>/2021/12/30/algorithm/%E7%AC%AC%E4%B8%80%E4%B8%AA%E9%94%99%E8%AF%AF%E7%9A%84%E7%89%88%E6%9C%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="278-第一个错误的版本"><a href="#278-第一个错误的版本" class="headerlink" title="278.第一个错误的版本"></a>278.第一个错误的版本</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p><p>假设你有<code>n</code>个版本<code>[1, 2, ..., n]</code>，你想找出导致之后所有版本出错的第一个错误的版本。</p><p>你可以通过调用<code>bool isBadVersion(version)</code>接口来判断版本号<code>version</code>是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。</p><p><strong>示例一</strong>：</p><blockquote><p><strong>输入</strong>：n = 5, bad = 4<br><strong>输出</strong>：4<br><strong>解释</strong>：<br>调用 isBadVersion(3) -&gt; false<br>调用 isBadVersion(5) -&gt; true<br>调用 isBadVersion(4) -&gt; true<br>所以，4 是第一个错误的版本。</p></blockquote><p><strong>示例二</strong>：</p><blockquote><p><strong>输入</strong>：n = 1, bad = 1<br><strong>输出</strong>：1</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>1 &lt;= bad &lt;= n &lt;= 231 - 1</code></li></ul><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/first-bad-version/">https://leetcode-cn.com/problems/first-bad-version/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/first-bad-version/solution/di-yi-ge-cuo-wu-de-ban-ben-by-leetcode-s-pf8h/">https://leetcode-cn.com/problems/first-bad-version/solution/di-yi-ge-cuo-wu-de-ban-ben-by-leetcode-s-pf8h/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：二分查找</li><li><strong>思路</strong>：true的左边全是true，false的右边全是false，所以可以理解为有序数组</li><li><strong>步骤</strong>：<ul><li>1.正常定义二分查找需要的变量：left、right、middle</li><li>2.判断middle的正确性<ul><li>2.1 正确 -&gt; left移动到middle+1</li><li>2.2 错误 -&gt; right移动到middle（不减1是因为最终返回的是第一个right而不是第一个left）</li></ul></li><li>3.while循环到最后left会与right重合，这就是最终结果</li></ul></li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/* The isBadVersion API is defined in the parent class VersionControl.      boolean isBadVersion(int version); */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Solution</span> <span class="token keyword">extends</span> <span class="token class-name">VersionControl</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">firstBadVersion</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">int</span> middle <span class="token operator">=</span> left <span class="token operator">+</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span>      <span class="token comment">//二分查找，中间点如果是true的，那么左边都为true</span>      <span class="token comment">//如果中间点是false的，那么右边都为false</span>      <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">isBadVersion</span><span class="token punctuation">(</span>middle<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果是false，那么result在左边（包含middle），因为结果是要输出第一个false的version</span>        right<span class="token operator">=</span>middle<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>        <span class="token comment">//如果是true，那么result在右边（不包含middle）</span>        left<span class="token operator">=</span>middle<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> right<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：简单</li></ul><h2 id="六、测试用例不通过记录"><a href="#六、测试用例不通过记录" class="headerlink" title="六、测试用例不通过记录"></a>六、测试用例不通过记录</h2><h3 id="1-AC时超过时间限制"><a href="#1-AC时超过时间限制" class="headerlink" title="1.AC时超过时间限制"></a>1.AC时超过时间限制</h3><p><strong>失败用例</strong>：n = 2126753390, bad = 1702766719<br><strong>修改前</strong>：<code>int middle = left + right / 2;</code><br><strong>修改后</strong>：<code>int middle = left + (right - left) / 2;</code></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 简单难度 </tag>
            
            <tag> 二分查找 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>79. 单词搜索</title>
      <link href="/2021/12/28/algorithm/%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A2/"/>
      <url>/2021/12/28/algorithm/%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A2/</url>
      
        <content type="html"><![CDATA[<h1 id="79-单词搜索"><a href="#79-单词搜索" class="headerlink" title="79.单词搜索"></a>79.单词搜索</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给定一个<code>m x n</code>二维字符网格<code>board</code>和一个字符串单词<code>word</code>。如果<code>word</code>存在于网格中，返回<code>true</code>；否则，返回<code>false</code>。</p><p>单词必须按照字母顺序，通过相邻的单元格内的字母构成，其中“相邻”单元格是那些水平相邻或垂直相邻的单元格。同一个单元格内的字母不允许被重复使用。</p><p><strong>示例一</strong>：<br><img src="/images/algorithm/%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A21.png"></p><blockquote><p><strong>输入</strong>：board = [[“A”,”B”,”C”,”E”],[“S”,”F”,”C”,”S”],[“A”,”D”,”E”,”E”]], word = “ABCCED”<br><strong>输出</strong>：true</p></blockquote><p><strong>示例二</strong>：<br><img src="/images/algorithm/%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A22.png"></p><blockquote><p><strong>输入</strong>：board = [[“A”,”B”,”C”,”E”],[“S”,”F”,”C”,”S”],[“A”,”D”,”E”,”E”]], word = “SEE”<br><strong>输出</strong>：true</p></blockquote><p><strong>示例三</strong>：<br><img src="/images/algorithm/%E5%8D%95%E8%AF%8D%E6%90%9C%E7%B4%A23.png"></p><blockquote><p><strong>输入</strong>：board = [[“A”,”B”,”C”,”E”],[“S”,”F”,”C”,”S”],[“A”,”D”,”E”,”E”]], word = “ABCB”<br><strong>输出</strong>：false</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>m == board.length</code></li><li><code>n = board[i].length</code></li><li><code>1 &lt;= m, n &lt;= 6</code></li><li><code>1 &lt;= word.length &lt;= 15</code></li><li><code>board</code>和<code>word</code>仅由大小写英文字母组成</li></ul><p><strong>进阶</strong>：你可以使用搜索剪枝的技术来优化解决方案，使其在 board 更大的情况下可以更快解决问题？</p><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/word-search/">https://leetcode-cn.com/problems/word-search/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/word-search/solution/su-kan-dfsjian-dan-yi-dong-by-rain-ru-xnwe/">https://leetcode-cn.com/problems/word-search/solution/su-kan-dfsjian-dan-yi-dong-by-rain-ru-xnwe/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：回溯算法</li><li><strong>思路</strong>：理解为三叉树即可，然后参考全排列</li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">WordSearch</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">exist</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//这种有结束条件的一般都要想到回溯</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span>word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//找到第一个字符</span>        <span class="token keyword">char</span> first <span class="token operator">=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> board<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//找到起点</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> first<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    <span class="token comment">//还是得设置一个boolean数组</span>                    <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isUsed <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>board<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">[</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token keyword">boolean</span> isExist <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">backtrack</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> words<span class="token punctuation">,</span> isUsed<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>                    <span class="token comment">//只要有一条路径符合即可</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>isExist<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                        <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//words存放路径</span>    <span class="token comment">//board记录走过的(设置0即可)</span>    <span class="token comment">//word存放需要走的单词</span>    <span class="token comment">/**     * 回溯算法     * @param board 二维字符网络(条件给的，不变)     * @param words 路径     * @param isUsed 网络字符使用情况(路径走过置为true)     * @param x     * @param y     * @param wordsSize     * @param word     * @return     */</span>    <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board<span class="token punctuation">,</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> words<span class="token punctuation">,</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> isUsed<span class="token punctuation">,</span> <span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">int</span> wordsSize<span class="token punctuation">,</span> <span class="token class-name">String</span> word<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//判断是否在便捷了</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>x <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> x <span class="token operator">></span> isUsed<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">||</span> y <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> y <span class="token operator">></span> isUsed<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//使用过也返回false</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>isUsed<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//判断是否可以连上</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">!=</span> word<span class="token punctuation">.</span><span class="token function">charAt</span><span class="token punctuation">(</span>wordsSize<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            words<span class="token punctuation">[</span>wordsSize<span class="token punctuation">]</span> <span class="token operator">=</span> board<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span><span class="token punctuation">;</span>            wordsSize<span class="token operator">++</span><span class="token punctuation">;</span>            isUsed<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>wordsSize <span class="token operator">==</span> word<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">return</span> <span class="token boolean">true</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//前后左右看</span>        <span class="token keyword">boolean</span> left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">backtrack</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> words<span class="token punctuation">,</span> isUsed<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> wordsSize<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">backtrack</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> words<span class="token punctuation">,</span> isUsed<span class="token punctuation">,</span> x <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> y<span class="token punctuation">,</span> wordsSize<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> up <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">backtrack</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> words<span class="token punctuation">,</span> isUsed<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> wordsSize<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">boolean</span> down <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">backtrack</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> words<span class="token punctuation">,</span> isUsed<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> wordsSize<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//回溯算法关键，需要往回回滚数据</span>        isUsed<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>        <span class="token comment">//只要有一个有true即可</span>        <span class="token keyword">return</span> left <span class="token operator">||</span> right <span class="token operator">||</span> up <span class="token operator">||</span> down<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 输入：board = [["A","B","C","E"],["S","F","C","S"],["A","D","E","E"]], word = "ABCCED"     输出：true     * @param args     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> board <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'B'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'S'</span><span class="token punctuation">,</span> <span class="token string">'F'</span><span class="token punctuation">,</span> <span class="token string">'C'</span><span class="token punctuation">,</span> <span class="token string">'S'</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token string">'A'</span><span class="token punctuation">,</span> <span class="token string">'D'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">,</span> <span class="token string">'E'</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">String</span> word <span class="token operator">=</span> <span class="token string">"ABCCED"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">WordSearch</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">exist</span><span class="token punctuation">(</span>board<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：思路很清晰，就是步骤(主要是判断)会比较多</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 中等难度 </tag>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15. 三数之和</title>
      <link href="/2021/12/28/algorithm/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/"/>
      <url>/2021/12/28/algorithm/%E4%B8%89%E6%95%B0%E4%B9%8B%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="15-三数之和"><a href="#15-三数之和" class="headerlink" title="15.三数之和"></a>15.三数之和</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给你一个包含<code>n</code>个整数的数组<code>nums</code>，判断<code>nums</code>中是否存在三个元素 a，b，c ，使得a + b + c = 0 ？请你找出所有和为<code>0</code>且不重复的三元组。</p><p><strong>注意</strong>：答案中不可以包含重复的三元组。</p><p><strong>示例一</strong>：</p><blockquote><p><strong>输入</strong>：nums = [-1,0,1,2,-1,-4]<br><strong>输出</strong>：[[-1,-1,2],[-1,0,1]]</p></blockquote><p><strong>示例二</strong>：</p><blockquote><p><strong>输入</strong>：nums = []<br><strong>输出</strong>：[]</p></blockquote><p><strong>示例三</strong>：</p><blockquote><p><strong>输入</strong>：nums = [0]<br><strong>输出</strong>：[]</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>0 &lt;= nums.length &lt;= 3000</code></li><li><code>-105 &lt;= nums[i] &lt;= 105</code></li></ul><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/3sum/">https://leetcode-cn.com/problems/3sum/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/3sum/solution/hua-jie-suan-fa-15-san-shu-zhi-he-by-guanpengchn/">https://leetcode-cn.com/problems/3sum/solution/hua-jie-suan-fa-15-san-shu-zhi-he-by-guanpengchn/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：双指针</li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ThreeSum</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">threeSum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> length <span class="token operator">=</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>    <span class="token comment">//少于3个直接返回(不存在符合要求结果)</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>length<span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//可以直接暴力遍历，但是会有很多次无效判断，所以看看能不能尽可能跳过这无效判断</span>    <span class="token comment">//排序数组</span>    <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//双指针</span>    <span class="token keyword">int</span> left<span class="token punctuation">;</span>    <span class="token keyword">int</span> right<span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>length<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//注意边界处理</span>      <span class="token comment">//如果nums[i]==nums[i-1]，则不用处理(去重)</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">></span><span class="token number">0</span><span class="token operator">&amp;&amp;</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      left <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>      right <span class="token operator">=</span> length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment">//循环到左右指针相遇即可停</span>      <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> sum <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          <span class="token comment">//符合要求，存起来</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> list <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          list<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">;</span>          <span class="token comment">//左移右移不能等于当前值(结果要去重) 不能越界</span>          <span class="token keyword">while</span><span class="token punctuation">(</span>left<span class="token operator">&lt;</span>right <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>left<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            left<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          left<span class="token operator">++</span><span class="token punctuation">;</span>          <span class="token keyword">while</span><span class="token punctuation">(</span>right<span class="token operator">></span>left <span class="token operator">&amp;&amp;</span> nums<span class="token punctuation">[</span>right<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            right<span class="token operator">--</span><span class="token punctuation">;</span>          <span class="token punctuation">&#125;</span>          right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">&lt;</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          left<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">else</span> <span class="token keyword">if</span><span class="token punctuation">(</span>sum<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>          right<span class="token operator">--</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 例子：   *  输入：nums = [-1,0,1,2,-1,-4]   *  输出：[[-1,-1,2],[-1,0,1]]   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreeSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">threeSum</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：一般</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 中等难度 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>494. 目标和</title>
      <link href="/2021/12/26/algorithm/%E7%9B%AE%E6%A0%87%E5%92%8C/"/>
      <url>/2021/12/26/algorithm/%E7%9B%AE%E6%A0%87%E5%92%8C/</url>
      
        <content type="html"><![CDATA[<h1 id="494-目标和"><a href="#494-目标和" class="headerlink" title="494.目标和"></a>494.目标和</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给你一个整数数组<code>nums</code>和一个整数<code>target</code>。</p><p>向数组中的每个整数前添加<code>&#39;+&#39;</code>或<code>&#39;-&#39;</code>，然后串联起所有整数，可以构造一个<strong>表达式</strong>：</p><p>例如，<code>nums = [2, 1]</code>，可以在<code>2</code>之前添加<code>&#39;+&#39;</code>，在<code>1</code>之前添加<code>&#39;-&#39;</code>，然后串联起来得到表达式<code>&quot;+2-1&quot;</code>。<br>返回可以通过上述方法构造的、运算结果等于<code>target</code>的不同<strong>表达式</strong>的数目。</p><p><strong>示例一</strong>：</p><blockquote><p><strong>输入</strong>：nums = [1,1,1,1,1], target = 3<br><strong>输出</strong>：5<br><strong>解释</strong>：一共有 5 种方法让最终目标和为 3 。<br>-1 + 1 + 1 + 1 + 1 = 3<br>+1 - 1 + 1 + 1 + 1 = 3<br>+1 + 1 - 1 + 1 + 1 = 3<br>+1 + 1 + 1 - 1 + 1 = 3<br>+1 + 1 + 1 + 1 - 1 = 3</p></blockquote><p><strong>示例二</strong>：</p><blockquote><p><strong>输入</strong>：nums = [1], target = 1<br><strong>输出</strong>：1</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>1 &lt;= nums.length &lt;= 20</code></li><li><code>0 &lt;= nums[i] &lt;= 1000</code></li><li><code>0 &lt;= sum(nums[i]) &lt;= 1000</code></li><li><code>-1000 &lt;= target &lt;= 1000</code></li></ul><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/target-sum/">https://leetcode-cn.com/problems/target-sum/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/target-sum/solution/mu-biao-he-by-leetcode-solution-o0cp/">https://leetcode-cn.com/problems/target-sum/solution/mu-biao-he-by-leetcode-solution-o0cp/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：数组+回溯</li><li><strong>思路</strong>：把对于后面一个数的+-当做左右子树，然后通过回溯算法即可遍历所有情况</li><li><strong>注意</strong>：每一个数都可以+-(包括第一个数)</li><li><strong>步骤</strong>：<ul><li>1.设置层级level(达到最后一个数就可判断sum)</li><li>2.当前数操作下一个数(具体见代码注释)</li><li>3.循环2 下一个数操作下下一个数。。。(见代码注释)</li><li>4.到达最后一个数(level=length)，判断sum==target(true则size++)</li><li>5.返回size</li></ul></li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TargetSum</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">findTargetSumWays</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//注意这里不是0开始</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 解法：数组+回溯   * 思路：把对于后面一个数的+-当做左右子树，然后通过回溯算法即可遍历所有情况   * 注意：每一个数都可以+-(包括第一个数)   * 步骤：   *  1.设置层级level(达到最后一个数就可判断sum)   *  2.当前数操作下一个数   *         1   *      +/  \-   *      1   1   *      2.1 当前数+下一个数   *      2.2 当前数-下一个数   *  3.循环2 下一个数操作下下一个数。。。   *          1   *      +/    \-   *      1      1   *   +/  \- +/  \-   *   1   1  1    1   *  4.到达最后一个数(level=length)，判断sum==target(true则size++)   *  5.返回size   * @param nums   * @param target   * @param level 结束条件level==nums.length   * @param sum 截止当前位置表达式总和   */</span>  <span class="token keyword">private</span> <span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> target<span class="token punctuation">,</span> <span class="token keyword">int</span> level<span class="token punctuation">,</span> <span class="token keyword">int</span> sum<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//结束条件判断(到达最后一个数)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>level <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//判断最终表达式是否等于target</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>sum <span class="token operator">==</span> target<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        count<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//要注意，第一层也是有+-的。。。</span>    <span class="token comment">//+</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> sum <span class="token operator">+</span> nums<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//-</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">backtrack</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">,</span> level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> sum <span class="token operator">-</span> nums<span class="token punctuation">[</span>level<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 例子：   *  输入：nums = [1,1,1,1,1], target = 3   *  输出：3   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> target <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">TargetSum</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">findTargetSumWays</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> target<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：还好，知道可以用回溯算法后醍醐灌顶(还是得重做多做，一开始没这思路)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 中等难度 </tag>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>560. 和为K的子数组</title>
      <link href="/2021/12/26/algorithm/%E5%92%8C%E4%B8%BAK%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/"/>
      <url>/2021/12/26/algorithm/%E5%92%8C%E4%B8%BAK%E7%9A%84%E5%AD%90%E6%95%B0%E7%BB%84/</url>
      
        <content type="html"><![CDATA[<h1 id="560-和为K的子数组"><a href="#560-和为K的子数组" class="headerlink" title="560.和为K的子数组"></a>560.和为K的子数组</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给你一个整数数组<code>nums</code>和一个整数<code>k</code>，请你统计并返回该数组中和为<code>k</code>的连续子数组的个数。</p><p><strong>示例一</strong>：</p><blockquote><p><strong>输入</strong>：nums = [1,1,1], k = 2<br><strong>输出</strong>：2</p></blockquote><p><strong>示例二</strong>：</p><blockquote><p><strong>输入</strong>：nums = [1,2,3], k = 3<br><strong>输出</strong>：2</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>1 &lt;= nums.length &lt;= 2 * 104</code></li><li><code>-1000 &lt;= nums[i] &lt;= 1000</code></li><li><code>-107 &lt;= k &lt;= 107</code></li></ul><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/">https://leetcode-cn.com/problems/subarray-sum-equals-k/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/subarray-sum-equals-k/solution/he-wei-kde-zi-shu-zu-by-leetcode-solution/">https://leetcode-cn.com/problems/subarray-sum-equals-k/solution/he-wei-kde-zi-shu-zu-by-leetcode-solution/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：前缀和+数组+哈希表</li><li><strong>思路</strong>：如果双重遍历时间复杂度会很高，所以在这基础上引入前缀和和哈希表，可以避免多次不必要的计算</li><li><strong>步骤</strong>：<ul><li>1.提供数组nums=[1 2 3 5 8]、k=8</li><li>2.<br>  A:——– &lt;—k—&gt;<br>  B:——————<br>如AB所示，我们要计算有k长度的连续数组，完全可以通过B-A，其中A、B都是当前位置的前缀和(*)</li><li>3.由2我们可列出前缀和[1 3 6 11 19]</li><li>4.由2和3我们知道3就是对应2的B，因为A+k=B，所以我们只要找A=B-k的A是否存在(B和k已知)</li></ul></li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SubarraySumEqualsK</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * @param nums 提供的整数数组   * @param k 连续子数组和   * @return   */</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">subarraySum</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span> <span class="token keyword">int</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//结果</span>    <span class="token keyword">int</span> count <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//当前和</span>    <span class="token keyword">int</span> pre <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token comment">//key是和，value是次数</span>    <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//是为了那种从0-i下标就是符合连续子数组和的</span>    map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//计算前缀和</span>      pre <span class="token operator">+=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>      <span class="token comment">//如果存在前缀和</span>      <span class="token keyword">int</span> num <span class="token operator">=</span> pre <span class="token operator">-</span> k<span class="token punctuation">;</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>map<span class="token punctuation">.</span><span class="token function">containsKey</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//意思就是连上之前的情况也可以有对应count</span>        <span class="token comment">//比如nums=[3,-3,2,-2,0,3]、k=0</span>        <span class="token comment">//对应的前缀和为sums=[3,0,2,0,0,3]</span>        <span class="token comment">//所以符合条件的连续子数组会有[3,-3][2,-2][0]由于连上的情况就可以有[3,-3,2,-2][3,-3,2,-2,0][2,-2,0[</span>        count <span class="token operator">+=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//如果没存在过，就初始化1，存在就加1(给上边提供count+=)</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> map<span class="token punctuation">.</span><span class="token function">getOrDefault</span><span class="token punctuation">(</span>pre<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> count<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 例子：   *  输入：[1,1,1]   *  输出：2   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> k <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SubarraySumEqualsK</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">subarraySum</span><span class="token punctuation">(</span>nums<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：没思路，看了很久题解也不是很会做</li><li><strong>备注</strong>：前缀和，需要重做</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 中等难度 </tag>
            
            <tag> 前缀和 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19. 删除链表的倒数第N个结点</title>
      <link href="/2021/12/24/algorithm/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9/"/>
      <url>/2021/12/24/algorithm/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9/</url>
      
        <content type="html"><![CDATA[<h1 id="19-删除链表的倒数第N个结点"><a href="#19-删除链表的倒数第N个结点" class="headerlink" title="19.删除链表的倒数第N个结点"></a>19.删除链表的倒数第N个结点</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给你一个链表，删除链表的倒数第<code>n</code>个结点，并且返回链表的头结点。</p><p><strong>示例一</strong>：<br><img src="/images/algorithm/%E5%88%A0%E9%99%A4%E9%93%BE%E8%A1%A8%E7%9A%84%E5%80%92%E6%95%B0%E7%AC%ACN%E4%B8%AA%E7%BB%93%E7%82%B9.png"></p><blockquote><p><strong>输入</strong>：head = [1,2,3,4,5], n = 2<br><strong>输出</strong>：[1,2,3,5]</p></blockquote><p><strong>示例二</strong>：</p><blockquote><p><strong>输入</strong>：head = [1], n = 1<br><strong>输出</strong>：[]</p></blockquote><p><strong>示例三</strong>：</p><blockquote><p><strong>输入</strong>：head = [1,2], n = 1<br><strong>输出</strong>：[1]</p></blockquote><p><strong>提示</strong>：</p><ul><li>链表中结点的数目为<code>sz</code></li><li><code>1 &lt;= sz &lt;= 30</code></li><li><code>0 &lt;= Node.val &lt;= 100</code></li><li><code>1 &lt;= n &lt;= sz</code></li></ul><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/">https://leetcode-cn.com/problems/remove-nth-node-from-end-of-list/</a></li><li><strong>参考题解</strong>：无</li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：双指针</li><li><strong>思路</strong>：<ul><li>1.用快慢指针，起点相隔n，当快指针到终点时，慢指针刚好在倒数第n个结点</li><li>2.由于是删除操作，所以需要目标结点的pre节点(由于链表结构里面没有，需要我们自定义)</li></ul></li><li><strong>步骤</strong>：<ul><li>1.定义一个新的头结点newHead(指向next为head)</li><li>2.定义快慢指针fast、slow</li><li>3.fast先走n+1步(由于我们是要找到目标结点的pre结点，所以+1)</li><li>4.快慢指针同时遍历，直到fast为null</li><li>5.此时slow.next为目标结点，执行删除操作(见代码)</li><li>6.返回第一步定义newHead的next(因为实际是要返回head)</li></ul></li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RemoveNthNodeFromEndOfList</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">ListNode</span> <span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span><span class="token class-name">ListNode</span> head<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//定义head的pre结点(方便输出结果)</span>    <span class="token class-name">ListNode</span> newHead <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    newHead<span class="token punctuation">.</span>next <span class="token operator">=</span> head<span class="token punctuation">;</span>    <span class="token comment">//定义快慢指针</span>    <span class="token class-name">ListNode</span> slow <span class="token operator">=</span> newHead<span class="token punctuation">;</span>    <span class="token class-name">ListNode</span> fast <span class="token operator">=</span> newHead<span class="token punctuation">;</span>    <span class="token comment">//双指针，一个先到达终点，另一个就是倒数第n个结点</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> n<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">//这里是为了下面另一个指向倒数第n个结点前一个结点(方便删除)</span>      fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//当fast到达终点null时，slow到达倒数第n个结点前一个结点</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>fast <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      slow <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">;</span>      fast <span class="token operator">=</span> fast<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//fast指针到终点，slow指针是倒数第n个结点上</span>    <span class="token class-name">ListNode</span> next <span class="token operator">=</span> slow<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">;</span>    slow<span class="token punctuation">.</span>next <span class="token operator">=</span> next<span class="token punctuation">;</span>    <span class="token comment">//返回head</span>    <span class="token keyword">return</span> newHead<span class="token punctuation">.</span>next<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 例子：   *  输入：head = [1,2,3,4,5], n = 2   *  输出：[1,2,3,5]   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">ListNode</span> head <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    head<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next<span class="token punctuation">.</span>next <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ListNode</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">RemoveNthNodeFromEndOfList</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">removeNthFromEnd</span><span class="token punctuation">(</span>head<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：会解法</li><li><strong>备注</strong>：有部分case没通过，需要注意</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 中等难度 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>46. 全排列</title>
      <link href="/2021/12/24/algorithm/%E5%85%A8%E6%8E%92%E5%88%97/"/>
      <url>/2021/12/24/algorithm/%E5%85%A8%E6%8E%92%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="46-全排列"><a href="#46-全排列" class="headerlink" title="46.全排列"></a>46.全排列</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给定一个不含重复数字的数组<code>nums</code>，返回其<strong>所有可能的全排列</strong>。你可以<strong>按任意顺序</strong>返回答案。</p><p><strong>示例一</strong>：</p><blockquote><p><strong>输入</strong>：nums = [1,2,3]<br><strong>输出</strong>：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]</p></blockquote><p><strong>示例二</strong>：</p><blockquote><p><strong>输入</strong>：nums = [0,1]<br><strong>输出</strong>：[[0,1],[1,0]]</p></blockquote><p><strong>示例三</strong>：</p><blockquote><p><strong>输入</strong>：nums = [1]<br><strong>输出</strong>：[[1]]</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>1 &lt;= nums.length &lt;= 6</code></li><li><code>-10 &lt;= nums[i] &lt;= 10</code></li><li><code>nums</code>中的所有整数<strong>互不相同</strong></li></ul><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/permutations/">https://leetcode-cn.com/problems/permutations/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：回溯算法</li><li><strong>步骤</strong>：<ul><li>1.通过变量path记录路径，result记录结果，nums记录选择列表</li><li>2.结束条件：到达决策树底层，无法再做选择的条件(本题是到叶子结点视为结束)</li><li>3.通过做选择和撤销选择实现决策树的回溯</li></ul></li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Permutations</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">permute</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> path <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">backtrack</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 回溯算法   * 结束条件，path.size()=nums.length(到达叶子结点)   * @param path 路径   * @param nums 选择列表   * @param result 结果集   */</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">backtrack</span><span class="token punctuation">(</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> path<span class="token punctuation">,</span>          <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">,</span>          <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result  <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//触发结束的条件</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//这里是path不是result</span>      result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//!!!!这里需要new，否则会动到原数据</span>      <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//去重</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">contains</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token comment">//做选择</span>      path<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//进入下一层决策树</span>      <span class="token function">backtrack</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> nums<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//撤销选择</span>      path<span class="token punctuation">.</span><span class="token function">remove</span><span class="token punctuation">(</span>path<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 例子：   *  输入：nums = [1,2,3]   *  输出：[[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]]   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">Permutations</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">permute</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：难，不熟练</li><li><strong>备注</strong>：经典，需多练</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 中等难度 </tag>
            
            <tag> 回溯算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>56. 合并区间</title>
      <link href="/2021/12/24/algorithm/%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/"/>
      <url>/2021/12/24/algorithm/%E5%90%88%E5%B9%B6%E5%8C%BA%E9%97%B4/</url>
      
        <content type="html"><![CDATA[<h1 id="56-合并区间"><a href="#56-合并区间" class="headerlink" title="56.合并区间"></a>56.合并区间</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>以数组<code>intervals</code>表示若干个区间的集合，其中单个区间为<code>intervals[i] = [starti, endi]</code>。<br>请你合并所有重叠的区间，并返回一个不重叠的区间数组，该数组需恰好覆盖输入中的所有区间。</p><p><strong>示例一</strong>：</p><blockquote><p><strong>输入</strong>：intervals = [[1,3],[2,6],[8,10],[15,18]]<br><strong>输出</strong>：[[1,6],[8,10],[15,18]]<br><strong>解释</strong>：区间 [1,3] 和 [2,6] 重叠, 将它们合并为 [1,6].</p></blockquote><p><strong>示例二</strong>：</p><blockquote><p><strong>输入</strong>：intervals = [[1,4],[4,5]]<br><strong>输出</strong>：[[1,5]]<br><strong>解释</strong>：区间 [1,4] 和 [4,5] 可被视为重叠区间。</p></blockquote><p><strong>提示</strong>：</p><ul><li><code>1 &lt;= intervals.length &lt;= 104</code></li><li><code>intervals[i].length == 2</code></li><li><code>0 &lt;= starti &lt;= endi &lt;= 104</code></li></ul><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/merge-intervals/">https://leetcode-cn.com/problems/merge-intervals/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/merge-intervals/solution/he-bing-qu-jian-by-leetcode-solution/">https://leetcode-cn.com/problems/merge-intervals/solution/he-bing-qu-jian-by-leetcode-solution/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：排序+数组</li><li><strong>思路</strong>：先排序区间，遍历区间数组将重叠部分合到一起</li><li><strong>步骤</strong>：<ul><li>1.根据区间左值排序</li><li>2.遍历判断entry的左值与结果值前面一个pre的右值对比，如果大于则新增add，其他情况则修改pre的右值</li></ul></li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MergeIntervals</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">merge</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intervals<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span>intervals<span class="token punctuation">,</span> <span class="token class-name">Comparator</span><span class="token punctuation">.</span><span class="token function">comparingInt</span><span class="token punctuation">(</span>v <span class="token operator">-></span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">List</span><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token operator">></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> intervals<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//获取区间左右值</span>            <span class="token keyword">int</span> left <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> right <span class="token operator">=</span> intervals<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token comment">//获取前一个区间(第一个不用)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>left<span class="token punctuation">,</span> right<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> pre <span class="token operator">=</span> result<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//前后区间重叠则整合，不重叠则新增</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>left <span class="token operator">></span> pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>left<span class="token punctuation">,</span> right<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//如果重合则修改原区间</span>                pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> pre<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">.</span><span class="token function">toArray</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>result<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 例子：     *  输入：[[1,3],[2,6],[8,10],[15,18]]     *  输出：[[1,6],[8,10],[15,18]]     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> intervals <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span>                <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MergeIntervals</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">merge</span><span class="token punctuation">(</span>intervals<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> i <span class="token operator">:</span> result<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token class-name">Arrays</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：简单看题解后可完成</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 中等难度 </tag>
            
            <tag> 数组 </tag>
            
            <tag> 排序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>5. 最长回文子串</title>
      <link href="/2021/12/23/algorithm/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/"/>
      <url>/2021/12/23/algorithm/%E6%9C%80%E9%95%BF%E5%9B%9E%E6%96%87%E5%AD%90%E4%B8%B2/</url>
      
        <content type="html"><![CDATA[<h1 id="5-最长回文子串"><a href="#5-最长回文子串" class="headerlink" title="5.最长回文子串"></a>5.最长回文子串</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给你一个字符串 <code>s</code>，找到<code>s</code>中最长的回文子串。</p><p><strong>示例一</strong>：</p><blockquote><p><strong>输入</strong>：s = “babad”<br><strong>输出</strong>：”bab”<br><strong>解释</strong>：”aba” 同样是符合题意的答案。</p></blockquote><p><strong>示例二</strong>：</p><blockquote><p><strong>输入</strong>：s = “cbbd”<br><strong>输出</strong>：”bb”</p></blockquote><p><strong>示例三</strong>：</p><blockquote><p><strong>输入</strong>：s = “a”<br><strong>输出</strong>：”a”</p></blockquote><p><strong>示例四</strong>：</p><blockquote><p><strong>输入</strong>：s = “ac”<br><strong>输出</strong>：”a”</p></blockquote><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/">https://leetcode-cn.com/problems/longest-palindromic-substring/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/daily-temperatures/solution/leetcode-tu-jie-739mei-ri-wen-du-by-misterbooo/">https://leetcode-cn.com/problems/daily-temperatures/solution/leetcode-tu-jie-739mei-ri-wen-du-by-misterbooo/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：动态规划</li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LongestPalindromicSubstring</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span><span class="token class-name">String</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//小于2的必是回文</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span><span class="token function">length</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> s<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">char</span><span class="token punctuation">[</span><span class="token punctuation">]</span> cs <span class="token operator">=</span> s<span class="token punctuation">.</span><span class="token function">toCharArray</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//字符串长度</span>        <span class="token keyword">int</span> len <span class="token operator">=</span> cs<span class="token punctuation">.</span>length<span class="token punctuation">;</span>        <span class="token comment">//最长回文子串最长长度</span>        <span class="token keyword">int</span> maxLen <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> maxHead <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token comment">//遍历存放是否回文子串状态</span>        <span class="token keyword">boolean</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">]</span> dp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">boolean</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">[</span>len<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//只有一个字符必是回文串，先初始化</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//遍历其他</span>        <span class="token comment">//i是开始，j是结束</span>        <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span>len<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">--</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> j<span class="token operator">=</span>i<span class="token punctuation">;</span>j<span class="token operator">&lt;</span>len<span class="token punctuation">;</span>j<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token comment">//这里注意是=i，而不是=0</span>                <span class="token comment">//如果j比i大，那么是非法的</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">&lt;</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">break</span><span class="token punctuation">;</span><span class="token comment">//只是跳出内层for，以后内层后面的也都是一样结果</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//如果当前头尾相等，则取里面的值</span>                <span class="token comment">//比如bcacb是回文，那么cac、a也是回文</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>cs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>cs<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token comment">//前提是3位及以上，因为单个就肯定是回文</span>                    <span class="token comment">//同时如果是两位的话就不需要往内取了</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">&lt;=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span><span class="token keyword">else</span><span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">false</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token comment">//如果是true则判断max</span>                <span class="token keyword">if</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">true</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                    <span class="token keyword">int</span> curLen <span class="token operator">=</span> j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">;</span>                    <span class="token keyword">if</span><span class="token punctuation">(</span>curLen<span class="token operator">></span>maxLen<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>                        maxLen <span class="token operator">=</span> curLen<span class="token punctuation">;</span>                        maxHead <span class="token operator">=</span> i<span class="token punctuation">;</span>                    <span class="token punctuation">&#125;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//这里需要注意substring是(beginIndex,endIndex)</span>        <span class="token keyword">return</span> s<span class="token punctuation">.</span><span class="token function">substring</span><span class="token punctuation">(</span>maxHead<span class="token punctuation">,</span>maxLen<span class="token operator">+</span>maxHead<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 例子：     *  输入：[73,74,75,71,69,72,76,73]     *  输出：[1,1,4,2,1,1,0,0]     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">String</span> s <span class="token operator">=</span> <span class="token string">"babad"</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LongestPalindromicSubstring</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">longestPalindrome</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：简单看题解后可完成</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 中等难度 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>300. 最长递增子序列</title>
      <link href="/2021/12/23/algorithm/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/"/>
      <url>/2021/12/23/algorithm/%E6%9C%80%E9%95%BF%E9%80%92%E5%A2%9E%E5%AD%90%E5%BA%8F%E5%88%97/</url>
      
        <content type="html"><![CDATA[<h1 id="300-最长递增子序列"><a href="#300-最长递增子序列" class="headerlink" title="300.最长递增子序列"></a>300.最长递增子序列</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给你一个整数数组<code>nums</code>，找到其中最长严格递增子序列的长度。</p><p>子序列是由数组派生而来的序列，删除（或不删除）数组中的元素而不改变其余元素的顺序。例如，<code>[3,6,2,7]</code> 是数组 <code>[0,3,1,6,2,2,7]</code> 的子序列。</p><p><strong>示例一</strong>：</p><blockquote><p><strong>输入</strong>：nums = [10,9,2,5,3,7,101,18]<br><strong>输出</strong>：4<br><strong>解释</strong>：最长递增子序列是 [2,3,7,101]，因此长度为 4 。</p></blockquote><p><strong>示例二</strong>：</p><blockquote><p><strong>输入</strong>：nums = [0,1,0,3,2,3]<br><strong>输出</strong>：4</p></blockquote><p><strong>示例三</strong>：</p><blockquote><p><strong>输入</strong>：nums = [7,7,7,7,7,7,7]<br><strong>输出</strong>：1</p></blockquote><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/">https://leetcode-cn.com/problems/longest-increasing-subsequence/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/">https://leetcode-cn.com/problems/longest-increasing-subsequence/solution/zui-chang-shang-sheng-zi-xu-lie-by-leetcode-soluti/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：动态规划+回溯算法</li><li><strong>思路</strong>：遍历数组从左到右，用dp[]数组存储截止当前位置的max值</li><li><strong>步骤</strong>：<ul><li> 1.遍历数组，判断当前数和之前数大小</li><li> 2.如果之前数没有比当前数大的，则当前位置dp[i]=1(代表最长子序列长度为1)</li><li> 3.如果之前数有比当前数大的，就判断之前数dp[i]=Math.max(dp[pre],dp[i])</li><li> 4.每遍历一次数组，就更新max=Math.max(max,dp[i])</li><li> 5.返回max</li></ul></li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">LongestIncreasingSubsequence</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">lengthOfLIS</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//遍历数组，用dp数组存截止某个位置的最长递增子序列长度即可</span>        <span class="token keyword">int</span> dp<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token comment">//结果(最长递增子序列)</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//判断前面是否有比当前数小的递增子序列</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> i<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">//如果之前数比当前数小，说明加上当前数是一个递增子序列，记录大小</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//加上当前位置</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 例子：     *  输入：nums = [10,9,2,5,3,7,101,18]     *  输出：4     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">LongestIncreasingSubsequence</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">lengthOfLIS</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：简单看题解会思路即可做(可以再重做)</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 中等难度 </tag>
            
            <tag> 回溯算法 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>198. 打家劫舍</title>
      <link href="/2021/12/22/algorithm/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/"/>
      <url>/2021/12/22/algorithm/%E6%89%93%E5%AE%B6%E5%8A%AB%E8%88%8D/</url>
      
        <content type="html"><![CDATA[<h1 id="198-打家劫舍"><a href="#198-打家劫舍" class="headerlink" title="198.打家劫舍"></a>198.打家劫舍</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你<strong>不触动警报装置的情况下</strong>，一夜之内能够偷窃到的最高金额。</p><p><strong>示例一</strong>：</p><blockquote><p><strong>输入</strong>：[1,2,3,1]<br><strong>输出</strong>：4<br><strong>解释</strong>：偷窃 1 号房屋 (金额 = 1) ，然后偷窃 3 号房屋 (金额 = 3)。<br>偷窃到的最高金额 = 1 + 3 = 4 。</p></blockquote><p><strong>示例二</strong>：</p><blockquote><p><strong>输入</strong>：[2,7,9,3,1]<br><strong>输出</strong>：12<br><strong>解释</strong>：偷窃 1 号房屋 (金额 = 2), 偷窃 3 号房屋 (金额 = 9)，接着偷窃 5 号房屋 (金额 = 1)。<br>偷窃到的最高金额 = 2 + 9 + 1 = 12 。</p></blockquote><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/house-robber/">https://leetcode-cn.com/problems/house-robber/</a></li><li><strong>参考题解</strong>：无</li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：动态规划</li><li><strong>思路</strong>：遍历数组每一步存当前最大值即可</li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HouseRobber</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">rob</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//应该是截止最大值</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>nums<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> cur <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> max <span class="token operator">=</span> cur<span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> nums<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                cur <span class="token operator">=</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>                cur <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> result<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">//注意这两步不能颠倒(不然比如2,0,0,2就会有问题)</span>            max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>max<span class="token punctuation">,</span> cur<span class="token punctuation">)</span><span class="token punctuation">;</span>            result<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> max<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> max<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 例子：     *  输入：[1,2,3,1]     *  输出：4     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> nums <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">HouseRobber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">rob</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：简单</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 中等难度 </tag>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>739. 每日温度</title>
      <link href="/2021/12/22/algorithm/%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/"/>
      <url>/2021/12/22/algorithm/%E6%AF%8F%E6%97%A5%E6%B8%A9%E5%BA%A6/</url>
      
        <content type="html"><![CDATA[<h1 id="739-每日温度"><a href="#739-每日温度" class="headerlink" title="739.每日温度"></a>739.每日温度</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>请根据每日 气温 列表 temperatures ，请计算在每一天需要等几天才会有更高的温度。如果气温在这之后都不会升高，请在该位置用 0 来代替。</p><p><strong>示例一</strong>：</p><blockquote><p>输入: temperatures = [73,74,75,71,69,72,76,73]<br>输出: [1,1,4,2,1,1,0,0]</p></blockquote><p><strong>示例二</strong>：</p><blockquote><p>输入: temperatures = [30,40,50,60]<br>输出: [1,1,1,0]</p></blockquote><p><strong>示例三</strong>：</p><blockquote><p>输入: temperatures = [30,60,90]<br>输出: [1,1,0]</p></blockquote><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/daily-temperatures/">https://leetcode-cn.com/problems/daily-temperatures/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/daily-temperatures/solution/leetcode-tu-jie-739mei-ri-wen-du-by-misterbooo/">https://leetcode-cn.com/problems/daily-temperatures/solution/leetcode-tu-jie-739mei-ri-wen-du-by-misterbooo/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：单调栈</li><li><strong>思路</strong>：将每一天的温度(存下标)压入栈，后面压入的时候把前面低于的取出来计算天数(保证栈底到栈顶是递增的)</li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DailyTemperatures</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">dailyTemperatures</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temperatures<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//可以参考左视图，如果一个温度把之前的温度的盖住了，说明比他高，就可以赋值了，并移除状态</span>    <span class="token comment">//存下标吧，存value有问题</span>    <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> stack <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Stack</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//初始化个结果吧，默认值是0(不要直接操作原数组，会多一个for操作)</span>    <span class="token keyword">int</span> result<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span>temperatures<span class="token punctuation">.</span>length<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>temperatures<span class="token punctuation">.</span>length<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token comment">//当栈不为空时，从上取比当前数小的取出并设置result</span>      <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">!</span>stack<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;&amp;</span>temperatures<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">></span>temperatures<span class="token punctuation">[</span>stack<span class="token punctuation">.</span><span class="token function">peek</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token comment">//计算相隔天数并写入result</span>        <span class="token keyword">int</span> index <span class="token operator">=</span> stack<span class="token punctuation">.</span><span class="token function">pop</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        result<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> i <span class="token operator">-</span> index<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      stack<span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 例子：   *  输入：[73,74,75,71,69,72,76,73]   *  输出：[1,1,4,2,1,1,0,0]   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> nums<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">73</span><span class="token punctuation">,</span><span class="token number">74</span><span class="token punctuation">,</span><span class="token number">75</span><span class="token punctuation">,</span><span class="token number">71</span><span class="token punctuation">,</span><span class="token number">69</span><span class="token punctuation">,</span><span class="token number">72</span><span class="token punctuation">,</span><span class="token number">76</span><span class="token punctuation">,</span><span class="token number">73</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> result<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DailyTemperatures</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dailyTemperatures</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">:</span>result<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：简单看题解后可完成</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 中等难度 </tag>
            
            <tag> 单调栈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>11. 盛最多水的容器</title>
      <link href="/2021/12/22/algorithm/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/"/>
      <url>/2021/12/22/algorithm/%E7%9B%9B%E6%9C%80%E5%A4%9A%E6%B0%B4%E7%9A%84%E5%AE%B9%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h1 id="11-盛最多水的容器"><a href="#11-盛最多水的容器" class="headerlink" title="11.盛最多水的容器"></a>11.盛最多水的容器</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给你 n 个非负整数 a1，a2，…，an，每个数代表坐标中的一个点(i,ai) 。在坐标内画 n 条垂直线，垂直线 i的两个端点分别为(i,ai) 和 (i, 0) 。找出其中的两条线，使得它们与x轴共同构成的容器可以容纳最多的水。</p><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/container-with-most-water/">https://leetcode-cn.com/problems/container-with-most-water/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/">https://leetcode-cn.com/problems/container-with-most-water/solution/sheng-zui-duo-shui-de-rong-qi-by-leetcode-solution/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：双指针</li><li><strong>思路</strong>： 遍历数组得到所有情况(这里通过双指针可减少遍历)，得到最大值</li><li><strong>步骤</strong>：<ul><li>1.定义头尾的双指针</li><li>2.开始往中间遍历(直到重合)，小的往大的推进</li></ul></li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ContainerWithMosWater</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 左右指针   * 一个从头一个从尾，哪个比较小就移动(每次移动都判断当前是否最大值)   *  1.定义头尾的双指针   *  2.开始往中间遍历(直到重合)，小的往大的推进*   * @param height   * @return   */</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">maxArea</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> height<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">.</span>length <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> max <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//结果值(最大值)</span>    <span class="token keyword">int</span> left <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//左指针</span>    <span class="token keyword">int</span> right <span class="token operator">=</span> height<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//右指针</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>left <span class="token operator">&lt;</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token comment">//判断当前能装多少水</span>      <span class="token keyword">int</span> cur <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">//以最大值为目标，小的就往大的靠拢</span>      <span class="token keyword">if</span> <span class="token punctuation">(</span>height<span class="token punctuation">[</span>left<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cur <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">*</span> height<span class="token punctuation">[</span>left<span class="token punctuation">]</span><span class="token punctuation">;</span>        left<span class="token operator">++</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        cur <span class="token operator">=</span> <span class="token punctuation">(</span>right <span class="token operator">-</span> left<span class="token punctuation">)</span> <span class="token operator">*</span> height<span class="token punctuation">[</span>right<span class="token punctuation">]</span><span class="token punctuation">;</span>        right<span class="token operator">--</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      max <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span> max<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> max<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：简单看题解后可完成</li><li><strong>备注</strong>：一开始不清楚有这种解法，后面看到可以这么解就会了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 中等难度 </tag>
            
            <tag> 双指针 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>105. 从前序与中序遍历序列构造二叉树</title>
      <link href="/2021/12/22/algorithm/%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>/2021/12/22/algorithm/%E4%BB%8E%E5%89%8D%E5%BA%8F%E4%B8%8E%E4%B8%AD%E5%BA%8F%E9%81%8D%E5%8E%86%E5%BA%8F%E5%88%97%E6%9E%84%E9%80%A0%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h1 id="105-从前序与中序遍历序列构造二叉树"><a href="#105-从前序与中序遍历序列构造二叉树" class="headerlink" title="105.从前序与中序遍历序列构造二叉树"></a>105.从前序与中序遍历序列构造二叉树</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给定一棵树的前序遍历 preorder 与中序遍历  inorder。请构造二叉树并返回其根节点。</p><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/">https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/cong-qian-xu-yu-zhong-xu-bian-li-xu-lie-gou-zao-9/">https://leetcode-cn.com/problems/construct-binary-tree-from-preorder-and-inorder-traversal/solution/cong-qian-xu-yu-zhong-xu-bian-li-xu-lie-gou-zao-9/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：递归+深度优先算法</li><li><strong>思路</strong>： <ul><li>1.遍历构建左右子树</li><li>2.先序遍历的第一个结点必是头结点，第二个结点是左子树头结点(如有，递归的前提1)</li><li>3.中序遍历头结点在中间，左边是左子树，右边是右子树(遍历的前提2)</li></ul></li><li><strong>步骤</strong>：<ul><li>1.获取先序遍历第一个结点(即树头结点head)</li><li>2.根据head去中序遍历找到下标inIndex</li><li>3.根据inIndex去计算左右子树的范围(各自的左右下标)</li><li>4.根据第3步计算的左右子树长度去先序遍历找到左右子树</li><li>5.遍历1234</li></ul></li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ConstructBinaryTreeFromPreorderAndInorderTraversal</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//用户存中序遍历每个数的下标</span>  <span class="token keyword">private</span> <span class="token class-name">Map</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">,</span> <span class="token class-name">Integer</span><span class="token punctuation">></span></span> map <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">HashMap</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">/**   * @param preorder 先序遍历   * @param inorder 中序遍历   * @return 树   */</span>  <span class="token keyword">public</span> <span class="token class-name">TreeNode</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> inorder<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//也可以用indexOf找到，用哈希表其实是空间换时间的思路</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> inorder<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>inorder<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> preorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> inorder<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//理论上先序和后续</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   *   * @param preorder 先序遍历   * @param preLeft 当前结点的左子树左下标   * @param preRight 当前结点的左子树右下标   * @param inLeft 当前结点的右子树左下标   * @param inRight 当前结点的右子树右下标   * @return   */</span>  <span class="token keyword">private</span> <span class="token class-name">TreeNode</span> <span class="token function">buildTree</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> preorder<span class="token punctuation">,</span> <span class="token keyword">int</span> preLeft<span class="token punctuation">,</span> <span class="token keyword">int</span> preRight<span class="token punctuation">,</span> <span class="token keyword">int</span> inLeft<span class="token punctuation">,</span> <span class="token keyword">int</span> inRight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//最多等于的时候说明左/右子树只有一个结点</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>preLeft <span class="token operator">></span> preRight<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//先序遍历第一位就是头结点,获得其值</span>    <span class="token keyword">int</span> head <span class="token operator">=</span> preorder<span class="token punctuation">[</span>preLeft<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">TreeNode</span> treeNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//中序遍历的头结点下标</span>    <span class="token keyword">int</span> inIndex <span class="token operator">=</span> map<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span>head<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//递归左子树</span>    treeNode<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> preLeft <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inIndex <span class="token operator">-</span> inLeft <span class="token operator">+</span> preLeft<span class="token punctuation">,</span> inLeft<span class="token punctuation">,</span> inIndex <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//递归右子树</span>    treeNode<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inIndex <span class="token operator">-</span> inLeft <span class="token operator">+</span> preLeft <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> preRight<span class="token punctuation">,</span> inIndex <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> inRight<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> treeNode<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 例子：   *  输入：[3,9,20,15,7]   *  输出：[9,3,15,20,7]   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> preorder<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> inorder<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token comment">//不做打印要求，可debug看树结构</span>    <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ConstructBinaryTreeFromPreorderAndInorderTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">buildTree</span><span class="token punctuation">(</span>preorder<span class="token punctuation">,</span> inorder<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：没思路，看了很久题解才勉强会做</li><li><strong>备注</strong>：解题思路比较经典，需要反复学习</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 中等难度 </tag>
            
            <tag> 深度优先搜索 </tag>
            
            <tag> 分治算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>102.二叉树的层级遍历</title>
      <link href="/2021/12/21/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E7%BA%A7%E9%81%8D%E5%8E%86/"/>
      <url>/2021/12/21/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E7%BA%A7%E9%81%8D%E5%8E%86/</url>
      
        <content type="html"><![CDATA[<h1 id="102-二叉树的层级遍历"><a href="#102-二叉树的层级遍历" class="headerlink" title="102.二叉树的层级遍历"></a>102.二叉树的层级遍历</h1><h2 id="一、题目"><a href="#一、题目" class="headerlink" title="一、题目"></a>一、题目</h2><p>给你一个二叉树，请你返回其按 层序遍历 得到的节点值。 （即逐层地，从左到右访问所有节点）。</p><h2 id="二、相关链接"><a href="#二、相关链接" class="headerlink" title="二、相关链接"></a>二、相关链接</h2><ul><li><strong>题目链接</strong>：<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/">https://leetcode-cn.com/problems/binary-tree-level-order-traversal/</a></li><li><strong>参考题解</strong>：<a href="https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/er-cha-shu-de-ceng-xu-bian-li-by-leetcode-solution/">https://leetcode-cn.com/problems/binary-tree-level-order-traversal/solution/er-cha-shu-de-ceng-xu-bian-li-by-leetcode-solution/</a></li></ul><h2 id="三、解题思路"><a href="#三、解题思路" class="headerlink" title="三、解题思路"></a>三、解题思路</h2><ul><li><strong>解法</strong>：广度优先搜索</li><li><strong>思路</strong>： <ul><li>1.先把第一层的结点放到队列<code>queue</code>中</li><li>2.依次取出并存到结果集<code>result</code>中</li><li>3.把2中取出结点的左右结点放入队列<code>queue</code>中</li><li>4.重复123直到<code>queue</code>为空</li></ul></li></ul><h2 id="四、代码"><a href="#四、代码" class="headerlink" title="四、代码"></a>四、代码</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">BinaryTreeLevelOrderTraversal</span> <span class="token punctuation">&#123;</span>    <span class="token comment">/**     * 解法：广度优先搜索     *     * @param root     * @return     */</span>    <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> <span class="token function">levelOrder</span><span class="token punctuation">(</span><span class="token class-name">TreeNode</span> root<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">List</span><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span><span class="token punctuation">></span></span> result <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>root <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> result<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//定义队列，使每次都取同一层的出来(见下面ps1)</span>        <span class="token class-name">Queue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TreeNode</span><span class="token punctuation">></span></span> queue <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">LinkedList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//每次while遍历时queue都是新的一层</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>queue<span class="token punctuation">.</span><span class="token function">isEmpty</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//存放全一层的node</span>            <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">Integer</span><span class="token punctuation">></span></span> level <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//需要单独声明，不然queue size会变化</span>            <span class="token keyword">int</span> size <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">//ps1 当前while循环只取当前层数的，然后存下一层的</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> size<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token class-name">TreeNode</span> node <span class="token operator">=</span> queue<span class="token punctuation">.</span><span class="token function">poll</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                level<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>val<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>left <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token punctuation">.</span>right <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    queue<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>node<span class="token punctuation">.</span>right<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            result<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>level<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> result<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">TreeNode</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span> val<span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span> left<span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span> right<span class="token punctuation">;</span>        <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span> <span class="token punctuation">&#125;</span>        <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token keyword">int</span> val<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> left<span class="token punctuation">,</span> <span class="token class-name">TreeNode</span> right<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>val <span class="token operator">=</span> val<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>left <span class="token operator">=</span> left<span class="token punctuation">;</span>            <span class="token keyword">this</span><span class="token punctuation">.</span>right <span class="token operator">=</span> right<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 例子：     *  输入：[3,9,20,null,null,15,7]     *  输出：[     [3],     [9,20],     [15,7]     ]     */</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">TreeNode</span> treeNode <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeNode<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeNode<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeNode<span class="token punctuation">.</span>right<span class="token punctuation">.</span>left <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        treeNode<span class="token punctuation">.</span>right<span class="token punctuation">.</span>right <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">TreeNode</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">BinaryTreeLevelOrderTraversal</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">levelOrder</span><span class="token punctuation">(</span>treeNode<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、总结"><a href="#五、总结" class="headerlink" title="五、总结"></a>五、总结</h2><ul><li><strong>难度</strong>：简单看题解后可完成</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> LeetCode </tag>
            
            <tag> 中等难度 </tag>
            
            <tag> 广度优先搜索 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式：单例模式</title>
      <link href="/2021/12/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>/2021/12/12/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%EF%BC%9A%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式：单例模式"><a href="#设计模式：单例模式" class="headerlink" title="设计模式：单例模式"></a>设计模式：单例模式</h1><h2 id="一、定义"><a href="#一、定义" class="headerlink" title="一、定义"></a>一、定义</h2><p><strong>单例模式</strong>：一个类只允许创建一个对象(或者叫实例)，那么这个类就是一个单例类，这种设计模式就叫作<code>单例设计模式</code></p><h2 id="二、实现-例子：ID生成器"><a href="#二、实现-例子：ID生成器" class="headerlink" title="二、实现(例子：ID生成器)"></a>二、实现(例子：ID生成器)</h2><h3 id="饿汉式"><a href="#饿汉式" class="headerlink" title="饿汉式"></a>饿汉式</h3><ul><li><strong>定义</strong>：通过静态变量在类加载的时候就创建并初始化好instance</li><li><strong>优点</strong>：线程安全(类加载初始化)</li><li><strong>缺点</strong>：不支持延迟加载(需要使用时才初始化)</li><li><strong>总结</strong>：如果初始化耗时长，推荐在程序启动的时候会就初始化好(而不是在使用时才初始化，会影响性能)，同时程序启动的时候还能暴露出资源可能不够的错误(而不是在使用时才报错，会影响系统可用性)</li><li><strong>代码示例</strong>：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdGenerator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicLong</span> id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//静态实例创建并初始化好</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">IdGenerator</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IdGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//private的构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">IdGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//public的get方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IdGenerator</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="懒汉式"><a href="#懒汉式" class="headerlink" title="懒汉式"></a>懒汉式</h3><ul><li><strong>定义</strong>：在需要使用的时候才初始化</li><li><strong>优点</strong>：支持延迟加载(需要使用时才初始化)</li><li><strong>缺点</strong>：<code>getInstance()</code>方法加了<code>synchronized</code>关键字，导致这个函数的病发度很低(不适合频繁调用的场景)</li><li><strong>总结</strong>：可以延迟加载，但如果频繁调用，会导致性能瓶颈</li><li><strong>代码示例</strong>：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdGenerator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicLong</span> id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//静态实例只声明不初始化</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">IdGenerator</span> instance<span class="token punctuation">;</span>    <span class="token comment">//private的构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">IdGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token comment">//public的get方法</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">synchronized</span> <span class="token class-name">IdGenerator</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IdGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="双重检测"><a href="#双重检测" class="headerlink" title="双重检测"></a>双重检测</h3><ul><li><strong>定义</strong>：相比<code>懒汉式</code>，<code>instance</code>不为空的时候将不再会加锁(而是初始化的时候才会加锁)</li><li><strong>优点</strong>：<code>instance</code>为null的时候才会加锁(初始化)</li><li><strong>缺点</strong>：可能由于<code>指令重排序</code>导致new完<code>IdGenerator</code>之后，赋值给<code>instance</code>之后还没来得及初始化(new了但还没执行构造函数代码，这时候其他线程拿到的instance就不是null了)</li><li><strong>总结</strong>：判断<code>instance</code>为空才加锁，同时还可以给<code>instance</code>加<code>volatile</code>关键字(防止<code>指令重排序</code>)</li><li><strong>代码示例</strong>：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdGenerator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicLong</span> id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//静态实例只声明不初始化</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">IdGenerator</span> instance<span class="token punctuation">;</span>    <span class="token comment">//private的构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">IdGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IdGenerator</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">//instance不为空才加锁</span>            <span class="token keyword">synchronized</span> <span class="token punctuation">(</span><span class="token class-name">IdGenerator</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IdGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="静态内部类"><a href="#静态内部类" class="headerlink" title="静态内部类"></a>静态内部类</h3><ul><li><strong>定义</strong>：利用Java的静态内部类，类似饿汉式的同时，又能做到延迟加载</li><li><strong>原理</strong>：初始化<code>IdGenerator</code>的时候并不会创建<code>SingletonHolder</code>（只会等调用<code>getInstance()</code>方法才会加载<code>SingletonHolder</code>并创建<code>instance</code>）。保证<code>instance</code>的唯一性、保证创建过程的线程安全性(JVM实现)</li><li><strong>优点</strong>：既保证了线程安全，又能做到延迟加载</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">IdGenerator</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicLong</span> id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//private的构造方法</span>    <span class="token keyword">private</span> <span class="token class-name">IdGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span>        <span class="token comment">//静态内部类</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">SingletonHolder</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">IdGenerator</span> instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">IdGenerator</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">IdGenerator</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">SingletonHolder</span><span class="token punctuation">.</span>instance<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> id<span class="token punctuation">.</span><span class="token function">incrementAndGet</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="枚举"><a href="#枚举" class="headerlink" title="枚举"></a>枚举</h3><ul><li><strong>定义</strong>：基于枚举类型的单例实现(通过Java枚举类型本身的特性)</li><li><strong>优点</strong>：简单，保证了实例创建的线程安全性和实例的唯一性</li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">enum</span> <span class="token class-name">IdGenertor</span> <span class="token punctuation">&#123;</span>    INSTANCE<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">AtomicLong</span> id <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">AtomicLong</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">getId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>            <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、单例存在哪些问题？"><a href="#三、单例存在哪些问题？" class="headerlink" title="三、单例存在哪些问题？"></a>三、单例存在哪些问题？</h2><ul><li><p>单例对OOP特性的支持不友好</p><ul><li>违背<code>抽象</code>特性（因为直接获取了单例对象，而不是面向接口编程）</li><li>对<code>继承</code>、<code>多态</code>特性的支持不友好</li></ul></li><li><p>单例会隐藏类之间的依赖关系</p><ul><li><strong>单例类</strong>：无需显示创建、无需依赖参数传递</li><li><strong>非单例类</strong>：可通过构造函数、参数传递等方式看出类之间的依赖</li></ul></li><li><p>单例对代码的扩展性不友好</p><ul><li><strong>背景</strong>：单例类只能有一个对象实例</li><li><strong>问题</strong>：如果有场景需要创建多个实例，那么对代码会有较大改动</li><li><strong>场景</strong>：数据库连接池、线程池等资源池（可能要分开处理）</li><li><strong>总结</strong>：单例类在某些场景下会影响代码的扩展性、灵活性</li></ul></li><li><p>单例对代码的可测试性不友好</p><ul><li>可能依赖比较重的外部资源（如DB），导致写单测的时候无法通过mock方式替换掉</li><li>单例类的成员变量（如IdGenerator的id变量）相当于全局变量，测试时可能会收到其他地方的修改</li></ul></li><li><p>单例不支持有参数的构造函数</p><ul><li><p><strong>例子</strong>：比如创建一个连接池的单例对象，就无法通过参数来指定连接池的大小</p></li><li><p><strong>解决方案</strong>：</p><ul><li><p>1.通过init函数去初始化单例对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">//自定义参数A</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> paramA<span class="token punctuation">;</span>  <span class="token comment">//自定义参数B</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> paramB<span class="token punctuation">;</span>  <span class="token comment">//带参构造函数</span>  <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token keyword">int</span> paramA<span class="token punctuation">,</span> <span class="token keyword">int</span> paramB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>paramA <span class="token operator">=</span> paramA<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>paramB <span class="token operator">=</span> paramB<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//实例外部get方法</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"run init() first"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//初始化函数(带参数)</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> init <span class="token punctuation">(</span><span class="token keyword">int</span> paramA<span class="token punctuation">,</span> <span class="token keyword">int</span> paramB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">!=</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"duplicate init"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span>paramA<span class="token punctuation">,</span> paramB<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//调用例子</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//先init</span>    <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//再使用</span>    <span class="token class-name">Singleton</span> singleton <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2.参数放到getInstance()方法(问题：多次调用后续传的参数无效，只取初始化的参数使用)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token comment">//自定义参数A</span>    <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> paramA<span class="token punctuation">;</span>  <span class="token comment">//自定义参数B</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> paramB<span class="token punctuation">;</span>    <span class="token comment">//有参构造函数</span>  <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token keyword">int</span> paramA<span class="token punctuation">,</span> <span class="token keyword">int</span> paramB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>paramA <span class="token operator">=</span> paramA<span class="token punctuation">;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>paramB <span class="token operator">=</span> paramB<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//带参数的外部get方法</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token keyword">int</span> paramA<span class="token punctuation">,</span> <span class="token keyword">int</span> paramB<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">if</span><span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>          instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Sinleton</span><span class="token punctuation">(</span>paramA<span class="token punctuation">,</span> paramB<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//初始化</span>    <span class="token class-name">Singleton</span> singleton <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">//无效，Singleton只初始化一次(10,20)，所以singleton2取出还是(10,20)</span>    <span class="token class-name">Singleton</span> singleton2 <span class="token operator">=</span> <span class="token class-name">Singleton</span><span class="token punctuation">.</span><span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>3.(推荐使用)将参数放在配置文件(全局变量)中，在类实例化时加载</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Config</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PARAM_A <span class="token operator">=</span> <span class="token number">10</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> PARAM_B <span class="token operator">=</span> <span class="token number">20</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Singleton</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> instance <span class="token operator">=</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> paramA<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">final</span> <span class="token keyword">int</span> paramB<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>paramA <span class="token operator">=</span> <span class="token class-name">Config</span><span class="token punctuation">.</span>PARAM_A<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>paramB <span class="token operator">=</span> <span class="token class-name">Config</span><span class="token punctuation">.</span>PARAM_B<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">synchronized</span> <span class="token keyword">static</span> <span class="token class-name">Singleton</span> <span class="token function">getInstance</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>instance <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      instance <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> instance<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul></li></ul><h3 id="四、单例有什么替代解决方案？"><a href="#四、单例有什么替代解决方案？" class="headerlink" title="四、单例有什么替代解决方案？"></a>四、单例有什么替代解决方案？</h3><ul><li>使用工厂模式</li><li>使用IOC容器</li><li>…</li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 单例模式 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 单例模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式之美学习笔记</title>
      <link href="/2021/12/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/12/11/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F%E4%B9%8B%E7%BE%8E%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="设计模式之美学习笔记"><a href="#设计模式之美学习笔记" class="headerlink" title="设计模式之美学习笔记"></a>设计模式之美学习笔记</h1><h2 id="设计原则与思想：面向对象"><a href="#设计原则与思想：面向对象" class="headerlink" title="设计原则与思想：面向对象"></a>设计原则与思想：面向对象</h2><ul><li><a href="https://garyleeeee.github.io/2021/11/13/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/">跳转查看《设计原则与思想：面向对象》学习笔记</a></li></ul><h2 id="设计原则与思想：设计原则"><a href="#设计原则与思想：设计原则" class="headerlink" title="设计原则与思想：设计原则"></a>设计原则与思想：设计原则</h2><ul><li><a href="https://garyleeeee.github.io/2021/11/26/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/">跳转查看《设计原则与思想：设计原则》学习笔记</a></li></ul><h2 id="设计原则与思想：规范与重构"><a href="#设计原则与思想：规范与重构" class="headerlink" title="设计原则与思想：规范与重构"></a>设计原则与思想：规范与重构</h2><ul><li><a href="https://garyleeeee.github.io/2021/12/03/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E8%A7%84%E8%8C%83%E4%B8%8E%E9%87%8D%E6%9E%84/">跳转查看《设计原则与思想：规范与重构》学习笔记</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式，设计模式之美 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
            <tag> 设计模式之美 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>快速改善代码质量的20条编程规范</title>
      <link href="/2021/12/06/%E5%BF%AB%E9%80%9F%E6%94%B9%E5%96%84%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E7%9A%8420%E6%9D%A1%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/"/>
      <url>/2021/12/06/%E5%BF%AB%E9%80%9F%E6%94%B9%E5%96%84%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E7%9A%8420%E6%9D%A1%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/</url>
      
        <content type="html"><![CDATA[<h1 id="快速改善代码质量的20条编程规范"><a href="#快速改善代码质量的20条编程规范" class="headerlink" title="快速改善代码质量的20条编程规范"></a>快速改善代码质量的20条编程规范</h1><h2 id="1-关于命名"><a href="#1-关于命名" class="headerlink" title="1.关于命名"></a>1.关于命名</h2><ul><li>命名的关键是能准确达意（不要刻意选择一些缩写命名 不好理解）</li><li>借助类的信息来简化属性、函数命名<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//优化前</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userName<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> userPassword<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> userAge<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//优化后</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>命名要可读、可搜索<ul><li>比如查询方法统一用<code>getxxx()</code>方便输入.get的时候联想搜索</li><li>统一规范，比如统一用<code>addxxx()</code>而不是<code>insertxxx()</code>来表示插入一条数据</li></ul></li><li>接口和抽象类特殊命名<ul><li><strong>接口</strong>：一种是在接口中带前缀”I”，另一种是在接口的实现类中带后缀”Impl”</li><li><strong>抽象类</strong>：可以加上”abstract”前缀<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//接口命名1</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">IUserService</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token keyword">implements</span> <span class="token class-name">IUserService</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token comment">//接口命名2</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="2-关于注释"><a href="#2-关于注释" class="headerlink" title="2.关于注释"></a>2.关于注释</h2><ul><li>注释需要写什么内容？<ul><li>做什么</li><li>为什么</li><li>怎么做</li><li>如何用(针对较复杂的类和接口)</li></ul></li><li>注释是不是越多越好？<ul><li>注释太多，会影响代码的阅读</li><li>注释太多，会影响后期的维护成本（改代码需要同步修改注释，否则会对不上）</li></ul></li><li>哪里写注释比较好？<ul><li>类和函数一定要写注释（尽可能全面、详细）</li><li>函数内部注释相对少一点（依赖好的命名、提炼函数等提高代码可读性）</li></ul></li></ul><h2 id="3-函数、类多大才合适？"><a href="#3-函数、类多大才合适？" class="headerlink" title="3.函数、类多大才合适？"></a>3.函数、类多大才合适？</h2><ul><li><strong>尽量</strong>不要超过一个屏幕大小</li></ul><h2 id="4-一行代码多长最合适？"><a href="#4-一行代码多长最合适？" class="headerlink" title="4.一行代码多长最合适？"></a>4.一行代码多长最合适？</h2><ul><li><strong>尽量</strong>不要超过IDE显示的宽度(否则得左右拉不方便看)</li><li>也不要太短，不然一句代码容易被拆成多长，也不利于阅读(也不整洁)</li></ul><h2 id="5-善用空行分割单元块"><a href="#5-善用空行分割单元块" class="headerlink" title="5.善用空行分割单元块"></a>5.善用空行分割单元块</h2><ul><li>长函数里不同独立逻辑的代码块可以用空行分割(简洁、清晰，方便阅读也方便后续维护)</li><li>其他场景也可加空行分割<ul><li>类的成员变量和函数之间</li><li>类的静态成员变量和普通成员变量之间</li><li>类的各函数之间</li><li>类的各个成员变量之间<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> <span class="token class-name">UserMapper</span> userMapper<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> <span class="token class-name">NoticeService</span> noticeService<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//获取用户信息</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> userMapper<span class="token punctuation">.</span><span class="token function">selectById</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>user <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token boolean">false</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//登陆成功下发消息</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> noticeService<span class="token punctuation">.</span><span class="token function">sendLoginSuccess</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> result<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="6-四格缩进还是两格缩进？"><a href="#6-四格缩进还是两格缩进？" class="headerlink" title="6.四格缩进还是两格缩进？"></a>6.四格缩进还是两格缩进？</h2><ul><li><strong>推荐</strong>用两格缩进(节省空间，Java倾向于两格)</li><li>取决个人喜好/团队统一即可</li></ul><h2 id="7-大括号是否要另起一行？"><a href="#7-大括号是否要另起一行？" class="headerlink" title="7.大括号是否要另起一行？"></a>7.大括号是否要另起一行？</h2><ul><li><strong>不另起一行</strong>：节省代码行数(<strong>推荐</strong>)</li><li><strong>另起一行</strong>： 左右括号可以垂直对齐(代码块一目了然)</li></ul><h2 id="8-类中成员的排列顺序"><a href="#8-类中成员的排列顺序" class="headerlink" title="8.类中成员的排列顺序"></a>8.类中成员的排列顺序</h2><ul><li><strong>类</strong>：成员变量-&gt;函数</li><li><strong>成员变量/函数</strong>：静态成员变量/函数-&gt;普通函数/函数</li><li><strong>个人习惯</strong>：比较喜欢把成员变量放前面，函数放后面(每个public和依赖的private方法放一起)</li></ul><h2 id="9-把代码分割成更小的单元快"><a href="#9-把代码分割成更小的单元快" class="headerlink" title="9.把代码分割成更小的单元快"></a>9.把代码分割成更小的单元快</h2><ul><li><strong>背景</strong>：我们一般看某个函数都是先看这个函数整体是什么功能，再看步骤(如果一行行看容易浪费时间而且不一定看得懂)</li><li><strong>建议</strong>：拆分成多个独立功能的小函数</li><li><strong>优点</strong>：方便阅读、易扩展<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//优化前</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bigMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//逻辑1 第一行</span>    <span class="token comment">//逻辑1 第二行</span>    <span class="token comment">//逻辑1 第三行</span>    <span class="token comment">//逻辑1 第四行</span>    <span class="token comment">//逻辑2 第一行</span>    <span class="token comment">//逻辑2 第二行</span>    <span class="token comment">//逻辑2 第三行</span>    <span class="token comment">//逻辑3 第一行 </span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//优化后</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span><span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">bigMethod</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">smallMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">smallMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">smallMethod3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">smallMethod1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//逻辑1 第一行</span>    <span class="token comment">//逻辑1 第二行</span>    <span class="token comment">//逻辑1 第三行</span>    <span class="token comment">//逻辑1 第四行</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">smallMethod2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//逻辑2 第一行</span>    <span class="token comment">//逻辑2 第二行</span>    <span class="token comment">//逻辑2 第三行</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">smallMethod3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//逻辑3 第一行 </span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="10-避免函数参数过多"><a href="#10-避免函数参数过多" class="headerlink" title="*10.避免函数参数过多"></a>*10.避免函数参数过多</h2><ul><li><p>根据不同逻辑拆分多个函数</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//优化前</span>  <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token class-name">String</span> phone<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//优化后</span>  <span class="token class-name">User</span> <span class="token function">getUserByUsername</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token class-name">User</span> <span class="token function">getUserByPhone</span><span class="token punctuation">(</span><span class="token class-name">String</span> phone<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>将函数参数封装成对象</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//优化前</span>  <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span><span class="token class-name">String</span> password<span class="token punctuation">,</span><span class="token keyword">int</span> sex<span class="token punctuation">,</span><span class="token class-name">String</span> phone<span class="token punctuation">,</span><span class="token class-name">String</span> email<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//优化后</span>  <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span><span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> password<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> sex<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> phone<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> email<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="11-勿用函数参数来控制逻辑"><a href="#11-勿用函数参数来控制逻辑" class="headerlink" title="11.勿用函数参数来控制逻辑"></a>11.勿用函数参数来控制逻辑</h2><ul><li>不要用boolean值控制内部逻辑(true走一个逻辑、false走另一个逻辑)<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//例子：根据男女生做不同逻辑处理(分场景，不一定适用其他场景)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//优化前</span>  <span class="token keyword">void</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">,</span> <span class="token keyword">boolean</span> isMale<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//优化后</span>  <span class="token keyword">void</span> <span class="token function">loginForMale</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">void</span> <span class="token function">loginForFemale</span><span class="token punctuation">(</span><span class="token class-name">String</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="12-移除过深的嵌套层次"><a href="#12-移除过深的嵌套层次" class="headerlink" title="12.移除过深的嵌套层次"></a>12.移除过深的嵌套层次</h2><ul><li>去掉多余的if/else语句</li><li>使用continue、break、return等提前退出嵌套</li><li>调整执行顺序来减少嵌套(如提前判空再执行正常逻辑)</li><li>for循环独立逻辑可抽出为一个个函数(参考自<code>《重构改善既有代码的设计》</code>)</li></ul><h2 id="13-学会使用解释性变量"><a href="#13-学会使用解释性变量" class="headerlink" title="13.学会使用解释性变量"></a>13.学会使用解释性变量</h2><ul><li><p>常量取代魔法数字</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//计算不同单位的毫秒值</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> ONE_DAY <span class="token operator">=</span> <span class="token number">24</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> ONE_HOUR <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">long</span> ONE_MINUTE <span class="token operator">=</span> <span class="token number">60</span> <span class="token operator">*</span> <span class="token number">1000</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>使用解释性变量来解释复杂表达式</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//比如该例子的isToday就是解释性变量</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">test</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//判断是否当天</span>    <span class="token keyword">boolean</span> isToday <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">isAfter</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Time</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isBefore</span><span class="token punctuation">(</span><span class="token keyword">int</span> hour<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">isAfter</span><span class="token punctuation">(</span><span class="token keyword">int</span> hour<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 编程规范 </category>
          
          <category> 代码质量 </category>
          
          <category> 重构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编程规范 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计原则与思想：规范与重构</title>
      <link href="/2021/12/03/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E8%A7%84%E8%8C%83%E4%B8%8E%E9%87%8D%E6%9E%84/"/>
      <url>/2021/12/03/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E8%A7%84%E8%8C%83%E4%B8%8E%E9%87%8D%E6%9E%84/</url>
      
        <content type="html"><![CDATA[<h1 id="设计原则与思想：规则与重构"><a href="#设计原则与思想：规则与重构" class="headerlink" title="设计原则与思想：规则与重构"></a>设计原则与思想：规则与重构</h1><h2 id="理论一：重构的why、what、when、how"><a href="#理论一：重构的why、what、when、how" class="headerlink" title="理论一：重构的why、what、when、how"></a>理论一：重构的why、what、when、how</h2><h3 id="重构的目的：为什么重构（why）？"><a href="#重构的目的：为什么重构（why）？" class="headerlink" title="重构的目的：为什么重构（why）？"></a>重构的目的：为什么重构（why）？</h3><ul><li>对于项目而言，重构可以保持代码质量持续处于一个可控状态，不至于太糟糕(无可救药)</li><li>对于个人而言，重构非常锻炼一个人的代码能力(很有成就感)</li></ul><h3 id="重构的对象：重构什么（what）？"><a href="#重构的对象：重构什么（what）？" class="headerlink" title="重构的对象：重构什么（what）？"></a>重构的对象：重构什么（what）？</h3><ul><li><p>大规模高层次的重构</p><ul><li>代码分层</li><li>模块化</li><li>解耦</li><li>梳理类之间的交互关系</li><li>抽象复用组件</li><li>…</li></ul></li><li><p>小规模低层次的重构</p><ul><li>规范命名</li><li>注释</li><li>修正函数参数过多</li><li>消除超大类</li><li>提取重复代码</li><li>…</li></ul></li></ul><h3 id="重构的时机：什么时候重构（when）？"><a href="#重构的时机：什么时候重构（when）？" class="headerlink" title="重构的时机：什么时候重构（when）？"></a>重构的时机：什么时候重构（when）？</h3><ul><li>建立持续<code>重构</code>意识</li><li><code>重构</code>要融入日常开发中</li><li>而非等到代码出现大问题才<code>重构</code></li></ul><h3 id="重构的方法：如何重构（how）？"><a href="#重构的方法：如何重构（how）？" class="headerlink" title="重构的方法：如何重构（how）？"></a>重构的方法：如何重构（how）？</h3><ul><li>大规模高层次的重构<ul><li>有组织、有计划地进行</li><li>分阶段地小步快跑</li><li>时刻让代码处于一个可运行的状态</li></ul></li><li>小规模低层次的重构<ul><li>随时随地</li></ul></li></ul><h2 id="理论二：单元测试-保证重构不出错的技术手段"><a href="#理论二：单元测试-保证重构不出错的技术手段" class="headerlink" title="理论二：单元测试(保证重构不出错的技术手段)"></a>理论二：单元测试(保证重构不出错的技术手段)</h2><ul><li><strong>What</strong>：<ul><li>代码层面的测试，用来测试编写代码逻辑的正确性</li><li><strong>单元</strong>一般是类或函数，而不是模块或者系统</li></ul></li><li><strong>Why</strong>：<ul><li>写<code>单元测试</code>的过程本身就是代码Code Review和重构的过程，能有效发现代码中的BUG和代码设计上的问题</li><li><code>单元测试</code>是<code>集成测试</code>的有力补充</li><li>能帮助我们快速熟悉代码</li></ul></li><li><strong>How</strong>：<ul><li>针对代码设计各种测试用例，以覆盖各种输入、异常、边界情况，并翻译成代码</li><li><code>单元测试</code>不要依赖被测代码的具体实现逻辑</li><li>难以编写<code>单元测试</code>，往往是代码的可测试性不好(说明要重构了)</li></ul></li><li><strong>Example</strong>：<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@RunWith</span><span class="token punctuation">(</span><span class="token class-name">SpringRunner</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token annotation punctuation">@SppringBootTest</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserTest</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">//测试getUserById接口是否正常</span>    <span class="token class-name">User</span> user <span class="token operator">=</span> userService<span class="token punctuation">.</span><span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token number">111L</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//user不为空断言(如果为空会报错)</span>    <span class="token class-name">Assert</span><span class="token punctuation">.</span><span class="token function">assertNotNull</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="理论三：代码的可测试性"><a href="#理论三：代码的可测试性" class="headerlink" title="理论三：代码的可测试性"></a>理论三：代码的可测试性</h2><ul><li><strong>What</strong>：代码的可测试性，就是针对代码编写单元测试的难易程度。</li><li><strong>How</strong>：<code>依赖注入</code>是编写可测试性代码的最有效手段。(减少不必要的rpc耗时+自定义返回内容)<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 一个电商系统的交易类 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Transaction</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//依赖的外部rpc接口(可能耗时长，不便于单测)</span>  <span class="token keyword">private</span> <span class="token class-name">WalletRpcService</span> walletRpcService<span class="token punctuation">;</span>  <span class="token comment">//通过外部set方法实现依赖注入(传递参数)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setWalletRpcService</span><span class="token punctuation">(</span><span class="token class-name">WalletRpcService</span> walletRpcService<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>walletRpcService <span class="token operator">=</span> walletRpcService<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//交易方法</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      walletRpcService<span class="token punctuation">.</span><span class="token function">handle</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">//...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * mock的rpc */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MockWalletRpcService</span> <span class="token keyword">extends</span> <span class="token class-name">WalletRpcService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 单元测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TransactionTest</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Test</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testExecute</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Transaction</span> transaction <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Transaction</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//这里执行我们mock的类(可以自定义返回内容，而非调用实际的WalletRpcService返回不可控的内容以及不可控的耗时)</span>    transaction<span class="token punctuation">.</span><span class="token function">setWalletRpcService</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MockWalletRpcService</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">boolean</span> result <span class="token operator">=</span> transaction<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//断言，如果result不为true则报错</span>    <span class="token function">assertTrue</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h3 id="常见的Anti-Patterns-反面模式"><a href="#常见的Anti-Patterns-反面模式" class="headerlink" title="常见的Anti-Patterns(反面模式)"></a>常见的Anti-Patterns(反面模式)</h3><ul><li><p>1.代码中包含未决行为逻辑(代码return是随机/不确定的)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Demo</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 计算入参早于当前时间多少天   * @param dueTime   * @return 每天返回的值不同   */</span>  <span class="token keyword">public</span> <span class="token keyword">long</span> <span class="token function">calculateDelayDays</span><span class="token punctuation">(</span><span class="token class-name">Date</span> dueTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">long</span> currentTime <span class="token operator">=</span> <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">currentTimeMillis</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>dueTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> currentTime<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">long</span> delayTime <span class="token operator">=</span> currentTime <span class="token operator">-</span> dueTime<span class="token punctuation">.</span><span class="token function">getTime</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">long</span> delayDays <span class="token operator">=</span> delayTime <span class="token operator">/</span> <span class="token number">86400</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> delayDays<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>2.滥用可变全局变量(容易影响其他测试用例)<br>如果单元测试方法testAdd()和testReduce()是并发执行的，那么可能在assertEquals执行之前value就执行了一次add()和一次reduce()，那么结果就跟我们预期的不一样了</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 简易计算器 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Counter</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> value <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token comment">//加法</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">add</span><span class="token punctuation">(</span><span class="token keyword">int</span> addValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//减法</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">int</span> reduceValue<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> value<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 单元测试 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">CounterTest</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testAdd</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Counter</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    counter<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> counter<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">testReduce</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">Counter</span> counter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Counter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    counter<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">assertEquals</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> counter<span class="token punctuation">.</span><span class="token function">getValue</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>3.滥用静态方法(跟<code>2.滥用可变全局变量</code>类似)</p></li><li><p>4.使用复杂的继承关系(如果父类需要mock某个依赖对象，那么子类、子类的子类…都需要mock这个依赖对象，会很复杂)</p></li><li><p>5.高耦合代码(如果一个类依赖几十个外部对象，那我们编写单元测试的时候就可能需要mock几十个外部对象，复杂且不合理)</p></li></ul><h2 id="理论四：代码解耦"><a href="#理论四：代码解耦" class="headerlink" title="理论四：代码解耦"></a>理论四：代码解耦</h2><ul><li><strong>为什么要解耦？</strong><ul><li>过于复杂的代码往往可读性、可维护性不友好(解耦可以保证代码质量)</li><li>保证代码松耦合、高内聚(能有效控制代码复杂度)</li></ul></li><li><strong>怎么看是否需要解耦？</strong><ul><li>直接的衡量标准是把模块与模块、类与类自己的依赖关系画出来，根据依赖关系图的复杂性来判断是否需要解耦重构</li></ul></li><li><strong>怎么重构？</strong><ul><li>封装与抽象</li><li>中间层(如mq)</li><li>模块化</li><li>一些设计思想与原则<ul><li>单一职责原则</li><li>基于接口而非实现编程</li><li>依赖注入</li><li>多用组合少用继承</li><li>迪米特法则(不是很懂。。。。)</li></ul></li><li>设计模式(如观察者模式)</li></ul></li></ul><h2 id="理论五：快速改善代码质量的20条编程规范"><a href="#理论五：快速改善代码质量的20条编程规范" class="headerlink" title="理论五：快速改善代码质量的20条编程规范"></a>理论五：快速改善代码质量的20条编程规范</h2><p><a href="https://garyleeeee.github.io/2021/12/06/%E5%BF%AB%E9%80%9F%E6%94%B9%E5%96%84%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E7%9A%8420%E6%9D%A1%E7%BC%96%E7%A8%8B%E8%A7%84%E8%8C%83/">跳转查看：《快速改善代码质量的20条编程规范》</a></p><h2 id="实战一：如何发现代码质量问题"><a href="#实战一：如何发现代码质量问题" class="headerlink" title="实战一：如何发现代码质量问题"></a>实战一：如何发现代码质量问题</h2><p><img src="/images/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E9%97%AE%E9%A2%98-%E5%B8%B8%E8%A7%84checklist.png" alt="常规checklist"><br><img src="/images/%E4%BB%A3%E7%A0%81%E8%B4%A8%E9%87%8F%E9%97%AE%E9%A2%98-%E4%B8%9A%E5%8A%A1checklist.png" alt="业务checklist"></p><h2 id="实战二：如何处理程序出错的返回"><a href="#实战二：如何处理程序出错的返回" class="headerlink" title="实战二：如何处理程序出错的返回"></a>实战二：如何处理程序出错的返回</h2><ul><li><strong>1.返回错误码</strong><ul><li>是C语言最常用的出错处理方式</li><li>Java语言极少会用到错误码(异常)</li></ul></li><li><strong>2.返回NULL值</strong><ul><li>用来表示”不存在”这种语义</li><li>对于查找函数(如getxxx、queryxxx)来说，数据不存在是一种正常行为(并非异常情况)，所以返回NULL值更加合理</li></ul></li></ul><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUserById</span><span class="token punctuation">(</span><span class="token keyword">int</span> id<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//如果用户不存在，则返回null</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><strong>3.返回空对象</strong><ul><li>针对<code>2.返回NULL值</code>的弊端：调用方容易不做判空导致出现NPE异常</li><li>对于字符串类型或者集合类型时，我们可以用空字符串或空集合替代NULL值(表示不存在)</li></ul></li><li><strong>4.抛出异常对象</strong><ul><li>直接吞掉(原地catch并打印错误日志)</li><li>直接往上抛出(当前方法不处理)</li><li>包裹成新的异常抛出(包装成通用的异常返回，不暴露实现细节)</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 设计模式之美 </category>
          
          <category> 设计原则 </category>
          
          <category> 规则与重构 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计原则与思想：设计原则</title>
      <link href="/2021/11/26/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/"/>
      <url>/2021/11/26/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99/</url>
      
        <content type="html"><![CDATA[<h1 id="设计原则与思想：设计原则"><a href="#设计原则与思想：设计原则" class="headerlink" title="设计原则与思想：设计原则"></a>设计原则与思想：设计原则</h1><h2 id="理论一：单一职责原则"><a href="#理论一：单一职责原则" class="headerlink" title="理论一：单一职责原则"></a>理论一：单一职责原则</h2><ul><li><p><strong>1.如何理解单一职责原则？</strong></p><ul><li><strong>What</strong>：一个类只负责完成一个职责或者功能</li><li><strong>How</strong>：不要设计大而全的类-&gt;要设计粒度小、功能单一的类</li><li><strong>Why</strong>：实现代码高内聚、低耦合，提高代码的复用性、可读性、可维护性</li></ul></li><li><p><strong>2.如何判断类的职责是否足够单一？</strong><br>不同场景的判断标准不同，下面这些情况就有可能说明这类的设计不满足单一职责原则(不是绝对的)：</p><ul><li>类中代码行数过多、函数或者属性过多</li><li>类依赖或被依赖的其他类的过多</li><li>私有(<code>private</code>)方法过多-&gt;考虑抽取私有方法到新的类中并设置为public方法</li><li>类难命名(如只能命名为一些笼统的词语如Manager、Context等)</li><li>类大量方法都是集中操作类中的某几个属性(如用户信息UserInfo表中大部分在操作地址address信息则可以考虑抽出来)<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserInfo</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//用户基础信息</span>    <span class="token keyword">private</span> <span class="token keyword">long</span> uid<span class="token punctuation">;</span><span class="token comment">//用户唯一id</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> username<span class="token punctuation">;</span><span class="token comment">//用户昵称</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token comment">//用户年龄</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> createTime<span class="token punctuation">;</span><span class="token comment">//用户注册时间</span>    <span class="token keyword">private</span> <span class="token class-name">Date</span> lastLoginTime<span class="token punctuation">;</span><span class="token comment">//用户最后登陆时间</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> avatarUrl<span class="token punctuation">;</span><span class="token comment">//用户头像</span>        <span class="token comment">//地址相关信息</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> provinceOfAddress<span class="token punctuation">;</span><span class="token comment">//省</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> cityOfAdddress<span class="token punctuation">;</span><span class="token comment">//市</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> regionOfAddress<span class="token punctuation">;</span><span class="token comment">//区</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> detailedAddress<span class="token punctuation">;</span><span class="token comment">//详细地址</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li><li><p><strong>3.类的职责是否设计得越单一越好？</strong><br>如果拆分得过细，实际上会适得其反，反倒会降低内聚性，也会影响代码的可维护性</p></li></ul><h2 id="理论二：开闭原则-对扩展开放、修改关闭"><a href="#理论二：开闭原则-对扩展开放、修改关闭" class="headerlink" title="理论二：开闭原则(对扩展开放、修改关闭)"></a>理论二：开闭原则(对扩展开放、修改关闭)</h2><ul><li><p><strong>1.如何理解”对扩展开放、修改关闭”？</strong><br>添加一个新的功能，<br>应该是通过在已有代码基础上扩展代码(新增模块、类、方法、属性等)， //<code>对扩展开发</code><br>而非修改已有代码(修改模块、类、方法、属性)                   //<code>对修改关闭</code></p></li><li><p><strong>2.如何做到”对扩展开发、修改关闭”？</strong></p><ul><li>时刻具备扩展意识、抽象意识、封装意识</li><li>写代码时候思考未来可能有哪些需求变更</li><li>思考如何设计代码结构，事先留好扩展点</li><li>保证在未来需求变更的时候，在不改动代码整体结构、做到最小代码改动的情况下，插入新的代码</li></ul></li><li><p><strong>3.常见的提高代码扩展性的方法</strong></p><ul><li>多态</li><li>依赖注入(DI)</li><li>基础接口而非实现编程</li><li>大部分的设计模式(如装饰、策略、模板、责任连、状态)</li></ul></li></ul><h2 id="理论三：里式替换原则-LSP"><a href="#理论三：里式替换原则-LSP" class="headerlink" title="理论三：里式替换原则(LSP)"></a>理论三：里式替换原则(LSP)</h2><ul><li><strong>What</strong>：<code>里式替换原则</code>是用来指导，继承关系中子类该如何设计的一个原则。(design by contract,按照协议来设计)</li><li><strong>How</strong>：父类定义了函数的”约定”(或者叫协议)，那子类可以改变函数的内部实现逻辑，但不能改变函数原有的”约定”。这里的约定包括：<ul><li>函数声明要实现的功能  //比如父类中提供了<code>sortOrdersByAmount()</code>订单排序函数是按照金额从小到大排序的，而如果子类重写该函数是按照日期(而非原本的金额)来排序，那么就是违背<code>里式替换原则</code></li><li>对输入、输出、异常的约定 //比如父类约定运行出错返回null，而子类运行出错抛异常，那么就是违背<code>里式替换原则</code></li><li>注释罗列的任何特殊说明 //比如父类<code>withdraw()</code>提醒函数写了注释”用户提现金额不得超过账户余额”，而子类重写该函数后针对VIP账号实现了透支提现的功能(也就是提醒金额可以大于账户金额)，那么就是违背<code>里式替换原则</code></li></ul></li><li><strong>Why</strong>：<code>里式替换原则</code>是一种设计原则，用来指导继承关系中子类该如何设计，子类的设计要保证在替换父类的时候，不改变原有程序的逻辑及不破坏原有程序的正确性。</li></ul><h2 id="理论四：接口隔离原则-ISP"><a href="#理论四：接口隔离原则-ISP" class="headerlink" title="理论四：接口隔离原则(ISP)"></a>理论四：接口隔离原则(ISP)</h2><ul><li><strong>What</strong>：<code>接口隔离原则</code>即”Interface Segregation Principle”(缩写为ISP)。直白来说，就是客户端不应该强迫依赖它不需要的接口。</li><li><strong>Why</strong>：<ul><li>防止误操作(如误删用户)</li><li>更细粒度，会更加灵活、易扩展、易复用</li><li>调用方无需引用+理解没必要的接口</li></ul></li><li><strong>Example</strong>：<ul><li>不使用ISP时<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//注册</span>  <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//登陆</span>  <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//查询用户</span>  <span class="token class-name">User</span> <span class="token function">getUserByUid</span><span class="token punctuation">(</span><span class="token keyword">long</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//删除(敏感操作，理论上只能在后台操作)</span>  <span class="token keyword">boolean</span> <span class="token function">deleteUserByUid</span><span class="token punctuation">(</span><span class="token keyword">long</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li>使用ISP时<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//注册</span>  <span class="token keyword">boolean</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//登陆</span>  <span class="token keyword">boolean</span> <span class="token function">login</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//查询用户</span>  <span class="token class-name">User</span> <span class="token function">getUserByUid</span><span class="token punctuation">(</span><span class="token keyword">long</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//为了防止误操作，我们应该把用户操作的API和后台操作的API隔离开(为了防止调用UserService的误使用deleteUserByUid引起安全隐患)</span><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">AdminUserService</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//删除(敏感操作，理论上只能在后台操作)</span>  <span class="token keyword">boolean</span> <span class="token function">deleteUserByUid</span><span class="token punctuation">(</span><span class="token keyword">long</span> uid<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span><span class="token punctuation">,</span><span class="token class-name">AdminUserService</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="理论五：依赖反转原则-DIP"><a href="#理论五：依赖反转原则-DIP" class="headerlink" title="理论五：依赖反转原则(DIP)"></a>理论五：依赖反转原则(DIP)</h2><h3 id="1-控制反转-IOC"><a href="#1-控制反转-IOC" class="headerlink" title="1.控制反转(IOC)"></a>1.控制反转(IOC)</h3><ul><li><p><strong>控制</strong>：指的是对程序执行流程的控制</p></li><li><p><strong>反转</strong></p><ul><li><p><strong>没使用框架前</strong>：程序员自己控制整个程序的执行</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceTest</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">boolean</span> <span class="token function">doTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token function">doTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>使用框架后</strong>：整个程序的执行流程通过框架来控制(流程的控制权从程序员<code>反转</code>给了框架)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">class</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">doTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"fail"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">abstract</span> <span class="token keyword">boolean</span> <span class="token function">doTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//我们只需要在框架预留的扩展点(也就是TestCase类中的doTest()抽象函数中填充具体测试代码就能模拟单元测试了)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceTest</span> <span class="token keyword">extends</span> <span class="token class-name">TestCase</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Override</span>  <span class="token keyword">public</span> <span class="token keyword">boolean</span> <span class="token function">doTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">//抽象出来的框架</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">JUnitApplication</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">TestCase</span><span class="token punctuation">></span></span> testCases <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">register</span><span class="token punctuation">(</span><span class="token class-name">TestCase</span> testCase<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    testCases<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>testCase<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//添加需要测试的类</span>    <span class="token class-name">JUnitApplication</span><span class="token punctuation">.</span><span class="token function">register</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">UserServiceTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//控制反转式"测试"</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token class-name">TestCase</span> testCase <span class="token operator">:</span> testCases<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      testCase<span class="token punctuation">.</span><span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="2-依赖注入-DI"><a href="#2-依赖注入-DI" class="headerlink" title="2.依赖注入(DI)"></a>2.依赖注入(DI)</h3><ul><li><p><strong>What</strong>：不通过<code>new</code>的方式在类内部创建依赖类的对象，而是将依赖的类对象在外部创建好，通过构造函数等方式传递(或注入)给类使用</p></li><li><p><strong>How</strong>：通过一个邮箱系统来讲解</p><ul><li><p><strong>不使用DI</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//邮箱</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailBox</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//发送邮件的工具</span>  <span class="token class-name">MailSender</span> mailSender<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">MailBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mailSender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MailSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestApplication</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//构造MailBox的时候内部会自己new一个MailSender</span>  <span class="token class-name">MailBox</span> mailBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MailBox</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><strong>使用DI</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">//邮箱</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MailBox</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//发送邮件的工具</span>  <span class="token class-name">MailSender</span> mailSender<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">MailBox</span><span class="token punctuation">(</span><span class="token class-name">MailSender</span> mailSender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>mailSender <span class="token operator">=</span> mailSender<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestApplication</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//先初始化内部依赖的对象</span>  <span class="token class-name">MailSender</span> mailSender <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MailSender</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//再通过构造方法传递</span>  <span class="token class-name">MailBox</span> mailBox <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">MailBox</span><span class="token punctuation">(</span>mailSender<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h3 id="3-依赖注入框架-DI-Framework"><a href="#3-依赖注入框架-DI-Framework" class="headerlink" title="3.依赖注入框架(DI Framework)"></a>3.依赖注入框架(DI Framework)</h3><ul><li>简单配置一下所有需要的类及其类与类之间依赖关系，就可以实现如下内容(原本需要程序员做的事情)<ul><li>由框架来自动创建对象</li><li>由框架来管理对象的生命周期</li><li>由框架来管理对象的依赖注入</li></ul></li></ul><h3 id="4-依赖反转原则-DIP"><a href="#4-依赖反转原则-DIP" class="headerlink" title="4.依赖反转原则(DIP)"></a>4.依赖反转原则(DIP)</h3><ul><li><strong>What</strong>：<ul><li><code>依赖反转原则</code>也叫做<code>依赖倒置原则</code></li><li>用来指导框架层面的设计</li></ul></li><li><strong>How</strong>：<ul><li>高层模块不依赖低层模块，它们共同依赖同一个抽象</li><li>抽象不要依赖具体实现细节，具体实现细节依赖对象</li></ul></li><li><strong>Example</strong>：<ul><li>Tomcat是运行Java Web应用程序的容器</li><li>应用程序可以部署在Tomcat容器上，便可被Tomcat容器调用执行</li><li>Tomcat是高层模块，应用程序是低层模块</li><li>Tomcat和应用程序代码之间没有直接的依赖关系，两者都依赖同一个”抽象”(也就是Servlet规范)</li><li>Servlet规范不依赖具体的Tomcat容器和应用程序的实现细节，而Tomcat容器和应用程序依赖Servlet规范</li></ul></li></ul><h2 id="先跳过"><a href="#先跳过" class="headerlink" title="先跳过"></a>先跳过</h2><h3 id="理论六：KISS、YAGNI原则"><a href="#理论六：KISS、YAGNI原则" class="headerlink" title="理论六：KISS、YAGNI原则"></a>理论六：KISS、YAGNI原则</h3><h3 id="理论七：DRY原则"><a href="#理论七：DRY原则" class="headerlink" title="理论七：DRY原则"></a>理论七：DRY原则</h3><h3 id="理论八：LOD原则"><a href="#理论八：LOD原则" class="headerlink" title="理论八：LOD原则"></a>理论八：LOD原则</h3><h3 id="…"><a href="#…" class="headerlink" title="…"></a>…</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 设计模式之美 </category>
          
          <category> 设计原则 </category>
          
          <category> 设计原则与思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计原则与思想：面向对象</title>
      <link href="/2021/11/13/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
      <url>/2021/11/13/%E8%AE%BE%E8%AE%A1%E5%8E%9F%E5%88%99%E4%B8%8E%E6%80%9D%E6%83%B3%EF%BC%9A%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/</url>
      
        <content type="html"><![CDATA[<h1 id="设计原则与思想：面向对象"><a href="#设计原则与思想：面向对象" class="headerlink" title="设计原则与思想：面向对象"></a>设计原则与思想：面向对象</h1><h2 id="理论一：面向对象"><a href="#理论一：面向对象" class="headerlink" title="理论一：面向对象"></a>理论一：面向对象</h2><p>概念：面向对象编程是一种编程范式或编程风格，它以类或对象作为组织代码的基本单元<br>特性：封装、抽象、继承、多态<br>区别：<strong>面向对象分析</strong>就是要搞清楚做什么，<strong>面向对象设计</strong>就是要搞清楚怎么做，<strong>面向对象编程</strong>就是将<strong>分析</strong>和<strong>设计</strong>的结果翻译成代码的过程</p><h2 id="理论二：封装、抽象、继承、多态"><a href="#理论二：封装、抽象、继承、多态" class="headerlink" title="理论二：封装、抽象、继承、多态"></a>理论二：封装、抽象、继承、多态</h2><ul><li><strong>封装</strong><ul><li><strong>What</strong>：隐藏信息，保护数据访问(如private)</li><li><strong>How</strong>：暴露有限接口和属性，需要编程语音提供访问控制的语法(如Jva提供private/protected/public等)</li><li><strong>Why</strong>：提高代码可维护性，降低接口复杂度，提高类的易用性</li><li><strong>白话总结</strong>：可通过暴露出来的方法来访问数据(如public)，而屏蔽其不可修改的属性(如private)</li></ul></li><li><strong>抽象</strong><ul><li><strong>What</strong>：隐藏具体实现，使用者只需关心功能，无需关心实现</li><li><strong>How</strong>：通过接口类(interface)或者抽象类(abstract)实现，特殊语法机制非必需</li><li><strong>Why</strong>：提高代码的扩展性、维护性，降低复杂度，减少细节负担</li><li><strong>白话总结</strong>：使用者只需关心功能，无需关心实现</li></ul></li><li><strong>继承</strong><ul><li><strong>What</strong>：表示<code>is-a</code>关系(指的是类的父子继承关系)，分为单继承(如Java)和多继承(如C++)</li><li><strong>How</strong>：需要编程语言提供特殊语法机制(如Java的<code>extend</code>，C++的<code>:</code>)</li><li><strong>Why</strong>：解决代码复用问题</li><li><strong>白话总结</strong>：比如Cat继承自Animal，父类(Animal)有动物的共同特性(如吃饭睡觉)，子类(Cat)可有单独的特性(如卖萌)</li></ul></li><li><strong>多态</strong><ul><li><strong>What</strong>：子类替换父类，在运行时调用子类的实现</li><li><strong>How</strong>：需要编程语言提供特殊语法技术(如支持继承、支持父类引用子类、支持子类重写父类方法等)</li><li><strong>Why</strong>：提高代码扩展性和复用性</li><li><strong>白话总结</strong>：如<code>Animal animal = new Cat();</code>，调用animal的方法反映的是Cat的特性<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Animal</span> <span class="token punctuation">&#123;</span><span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setName</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">//叫声</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token string">"default"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Cat</span> <span class="token keyword">extends</span> <span class="token class-name">Animal</span><span class="token punctuation">&#123;</span><span class="token annotation punctuation">@Override</span><span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//不同子类会有自己的name(多态)</span>  <span class="token keyword">return</span> <span class="token string">"猫"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token annotation punctuation">@Override</span> <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">shout</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>  <span class="token comment">//不同子类会有自己的叫声(多态)</span>  <span class="token keyword">return</span> <span class="token string">"喵"</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="理论三：面向对象相比面向过程有哪些优势？"><a href="#理论三：面向对象相比面向过程有哪些优势？" class="headerlink" title="理论三：面向对象相比面向过程有哪些优势？"></a>理论三：面向对象相比面向过程有哪些优势？</h2><ul><li><p>概念</p><ul><li><code>面向对象编程</code>以类为组织代码的基本单元</li><li><code>面向过程编程</code>以过程/方法作为租住代码的基本单元</li></ul></li><li><p><code>面向对象编程</code>比起<code>面向过程编程</code>的优势</p><ul><li>更能应对复杂类型的程序开发(对于大规模复杂程序的开发，程序的处理流程并非单一的一条主线，而是错综复杂的网状结果)</li><li>编写的代码更加易扩展、易复用、易维护(具有丰富的特性如封装、抽象、继承、多态)</li><li>更加人性化、更加高级、更加智能(从编程语言与机器打交道的方式演进规律总结)</li></ul></li><li><p>代码区别例子</p><ul><li><code>面向过程编程</code>(如C语言)<pre class="line-numbers language-none"><code class="language-none">struct User &#123;  char name[64];  int age;  char gender[16];&#125;;struct User parse_to_user(char* text) &#123;  &#x2F;&#x2F; 将text(“小王&amp;28&amp;男”)解析成结构体struct User&#125;char* format_to_text(struct User user) &#123;  &#x2F;&#x2F; 将结构体struct User格式化成文本（&quot;小王\t28\t男&quot;）&#125;void sort_users_by_age(struct User users[]) &#123;  &#x2F;&#x2F; 按照年龄从小到大排序users&#125;void format_user_file(char* origin_file_path, char* new_file_path) &#123;  &#x2F;&#x2F; open files...  struct User users[1024]; &#x2F;&#x2F; 假设最大1024个用户  int count &#x3D; 0;  while(1) &#123; &#x2F;&#x2F; read until the file is empty    struct User user &#x3D; parse_to_user(line);    users[count++] &#x3D; user;  &#125;    sort_users_by_age(users);    for (int i &#x3D; 0; i &lt; count; ++i) &#123;    char* formatted_user_text &#x3D; format_to_text(users[i]);    &#x2F;&#x2F; write to new file...  &#125;  &#x2F;&#x2F; close files...&#125;int main(char** args, int argv) &#123;  format_user_file(&quot;&#x2F;home&#x2F;zheng&#x2F;user.txt&quot;, &quot;&#x2F;home&#x2F;zheng&#x2F;formatted_users.txt&quot;);&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><code>面向对象编程</code>(Java语言)<pre class="line-numbers language-java" data-language="java"><code class="language-java"> <span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token class-name">String</span> gender<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">,</span> <span class="token keyword">int</span> age<span class="token punctuation">,</span> <span class="token class-name">String</span> gender<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>age <span class="token operator">=</span> age<span class="token punctuation">;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>gender <span class="token operator">=</span> gender<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token class-name">User</span> <span class="token function">praseFrom</span><span class="token punctuation">(</span><span class="token class-name">String</span> userInfoText<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将text(“小王&amp;28&amp;男”)解析成类User</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">formatToText</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 将类User格式化成文本（"小王\t28\t男"）</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserFileFormatter</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">format</span><span class="token punctuation">(</span><span class="token class-name">String</span> userFile<span class="token punctuation">,</span> <span class="token class-name">String</span> formattedUserFile<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// Open files...</span>    <span class="token class-name">List</span> users <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ArrayList</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">// read until file is empty </span>      <span class="token comment">// read from file into userText...</span>      <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token function">parseFrom</span><span class="token punctuation">(</span>userText<span class="token punctuation">)</span><span class="token punctuation">;</span>      users<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// sort users by age...</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> users<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">String</span> formattedUserText <span class="token operator">=</span> user<span class="token punctuation">.</span><span class="token function">formatToText</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token comment">// write to new file...</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// close files...</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MainApplication</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">UserFileFormatter</span> userFileFormatter <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserFileFormatter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    userFileFormatter<span class="token punctuation">.</span><span class="token function">format</span><span class="token punctuation">(</span><span class="token string">"/home/zheng/users.txt"</span><span class="token punctuation">,</span> <span class="token string">"/home/zheng/formatted_users.txt"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul></li></ul><h2 id="理论四：反面向对象编程风格的代码"><a href="#理论四：反面向对象编程风格的代码" class="headerlink" title="理论四：反面向对象编程风格的代码"></a>理论四：反面向对象编程风格的代码</h2><h3 id="1-滥用getter、setter方法"><a href="#1-滥用getter、setter方法" class="headerlink" title="1.滥用getter、setter方法"></a>1.滥用getter、setter方法</h3><p><strong>背景/现象</strong>：大部分情况为了快速开发，都会给类所有属性都加上getter、setter方法(或者使用Lombok注解)<br><strong>优化</strong>：设计实现类的时候，非必要的时候尽量不要给属性定义setter方法(避免乱修改)，同时如果getter返回的是集合容器也需防范集合内部数据被修改的风险(如List可以取到其中的对象修改属性如name)<br><strong>优点</strong>：尽可能保证数据安全<br><strong>优化前的例子</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 购物车 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShoppingCar</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">double</span> totalPrice<span class="token punctuation">;</span><span class="token comment">//总金额</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> itemCount<span class="token punctuation">;</span><span class="token comment">//商品数量</span>  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingItem</span><span class="token punctuation">></span></span> items<span class="token punctuation">;</span><span class="token comment">//商品列表</span>  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getTotalPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> totalPrice<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//虽然totalPrice属性定义了private，但是却提供了public的set方法，导致totalPrice可以被随意修改(不符合逻辑)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setTotalPrice</span><span class="token punctuation">(</span><span class="token keyword">double</span> totalPrice<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>totalPrice <span class="token operator">=</span> totalPrice<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> itemCount<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//虽然itemCount属性定义了private，但是却提供了public的set方法，导致itemCount可以被随意修改(不符合逻辑)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setItemCount</span><span class="token punctuation">(</span><span class="token keyword">int</span> itemCount<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>itemCount <span class="token operator">=</span> itemCount<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingItem</span><span class="token punctuation">></span></span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">//返回一个不可修改的集合容器(防止外部直接操作容器如add、clear等)</span>    <span class="token keyword">return</span> <span class="token class-name">Collections</span><span class="token punctuation">.</span><span class="token function">unmodifiableList</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>items<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token comment">//虽然items属性定义了private，但是却提供了public的set方法，导致items可以被随意修改(不符合逻辑)</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">setItems</span><span class="token punctuation">(</span><span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingItem</span><span class="token punctuation">></span></span> items<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>items <span class="token operator">=</span> items<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优化后的例子</strong>： </p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 购物车 */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">ShoppingCar</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">double</span> totalPrice<span class="token punctuation">;</span><span class="token comment">//总金额</span>  <span class="token keyword">private</span> <span class="token keyword">int</span> itemCount<span class="token punctuation">;</span><span class="token comment">//商品数量</span>  <span class="token keyword">private</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingItem</span><span class="token punctuation">></span></span> items<span class="token punctuation">;</span><span class="token comment">//商品列表</span>  <span class="token keyword">public</span> <span class="token keyword">double</span> <span class="token function">getTotalPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> totalPrice<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">int</span> <span class="token function">getItemCount</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> itemCount<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">List</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token class-name">ShoppingItem</span><span class="token punctuation">></span></span> <span class="token function">getItems</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> items<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">addItem</span><span class="token punctuation">(</span><span class="token class-name">ShoppingItem</span> item<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>      itemCount<span class="token operator">++</span><span class="token punctuation">;</span>      totalAmount<span class="token operator">+=</span>item<span class="token punctuation">.</span><span class="token function">getPrice</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      items<span class="token punctuation">.</span><span class="token function">add</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token comment">//...省略其他代码</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Constants类、Utils类的设计问题"><a href="#2-Constants类、Utils类的设计问题" class="headerlink" title="2.Constants类、Utils类的设计问题"></a>2.Constants类、Utils类的设计问题</h3><p><strong>背景/现象</strong>：平时为了统一管理常量，我们会定义一个大而全的<code>Constants</code>类、<code>Utils</code>类<br><strong>优化</strong>：定义细化的小类，如<code>RedisConstants</code>类、<code>FileUtils</code>类，一个类只负责一个/多个同场景的功能<br><strong>优点</strong>：尽量做到职责单一，提高类的内聚性和代码的可复用性<br><strong>优化前的例子</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">Constants</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * mysql相关常量   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> MYSQL_ADDRESS <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> MYSQL_PORT <span class="token operator">=</span> <span class="token string">"8086"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> MYSQL_USERNAME <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> MYSQL_PASSWORD <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span>  <span class="token comment">/**   * rabbitmq相关常量   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> RABBITMQ_QUEUE <span class="token operator">=</span> <span class="token string">"rabbitmq_queue"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> RABBITMQ_EXCHANGE <span class="token operator">=</span> <span class="token string">"rabbitmq_exchange"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> RABBITMQ_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"rabbitmq_routing_key"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>优化后的代码</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">MysqlConstants</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * mysql相关常量   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> MYSQL_ADDRESS <span class="token operator">=</span> <span class="token string">"127.0.0.1"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> MYSQL_PORT <span class="token operator">=</span> <span class="token string">"8086"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> MYSQL_USERNAME <span class="token operator">=</span> <span class="token string">"root"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> MYSQL_PASSWORD <span class="token operator">=</span> <span class="token string">"admin"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitmqConstants</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * rabbitmq相关常量   */</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> RABBITMQ_QUEUE <span class="token operator">=</span> <span class="token string">"rabbitmq_queue"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> RABBITMQ_EXCHANGE <span class="token operator">=</span> <span class="token string">"rabbitmq_exchange"</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token class-name">String</span> RABBITMQ_ROUTING_KEY <span class="token operator">=</span> <span class="token string">"rabbitmq_routing_key"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-基于贫血模型的开发模式"><a href="#3-基于贫血模型的开发模式" class="headerlink" title="3.基于贫血模型的开发模式"></a>3.基于贫血模型的开发模式</h3><p><strong>背景/现象</strong>：定义数据和方法分离的类(常见的就是MVC模式)<br><strong>优化</strong>：暂不优化<br><strong>优点</strong>：代码解耦、提高扩展性和可读性<br><strong>例子</strong>：</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 实体类 */</span><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * Service */</span><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">User</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 控制层 */</span><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserController</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@AutoWired</span>    <span class="token keyword">private</span> <span class="token class-name">UserService</span> userService<span class="token punctuation">;</span>        <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getUser"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">User</span> <span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> userService<span class="token punctuation">.</span><span class="token function">getUser</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="理论五：接口和抽象类的区别"><a href="#理论五：接口和抽象类的区别" class="headerlink" title="理论五：接口和抽象类的区别"></a>理论五：接口和抽象类的区别</h2><ul><li><p><strong>接口</strong></p><ul><li>定义：如java中的interface类，也叫做协议contract</li><li>存在意义：是一种<code>has-a</code>关系，是为了解决代码解耦问题(表示具有某一组行为特性，隔离接口和具体的实现，提高代码的扩展性)</li><li>不能包含属性，只能声明方法(不能包含代码实现)</li><li>类实现(implements)<code>接口</code>的时候，必须实现<code>接口</code>中声明的所有方法</li></ul></li><li><p><strong>抽象类</strong></p><ul><li>定义：如java中的abstract类</li><li>存在意义：是一种<code>is-a</code>关系，是为了解决代码复用问题</li><li>可以包含属性和方法(可包含代码实现也可以不包含)</li><li>抽象方法：不包含代码实现的方法(关键字<code>abstract</code>，子类继承抽象类<strong>必须实现</strong>抽象类中的所有抽象方法)</li><li>不允许被实例化(new)，只能被继承(extends)</li></ul></li><li><p><strong>总结</strong></p><ul><li>使用场景： 如果要表示一种<code>is-a</code>的关系，并且是为了解决代码复用问题，就用<code>抽象类</code>；如果要表示一种<code>has-a</code>的关系，并且是为了解决代码复用问题，就用<code>接口</code></li><li>使用规则： <code>抽象类</code>只能单继承，<code>接口</code>可以多实现</li></ul></li></ul><h2 id="理论六：基于接口而非实现编程"><a href="#理论六：基于接口而非实现编程" class="headerlink" title="理论六：基于接口而非实现编程"></a>理论六：基于接口而非实现编程</h2><ul><li><strong>基于接口而非实现编程</strong>：也可叫做<strong>基于抽象而非实现编程</strong>。<ul><li>我们在做软件开发的时候，一定要有抽象意识、封装意识、接口意识</li><li>越抽象、越顶层、越脱离具体某一实现的设计，越能提高代码的灵活性、扩展性、可维护性</li></ul></li><li>定义接口的规范<ul><li>命名要足够通用，不能包含跟具体实现相关的字眼</li><li>与特定实现有关的方法不要定义在接口中</li></ul></li><li>不仅可以指导非常细节的编程卡法，还能指导更加上层的架构设计、系统设计等。比如服务端与客户端之间的”接口”设计、类库的”接口”设计。</li><li>实战模拟：图片的上传与下载<pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliyunImageStore</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 根基accessKey/serectKey等生成access token   * @return   */</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">generateAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 上传图片到阿里云   * @param image   * @param bucketName   * @param accessToken   * @return 图片存储在阿里云上的地址   */</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">uploadToAliyun</span><span class="token punctuation">(</span><span class="token class-name">Image</span> image<span class="token punctuation">,</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">,</span> <span class="token class-name">String</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token comment">/**   * 从阿里云下载图片   * @param url   * @param accessToken   * @return   */</span>  <span class="token keyword">public</span> <span class="token class-name">Image</span> <span class="token function">downloadFromAliyun</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">,</span> <span class="token class-name">String</span> accessToken<span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>上面的代码是一个简单的基于阿里云的图片上传与下载功能。<br>接口设计看起来并没有太大问题，但是软件开发中唯一不变的就是变化。<br>如果过了一段时间，我们自建了私有云，不再将图片存储到艾丽云，而是将图片存储到自建私有云上。</li></ul><p><strong>问题</strong>：原先的接口命名暴露了实现细节(aliyun)，如果复用的话需要修改命名，那么这样对于调用该代码的地方修改量会很大<br><strong>解决</strong>：阿里云和私有云存储图片基本一致(阿里云需要access token而私有云不需要)，所以我们可以考虑抽一个顶层接口类，来屏蔽特定实现细节(如access token)</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">ImageStore</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">Image</span> image<span class="token punctuation">,</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token class-name">Image</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 阿里云图片存储(需access token) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AliyunImageStore</span> <span class="token keyword">implements</span> <span class="token class-name">ImageStore</span> <span class="token punctuation">&#123;</span>  <span class="token comment">/**   * 根基accessKey/serectKey等生成access token   * @return   */</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">generateAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">Image</span> image<span class="token punctuation">,</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> accessToken <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//...</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token keyword">public</span> <span class="token class-name">Image</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> accessToken <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">generateAccessToken</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//...</span>    <span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/** * 私有云图片存储(不需access token) */</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">PrivateImageStore</span> <span class="token keyword">implements</span> <span class="token class-name">ImageStore</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">upload</span><span class="token punctuation">(</span><span class="token class-name">Image</span> image<span class="token punctuation">,</span> <span class="token class-name">String</span> bucketName<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token class-name">Image</span> <span class="token function">download</span><span class="token punctuation">(</span><span class="token class-name">String</span> url<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span> <span class="token keyword">null</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="理论七：多用组合少用继承？-ps-不是很明白组合是什么场景好用"><a href="#理论七：多用组合少用继承？-ps-不是很明白组合是什么场景好用" class="headerlink" title="理论七：多用组合少用继承？(ps.不是很明白组合是什么场景好用)"></a>理论七：多用组合少用继承？(ps.不是很明白组合是什么场景好用)</h2><h3 id="1-为什么不推荐使用继承？"><a href="#1-为什么不推荐使用继承？" class="headerlink" title="1.为什么不推荐使用继承？"></a>1.为什么不推荐使用继承？</h3><ul><li>虽然继承有诸多作用，但继承层次过深、过复杂</li><li>会影响代码的可维护性</li></ul><h3 id="2-组合相比继承有哪些优势？"><a href="#2-组合相比继承有哪些优势？" class="headerlink" title="2.组合相比继承有哪些优势？"></a>2.组合相比继承有哪些优势？</h3><ul><li><code>继承</code>主要有三个作用：<ul><li>表示<code>is-a</code>关系</li><li>支持多态特性</li><li>代码复用</li></ul></li><li><code>组合</code>优势<ul><li>可以通过和<strong>接口</strong>、<strong>委托</strong>三个技术手段来达成<code>继承</code>的三个作用(在上面)</li><li>可以解决层次过深、过复杂的继承关系影响代码可维护性的问题</li></ul></li></ul><h3 id="3-如何判断该用组合还是继承？"><a href="#3-如何判断该用组合还是继承？" class="headerlink" title="3.如何判断该用组合还是继承？"></a>3.如何判断该用组合还是继承？</h3><ul><li>使用<code>继承</code>的场景<ul><li>类之间的继承结构稳定</li><li>类之间的层次比较浅</li><li>类之间的关系不复杂</li></ul></li><li>使用<code>组合</code>的场景<ul><li>类之间的继承结构不稳定</li><li>类之间的层次比较深</li><li>类之间的关系复杂</li></ul></li></ul><h2 id="实战篇-暂时跳过"><a href="#实战篇-暂时跳过" class="headerlink" title="实战篇(暂时跳过)"></a>实战篇(暂时跳过)</h2><h3 id="实战一-上-：基于贫血模型的MVC架构违背OOP吗？"><a href="#实战一-上-：基于贫血模型的MVC架构违背OOP吗？" class="headerlink" title="实战一(上)：基于贫血模型的MVC架构违背OOP吗？"></a>实战一(上)：基于贫血模型的MVC架构违背OOP吗？</h3><h3 id="实战一-下-：利用利于充血模型的DDD开发一个虚拟钱包系统？"><a href="#实战一-下-：利用利于充血模型的DDD开发一个虚拟钱包系统？" class="headerlink" title="实战一(下)：利用利于充血模型的DDD开发一个虚拟钱包系统？"></a>实战一(下)：利用利于充血模型的DDD开发一个虚拟钱包系统？</h3><h3 id="实战二-上-：对接口鉴权做面向对象分析"><a href="#实战二-上-：对接口鉴权做面向对象分析" class="headerlink" title="实战二(上)：对接口鉴权做面向对象分析"></a>实战二(上)：对接口鉴权做面向对象分析</h3><h3 id="实战二-下-：利用面向对象设计和编程开发接口鉴权功能"><a href="#实战二-下-：利用面向对象设计和编程开发接口鉴权功能" class="headerlink" title="实战二(下)：利用面向对象设计和编程开发接口鉴权功能"></a>实战二(下)：利用面向对象设计和编程开发接口鉴权功能</h3>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
          <category> 设计模式之美 </category>
          
          <category> 面向对象 </category>
          
          <category> 设计原则与思想 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Mybatis-Plus使用笔记</title>
      <link href="/2021/11/09/Mybatis-Plus%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/09/Mybatis-Plus%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、官方文档"><a href="#一、官方文档" class="headerlink" title="一、官方文档"></a>一、官方文档</h2><p><a href="https://baomidou.com/">https://baomidou.com/</a></p><h2 id="二、怎么使用"><a href="#二、怎么使用" class="headerlink" title="二、怎么使用"></a>二、怎么使用</h2><h3 id="1-添加依赖"><a href="#1-添加依赖" class="headerlink" title="1.添加依赖"></a>1.添加依赖</h3><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token comment">&lt;!-- MybatisPlus --></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>mybatis-plus-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>3.2.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-添加配置"><a href="#2-添加配置" class="headerlink" title="2.添加配置"></a>2.添加配置</h3><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># Mybatis-plus</span><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token comment"># 放在resource目录 classpath:/mapper/*Mapper.xml</span>  <span class="token key atrule">mapper-locations</span><span class="token punctuation">:</span> classpath<span class="token punctuation">:</span>/mybatis/mapper/<span class="token important">*Mapper.xml</span>  <span class="token comment"># 实体扫描，多个package用逗号或者分号分隔</span>  <span class="token key atrule">typeAliasesPackage</span><span class="token punctuation">:</span> com.yy.mobilevoice.svc.diversion.model.domain  <span class="token key atrule">global-config</span><span class="token punctuation">:</span>    <span class="token comment"># 主键类型  0:"数据库ID自增", 1:"用户输入ID",2:"全局唯一ID (数字类型唯一ID)", 3:"全局唯一ID UUID";</span>    <span class="token key atrule">id-type</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token comment"># 字段策略 0:"忽略判断",1:"非 NULL 判断",2:"非空判断"</span>    <span class="token key atrule">field-strategy</span><span class="token punctuation">:</span> <span class="token number">2</span>    <span class="token comment"># 驼峰下划线转换</span>    <span class="token key atrule">db-column-underline</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 刷新mapper 调试神器</span>    <span class="token key atrule">refresh-mapper</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token comment"># 数据库大写下划线转换</span>    <span class="token comment">#capital-mode: true</span>    <span class="token comment"># 逻辑删除配置（下面3个配置）</span>    <span class="token key atrule">logic-delete-value</span><span class="token punctuation">:</span> <span class="token number">0</span>    <span class="token key atrule">logic-not-delete-value</span><span class="token punctuation">:</span> <span class="token number">1</span>    <span class="token comment"># SQL 解析缓存，开启后多租户 @SqlParser 注解生效</span>    <span class="token key atrule">sql-parser-cache</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">map-underscore-to-camel-case</span><span class="token punctuation">:</span> <span class="token boolean important">true</span>    <span class="token key atrule">cache-enabled</span><span class="token punctuation">:</span> <span class="token boolean important">false</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="3-常见注解-更多查看文档"><a href="#3-常见注解-更多查看文档" class="headerlink" title="3.常见注解(更多查看文档)"></a>3.常见注解(更多查看文档)</h3><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>@MapperScan(“com.demo.mapper”)</td><td>扫描该目录下的mapper接口都会自动生成实现类(等同于一个个加@Mapper)</td></tr><tr><td>@TableName(“tableName”)</td><td>用于标识数据库表对应的实体类</td></tr></tbody></table><h3 id="4-如何使用多数据源？"><a href="#4-如何使用多数据源？" class="headerlink" title="4.如何使用多数据源？"></a>4.如何使用多数据源？</h3><h4 id="a-添加依赖"><a href="#a-添加依赖" class="headerlink" title="a.添加依赖"></a>a.添加依赖</h4><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.baomidou<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>dynamic-datasource-spring-boot-starter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>$&#123;version&#125;<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="b-添加数据源"><a href="#b-添加数据源" class="headerlink" title="b.添加数据源"></a>b.添加数据源</h4><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>      <span class="token key atrule">primary</span><span class="token punctuation">:</span> master <span class="token comment">#设置默认的数据源或者数据源组,默认值即为master</span>      <span class="token key atrule">strict</span><span class="token punctuation">:</span> <span class="token boolean important">false</span> <span class="token comment">#严格匹配数据源,默认false. true未匹配到指定数据源时抛异常,false使用默认数据源</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">master</span><span class="token punctuation">:</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//xx.xx.xx.xx<span class="token punctuation">:</span>3306/dynamic          <span class="token key atrule">username</span><span class="token punctuation">:</span> root          <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver <span class="token comment"># 3.2.0开始支持SPI可省略此配置</span>        <span class="token key atrule">slave_1</span><span class="token punctuation">:</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> jdbc<span class="token punctuation">:</span>mysql<span class="token punctuation">:</span>//xx.xx.xx.xx<span class="token punctuation">:</span>3307/dynamic          <span class="token key atrule">username</span><span class="token punctuation">:</span> root          <span class="token key atrule">password</span><span class="token punctuation">:</span> <span class="token number">123456</span>          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver        <span class="token key atrule">slave_2</span><span class="token punctuation">:</span>          <span class="token key atrule">url</span><span class="token punctuation">:</span> ENC(xxxxx) <span class="token comment"># 内置加密,使用请查看详细文档</span>          <span class="token key atrule">username</span><span class="token punctuation">:</span> ENC(xxxxx)          <span class="token key atrule">password</span><span class="token punctuation">:</span> ENC(xxxxx)          <span class="token key atrule">driver-class-name</span><span class="token punctuation">:</span> com.mysql.jdbc.Driver       <span class="token comment">#......省略</span>       <span class="token comment">#以上会配置一个默认库master，一个组slave下有两个子库slave_1,slave_2</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token comment"># 多主多从</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">master_1</span><span class="token punctuation">:</span>        <span class="token key atrule">master_2</span><span class="token punctuation">:</span>        <span class="token key atrule">slave_1</span><span class="token punctuation">:</span>        <span class="token key atrule">slave_2</span><span class="token punctuation">:</span>        <span class="token key atrule">slave_3</span><span class="token punctuation">:</span>                                                                                      <span class="token comment"># 纯粹多库（记得设置primary）</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">mysql</span><span class="token punctuation">:</span>         <span class="token key atrule">oracle</span><span class="token punctuation">:</span>        <span class="token key atrule">sqlserver</span><span class="token punctuation">:</span>        <span class="token key atrule">postgresql</span><span class="token punctuation">:</span>        <span class="token key atrule">h2</span><span class="token punctuation">:</span><span class="token comment"># 混合配置</span><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">datasource</span><span class="token punctuation">:</span>    <span class="token key atrule">dynamic</span><span class="token punctuation">:</span>      <span class="token key atrule">datasource</span><span class="token punctuation">:</span>        <span class="token key atrule">master</span><span class="token punctuation">:</span>        <span class="token key atrule">slave_1</span><span class="token punctuation">:</span>        <span class="token key atrule">slave_2</span><span class="token punctuation">:</span>        <span class="token key atrule">oracle_1</span><span class="token punctuation">:</span>        oracle_2<span class="token punctuation">:</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="c-使用-DS-切换数据源"><a href="#c-使用-DS-切换数据源" class="headerlink" title="c.使用 @DS 切换数据源"></a>c.使用 <strong>@DS</strong> 切换数据源</h4><table><thead><tr><th>注解</th><th>作用</th></tr></thead><tbody><tr><td>没有@DS</td><td>默认数据源(即<code>spring.datasource.dynamic.primary</code>)</td></tr><tr><td>@DS(“name”)</td><td><code>name</code>可以为组别/某个库名(如<code>master</code>)</td></tr></tbody></table><p><strong>@DS 可以注释在方法上或类上，同时存在就近原则，即方法上注解优先于类上注解(如下面代码<code>selectByCondition()</code>函数优先使用<code>slave_1</code>数据源而不是<code>slave</code>数据源)</strong></p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"slave"</span><span class="token punctuation">)</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserServiceImpl</span> <span class="token keyword">implements</span> <span class="token class-name">UserService</span> <span class="token punctuation">&#123;</span>  <span class="token annotation punctuation">@Autowired</span>  <span class="token keyword">private</span> <span class="token class-name">JdbcTemplate</span> jdbcTemplate<span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token class-name">List</span> <span class="token function">selectAll</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span>  jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">"select * from user"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>  <span class="token annotation punctuation">@DS</span><span class="token punctuation">(</span><span class="token string">"slave_1"</span><span class="token punctuation">)</span>  <span class="token keyword">public</span> <span class="token class-name">List</span> <span class="token function">selectByCondition</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span>  jdbcTemplate<span class="token punctuation">.</span><span class="token function">queryForList</span><span class="token punctuation">(</span><span class="token string">"select * from user where age >10"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、demo代码地址"><a href="#三、demo代码地址" class="headerlink" title="三、demo代码地址"></a>三、demo代码地址</h2><p><a href="https://github.com/GaryLeeeee/lee-code-repository/tree/master/lee-db-code/src/main/java/com/garylee/repository/mybatisplus">https://github.com/GaryLeeeee/lee-code-repository/tree/master/lee-db-code/src/main/java/com/garylee/repository/mybatisplus</a></p><h2 id="四、Q-amp-A"><a href="#四、Q-amp-A" class="headerlink" title="四、Q&amp;A"></a>四、Q&amp;A</h2><h3 id="1-如何在控制台打印sql语句？"><a href="#1-如何在控制台打印sql语句？" class="headerlink" title="1.如何在控制台打印sql语句？"></a>1.如何在控制台打印sql语句？</h3><ul><li><p>配置文件为<code>application.yml</code>时</p><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">mybatis-plus</span><span class="token punctuation">:</span>  <span class="token key atrule">configuration</span><span class="token punctuation">:</span>    <span class="token key atrule">log-impl</span><span class="token punctuation">:</span> org.apache.ibatis.logging.stdout.StdOutImpl<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>配置文件为<code>application.properties</code>时</p><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token attr-name">mybatis-plus.configuration.log-impl</span><span class="token punctuation">:</span> <span class="token attr-value">org.apache.ibatis.logging.stdout.StdOutImpl</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ul><h2 id="五、如何分页查询？"><a href="#五、如何分页查询？" class="headerlink" title="五、如何分页查询？"></a>五、如何分页查询？</h2><p><strong>//TODO</strong></p>]]></content>
      
      
      <categories>
          
          <category> Mybatis </category>
          
          <category> Mybatis-Plus </category>
          
          <category> SQL </category>
          
          <category> MySQL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Mybatis </tag>
            
            <tag> Mybatis-Plus </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Http协议常见问题</title>
      <link href="/2021/11/07/Http%E5%8D%8F%E8%AE%AE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/"/>
      <url>/2021/11/07/Http%E5%8D%8F%E8%AE%AE%E5%B8%B8%E8%A7%81%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h3 id="1-参数值传yyyy-MM-dd报错-400"><a href="#1-参数值传yyyy-MM-dd报错-400" class="headerlink" title="1.参数值传yyyy-MM-dd报错(400)"></a>1.参数值传yyyy-MM-dd报错(400)</h3><p><strong>解决方案</strong>：改成yyyy/MM/dd<br><img src="/images/Http%E6%8E%A5%E5%8F%A3%E4%BC%A0%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E9%94%99%E8%AF%AF.png" alt="Http接口传时间格式错误g"><br><img src="/images/Http%E6%8E%A5%E5%8F%A3%E4%BC%A0%E6%97%B6%E9%97%B4%E6%A0%BC%E5%BC%8F%E6%AD%A3%E7%A1%AE.png" alt="Http接口传时间格式正确"></p><h3 id="2-参数值直接传json报错-400"><a href="#2-参数值直接传json报错-400" class="headerlink" title="2.参数值直接传json报错(400)"></a>2.参数值直接传json报错(400)</h3><p><strong>例子</strong>：{“id”:3,”name”:”gary”}<br><strong>原因</strong>：Http Get和Post请求不能传包含<code>&#123;</code>、<code>&#125;</code>等这类特殊字符<br><strong>解决方案</strong>：需要对特殊字符进行转义，如<code>&quot;</code>转成<code>%22</code>,<code>&#123;</code>转成<code>%7b</code>等<br><strong>在线转义</strong>：<a href="http://www.jsons.cn/urlencode/">http://www.jsons.cn/urlencode/</a><br><img src="/images/Http%E6%8E%A5%E5%8F%A3%E5%8F%82%E6%95%B0%E8%BD%AC%E4%B9%89.png" alt="Http接口参数转义"></p>]]></content>
      
      
      <categories>
          
          <category> Http </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Http </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Kafka使用笔记</title>
      <link href="/2021/11/07/Kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/07/Kafka%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="1-本地启动报错”Timeout-expired-while-fetching-topic-metadata”"><a href="#1-本地启动报错”Timeout-expired-while-fetching-topic-metadata”" class="headerlink" title="1.本地启动报错”Timeout expired while fetching topic metadata”"></a>1.本地启动报错”Timeout expired while fetching topic metadata”</h3><p>临时方案：如果不需要测试kafka可以临时注释掉listener的@Component或者@KafkaListener，使其不影响启动</p><h3 id="2-消费者的LAG-消费滞后量，越大说明堆积越严重-一直在增加"><a href="#2-消费者的LAG-消费滞后量，越大说明堆积越严重-一直在增加" class="headerlink" title="2.消费者的LAG(消费滞后量，越大说明堆积越严重)一直在增加"></a>2.消费者的LAG(消费滞后量，越大说明堆积越严重)一直在增加</h3><ul><li><strong>排查</strong>：<ul><li>配置中的<code>enable-auto-commit=false</code>代表消费者不会自动提交ack</li><li>配置中的<code>ack-mode=MANUAL_IMMEDIATE</code>代表每一条mq消费之后需要立即手动提交ack</li></ul></li><li><strong>解决</strong>：<ul><li><strong>方案1</strong>：配置<code>enable-auto-commit</code>改为<code>true</code></li><li><strong>方案2</strong>：消费入参引入<code>Acknowledgment ack</code>并在消费完mq后执行<code>ack.acknowledge()</code></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> Kafka </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Maven使用笔记</title>
      <link href="/2021/11/07/Maven%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/07/Maven%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="常见问题"><a href="#常见问题" class="headerlink" title="常见问题"></a>常见问题</h2><h3 id="长时间卡在”Resolving-Maven-dependencies”"><a href="#长时间卡在”Resolving-Maven-dependencies”" class="headerlink" title="长时间卡在”Resolving Maven dependencies”"></a>长时间卡在”Resolving Maven dependencies”</h3><p>解决方案：<code>Setting</code>-&gt;<code>Build,Execution,Deployment</code>-&gt;<code>Build Tools</code>-&gt;<code>Maven</code>-&gt;<code>Importing</code>-&gt;<code>VM options for importer</code>改为<code>-Xms1024m -Xmx2048m</code><br><img src="/images/maven%E9%95%BF%E6%97%B6%E9%97%B4%E5%8D%A1%E4%BD%8Fresolving.png" alt="maven长时间卡住resolving"></p>]]></content>
      
      
      <categories>
          
          <category> Maven </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ使用笔记</title>
      <link href="/2021/11/06/RabbitMQ%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/06/RabbitMQ%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、依赖"><a href="#一、依赖" class="headerlink" title="一、依赖"></a>一、依赖</h2><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>org.springframework.boot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-boot-starter-amqp<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="二、配置"><a href="#二、配置" class="headerlink" title="二、配置"></a>二、配置</h2><pre class="line-numbers language-yaml" data-language="yaml"><code class="language-yaml"><span class="token key atrule">spring</span><span class="token punctuation">:</span>  <span class="token key atrule">lee-rabbitmq</span><span class="token punctuation">:</span>    <span class="token key atrule">addresses</span><span class="token punctuation">:</span> localhost<span class="token punctuation">:</span><span class="token number">5672</span>    <span class="token key atrule">username</span><span class="token punctuation">:</span> test_username    <span class="token key atrule">password</span><span class="token punctuation">:</span> test_password    <span class="token key atrule">virtual-host</span><span class="token punctuation">:</span> /<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">interface</span> <span class="token class-name">RabbitMqConstant</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">String</span> EXCHANGE <span class="token operator">=</span> <span class="token string">"LEE_EXCHANGE"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> ROUTING_KEY <span class="token operator">=</span> <span class="token string">"LEE_ROUTING_KEY"</span><span class="token punctuation">;</span>    <span class="token class-name">String</span> QUEUE <span class="token operator">=</span> <span class="token string">"LEE_QUEUE"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMqConfiguration</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"leeConnectionFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">ConnectionFactory</span> <span class="token function">leeConnectionFactory</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.lee-rabbitmq.addresses&#125;"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> addresses<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.lee-rabbitmq.username&#125;"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> username<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.lee-rabbitmq.password&#125;"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> password<span class="token punctuation">,</span>            <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"$&#123;spring.lee-rabbitmq.virtual-host&#125;"</span><span class="token punctuation">)</span> <span class="token class-name">String</span> virtualHost    <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">CachingConnectionFactory</span> connectionFactory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">CachingConnectionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setAddresses</span><span class="token punctuation">(</span>addresses<span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">;</span>        connectionFactory<span class="token punctuation">.</span><span class="token function">setVirtualHost</span><span class="token punctuation">(</span>virtualHost<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> connectionFactory<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"leeRabbitTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">RabbitTemplate</span> <span class="token function">leeRabbitTemplate</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"leeConnectionFactory"</span><span class="token punctuation">)</span> <span class="token class-name">ConnectionFactory</span> connectionFactory    <span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token class-name">RabbitTemplate</span> rabbitTemplate <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">RabbitTemplate</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"leeQueue"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">Queue</span> <span class="token function">leeQueue</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">Queue</span><span class="token punctuation">(</span><span class="token class-name">RabbitMqConstant</span><span class="token punctuation">.</span>QUEUE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"leeExchange"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">TopicExchange</span> <span class="token function">leeExchange</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">TopicExchange</span><span class="token punctuation">(</span><span class="token class-name">RabbitMqConstant</span><span class="token punctuation">.</span>EXCHANGE<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token class-name">Binding</span> <span class="token function">binding</span><span class="token punctuation">(</span><span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"leeQueue"</span><span class="token punctuation">)</span> <span class="token class-name">Queue</span> leeQueue<span class="token punctuation">,</span> <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"leeExchange"</span><span class="token punctuation">)</span> <span class="token class-name">TopicExchange</span> leeExchange<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token class-name">BindingBuilder</span><span class="token punctuation">.</span><span class="token function">bind</span><span class="token punctuation">(</span>leeQueue<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">to</span><span class="token punctuation">(</span>leeExchange<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token keyword">with</span><span class="token punctuation">(</span><span class="token class-name">RabbitMqConstant</span><span class="token punctuation">.</span>ROUTING_KEY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/**     * 消费者配置     */</span>    <span class="token annotation punctuation">@Bean</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"leeFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">SimpleRabbitListenerContainerFactory</span> <span class="token function">leeFactory</span><span class="token punctuation">(</span>            <span class="token annotation punctuation">@Qualifier</span><span class="token punctuation">(</span><span class="token string">"leeConnectionFactory"</span><span class="token punctuation">)</span> <span class="token class-name">ConnectionFactory</span> connectionFactory    <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SimpleRabbitListenerContainerFactory</span> factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleRabbitListenerContainerFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        factory<span class="token punctuation">.</span><span class="token function">setConnectionFactory</span><span class="token punctuation">(</span>connectionFactory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> factory<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三、发送"><a href="#三、发送" class="headerlink" title="三、发送"></a>三、发送</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Data</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> id<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">private</span> <span class="token keyword">int</span> age<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Service</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMqProvider</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Resource</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"leeRabbitTemplate"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">RabbitTemplate</span> rabbitTemplate<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">send</span><span class="token punctuation">(</span><span class="token class-name">User</span> user<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        rabbitTemplate<span class="token punctuation">.</span><span class="token function">convertAndSend</span><span class="token punctuation">(</span><span class="token class-name">RabbitMqConstant</span><span class="token punctuation">.</span>EXCHANGE<span class="token punctuation">,</span> <span class="token class-name">RabbitMqConstant</span><span class="token punctuation">.</span>ROUTING_KEY<span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发送结果<br><img src="/images/RabbitMQ%E5%88%9B%E5%BB%BAExchange.png" alt="RabbitMQ创建Exchange"><br><img src="/images/RabbitMQ%E5%88%9B%E5%BB%BAQueue.png" alt="RabbitMQ创建Queue"></p><h2 id="四、接收"><a href="#四、接收" class="headerlink" title="四、接收"></a>四、接收</h2><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Slf4j</span><span class="token annotation punctuation">@Component</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">RabbitMqConsumer</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@RabbitListener</span><span class="token punctuation">(</span>queues <span class="token operator">=</span> <span class="token class-name">RabbitMqConstant</span><span class="token punctuation">.</span>QUEUE<span class="token punctuation">,</span> containerFactory <span class="token operator">=</span> <span class="token string">"leeFactory"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">process</span><span class="token punctuation">(</span><span class="token class-name">Channel</span> channel<span class="token punctuation">,</span> <span class="token class-name">Message</span> message<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[消费MQ] message:&#123;&#125;"</span><span class="token punctuation">,</span>message<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">String</span> messageVal <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">String</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getBody</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token class-name">Charset</span><span class="token punctuation">.</span><span class="token function">defaultCharset</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">name</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token class-name">User</span> user <span class="token operator">=</span> <span class="token class-name">JSONObject</span><span class="token punctuation">.</span><span class="token function">parseObject</span><span class="token punctuation">(</span>messageVal<span class="token punctuation">,</span> <span class="token class-name">User</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            log<span class="token punctuation">.</span><span class="token function">info</span><span class="token punctuation">(</span><span class="token string">"[消费MQ] user:&#123;&#125;"</span><span class="token punctuation">,</span> user<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[消费MQ]消费异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>            channel<span class="token punctuation">.</span><span class="token function">basicAck</span><span class="token punctuation">(</span>message<span class="token punctuation">.</span><span class="token function">getMessageProperties</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getDeliveryTag</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">false</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">IOException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            log<span class="token punctuation">.</span><span class="token function">error</span><span class="token punctuation">(</span><span class="token string">"[消费MQ]ACK异常"</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="五、相关代码地址"><a href="#五、相关代码地址" class="headerlink" title="五、相关代码地址"></a>五、相关代码地址</h2><p><a href="https://github.com/GaryLeeeee/lee-code-repository/tree/master/lee-mq-code/src/main/java/com/garylee/mq/rabbitmq">https://github.com/GaryLeeeee/lee-code-repository/tree/master/lee-mq-code/src/main/java/com/garylee/mq/rabbitmq</a></p><h2 id="六、遇到的问题"><a href="#六、遇到的问题" class="headerlink" title="六、遇到的问题"></a>六、遇到的问题</h2><h3 id="1-Caused-by-java-lang-ClassNotFoundException-com-fasterxml-jackson-databind-ObjectMapper"><a href="#1-Caused-by-java-lang-ClassNotFoundException-com-fasterxml-jackson-databind-ObjectMapper" class="headerlink" title="1.Caused by: java.lang.ClassNotFoundException: com.fasterxml.jackson.databind.ObjectMapper"></a>1.Caused by: java.lang.ClassNotFoundException: com.fasterxml.jackson.databind.ObjectMapper</h3><p>解决方案：添加依赖</p><pre class="line-numbers language-xml" data-language="xml"><code class="language-xml"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.fasterxml.jackson.core<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>jackson-databind<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-Caused-by-java-net-ConnectException-Connection-refused-connect"><a href="#2-Caused-by-java-net-ConnectException-Connection-refused-connect" class="headerlink" title="2.Caused by: java.net.ConnectException: Connection refused: connect"></a>2.Caused by: java.net.ConnectException: Connection refused: connect</h3><p>解决方案：本地RabbitMQ的连接端口默认是5672，不是15672(后台管理页面端口)</p><h3 id="3-Caused-by-com-rabbitmq-client-AuthenticationFailureException-ACCESS-REFUSED-Login-was-refused-using-authentication-mechanism-PLAIN-For-details-see-the-broker-logfile"><a href="#3-Caused-by-com-rabbitmq-client-AuthenticationFailureException-ACCESS-REFUSED-Login-was-refused-using-authentication-mechanism-PLAIN-For-details-see-the-broker-logfile" class="headerlink" title="3.Caused by: com.rabbitmq.client.AuthenticationFailureException: ACCESS_REFUSED - Login was refused using authentication mechanism PLAIN. For details see the broker logfile."></a>3.Caused by: com.rabbitmq.client.AuthenticationFailureException: ACCESS_REFUSED - Login was refused using authentication mechanism PLAIN. For details see the broker logfile.</h3><p>原因：guest账号出于安全考虑，不允许直接连接使用<br>解决方案：新增一个账号，并设置权限<br><img src="/images/RabbitMQ%E6%B7%BB%E5%8A%A0%E8%B4%A6%E5%8F%B7.png" alt="RabbitMQ添加账号"><br><img src="/images/RabbitMQ%E8%B4%A6%E5%8F%B7%E6%B7%BB%E5%8A%A0%E6%9D%83%E9%99%90.png" alt="RabbitMQ账号添加权限"></p>]]></content>
      
      
      <categories>
          
          <category> RabbitMQ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ安装笔记</title>
      <link href="/2021/11/05/RabbitMQ%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/11/05/RabbitMQ%E5%AE%89%E8%A3%85%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="windows10安装"><a href="#windows10安装" class="headerlink" title="windows10安装"></a>windows10安装</h1><h2 id="下载并安装erlang"><a href="#下载并安装erlang" class="headerlink" title="下载并安装erlang"></a>下载并安装erlang</h2><ul><li>原因：RabbitMQ服务端代码是使用并发式语言Erlang编写的，安装Rabbit MQ的前提是安装Erlang。</li><li>下载链接：<a href="https://www.erlang.org/downloads">https://www.erlang.org/downloads</a></li></ul><p><img src="/images/erlang%E4%B8%8B%E8%BD%BD.png" alt="erlang下载"></p><ul><li>安装</li><li>配置环境变量<ul><li>第一步：此电脑-&gt;鼠标邮件”属性”-&gt;高级系统设置-&gt;环境变量-&gt;系统变量”新建”<ul><li>变量名：ERLANG_HOME</li><li>变量值：erlang安装目录(我的是<code>G:\software\erlang</code>)<br><img src="/images/erlang%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F.png" alt="erlang环境变量"></li></ul></li><li>第二步：系统变量双击”path”-&gt;新建-&gt;添加<code>%ERLANG_HOME%\bin</code><br><img src="/images/erlang%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F2.png" alt="erlang环境变量2"><br><img src="/images/erlang%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F3.png" alt="erlang环境变量3"></li></ul></li><li>win+R-&gt;输入cmd-&gt;输入erl，显示版本号就说明安装成功了<br><img src="/images/erlang%E6%9F%A5%E7%9C%8B%E7%89%88%E6%9C%AC.png" alt="erlang查看版本"></li></ul><h2 id="下载并安装RabbitMQ"><a href="#下载并安装RabbitMQ" class="headerlink" title="下载并安装RabbitMQ"></a>下载并安装RabbitMQ</h2><ul><li>下载地址：<a href="http://www.rabbitmq.com/download.html">http://www.rabbitmq.com/download.html</a><br><img src="/images/RabbitMQ%E4%B8%8B%E8%BD%BD.png" alt="RabbitMQ下载"></li><li>win+R-&gt;输入cmd-&gt;cd到RabbitMQ的sbin目录-&gt;输入<code>rabbitmq-plugins enable rabbitmq_management</code><br><img src="/images/RabbitMQ%E5%AE%89%E8%A3%85.png" alt="RabbitMQ安装">  </li><li>打开sbin目录-&gt;双击<code>rabbitmq-server.bat</code><br><img src="/images/RabbitMQ%E5%90%AF%E5%8A%A8.png" alt="RabbitMQ启动"></li><li>过一会出现这个页面，说明启动成功了，这时候可访问<code>http://localhost:15672</code><br><img src="/images/RabbitMQ%E5%90%AF%E5%8A%A8%E6%88%90%E5%8A%9F.png" alt="RabbitMQ启动成功"></li><li>这是RabbitMQ的后台，username和password默认是<code>guest</code><br><img src="/images/RabbitMQ%E5%90%8E%E5%8F%B0.png" alt="RabbitMQ后台"></li><li>end</li></ul>]]></content>
      
      
      <categories>
          
          <category> 工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> RabbitMQ </tag>
            
            <tag> 工具安装 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8s学习笔记</title>
      <link href="/2021/08/12/k8s%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/08/12/k8s%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="容器技术概念入门篇"><a href="#容器技术概念入门篇" class="headerlink" title="容器技术概念入门篇"></a>容器技术概念入门篇</h2><h3 id="05-白话容器基础（一）：从进程说开去"><a href="#05-白话容器基础（一）：从进程说开去" class="headerlink" title="05 | 白话容器基础（一）：从进程说开去"></a>05 | 白话容器基础（一）：从进程说开去</h3><ul><li><strong>容器其实是一种沙盒技术。</strong> 顾名思义，沙盒就是能够像一个集装箱一样，把你的应用“装”起来的技术。这样，应用与应用之间，就因为有了<code>边界</code>而不至于相互干扰；而被装进集装箱的应用，也可以被方便地搬来搬去。</li><li>容器本身没有价值，有价值的是”<strong>容器编排</strong>“</li><li><strong>镜像</strong>。比如我们要做一个加法程序，由于计算机只认识0和1，所以无论用哪种语音编写这段代码，最后都需要翻译成<code>二进制文件</code>，才能在计算机操作系统跑起来。为了让这些代码正常运行，还需要提供<code>数据</code>，比如这个加法程序，将<code>数据</code>和代码本身的<code>二进制文件</code>，放在磁盘上，就是平常我们所说的程序，也叫代码的<code>可执行镜像</code>  </li><li><strong>进程</strong>。对于进程来说，它的<code>静态表现</code>就是程序，平常都安安静静地待在磁盘上；而一旦运行起来，它就变成了计算机里的数据和状态的综合，这就是它的<code>动态表现</code>。<ul><li>输入数据</li><li>寄存器的值变化</li><li>堆桟中的指令变化</li><li>被打开的文件</li><li>各种设备的状态信息变化  </li></ul></li><li><strong>容器技术的核心功能</strong>，就是通过约束和修改进程的<code>动态表现</code>，从而为其创造出一个<code>边界</code><ul><li><code>Ggroups技术</code>是用来制造约束的主要手段</li><li><code>Namespace技术</code>则是用来修改进程视图的主要方法  </li></ul></li><li>跟真实存在的<code>虚拟机</code>不同，在使用docker的时候并密友一个真正的”docker容器”运行在宿主机里面。docker项目帮助用户启动的还是原来的引用进程，只不过在创建这些进程时，docker为它们加上了各种各样的<code>Namespace</code>参数<ul><li>这时这些进程就会觉得自己是各自PID Namespace里的第1号进程</li><li>只能看到各自Mount Namespace里挂载的目录和文件</li><li>只能访问到各自Network Namespace里的网络设备</li><li>彷佛运行在一个个”容器”里面，与世隔绝</li></ul></li><li>小结<ul><li><strong>程序</strong>：静态状态是文件，动态状态是进程</li><li><code>Cgroups</code>限制资源，<code>Namespace</code>隔离资源</li><li><strong>容器</strong>：其实就是操作系统在启动进程时通过<strong>设置</strong>一些参数实现了<strong>隔离</strong>不相关资源后的一个特殊<strong>进程</strong><ul><li>实际上没有一个真正的容器运行在宿主机里面(只是Namespace造成了这一个个进程的错觉)</li></ul></li></ul></li></ul><h3 id="06-白话容器基础（二）：隔离与限制"><a href="#06-白话容器基础（二）：隔离与限制" class="headerlink" title="06 | 白话容器基础（二）：隔离与限制"></a>06 | 白话容器基础（二）：隔离与限制</h3><ul><li><code>Namespace</code>技术实际上修改了应用进程看待整个计算机”视图”，即它的”视线”被操作系统做了限制，只能”看到”某些指定的内容。</li><li><code>虚拟机</code>和<code>容器</code>的区别<ul><li>虚拟机是真实存在的(需要有一套完成的GuestOS造成资源消耗约如100~200MB)，而容器只是一个宿主机上的普通进程(占用资源忽略不计)</li><li>虚拟机对宿主机操作系统调用会有性能损耗(尤其是计算资源、网络和磁盘I/O)，而容器并不存在性能损耗</li></ul></li><li>既然容器是宿主机上一个特殊进程，那么多个容器之间用的是同一个宿主机的操作系统内核(共享内核导致隔离不彻底)</li><li><code>Cgroups</code>全称是<code>Control Group</code>，用来限制一个进程组能够使用的资源上限，包括CPU、内存、磁盘、网络带宽等等</li><li>容器是一个”单进程”模型</li></ul><ul><li>小结<ul><li><code>虚拟机</code>需要借助<code>GuestOS</code>才能运行应用，<code>容器</code>实际上就是OS的进程，一组文件和运行环境，更加简单。</li><li>虚拟化较容器化有更大的资源损耗</li><li>容器相较于虚拟机最大的优势是<code>敏捷</code>和<code>高性能</code></li><li>多个容器共享内核导致隔离不彻底所以引入了<code>Cgroups</code>限制资源</li><li>具体<code>Cgroups</code>相关指令操作参考相关文档…</li><li>一个正在运行的docker容器，其实就是启用了多个<code>Namespace</code>的应用进程，而这个进程能够使用的资源量，则受Cgroups配置的限制</li><li><code>Cgroups</code>问题：如果在容器中执行top指令，将会显示宿主机的CPU和内存数据，而不是当前容器的数据(原因是/proc文件系统并不知道用户通过<code>Cgroups</code>对这个容器做了怎样的资源限制)<ul><li>lxcfs可解决该问题</li></ul></li></ul></li></ul><h3 id="07-白话容器基础（三）：深入理解容器镜像"><a href="#07-白话容器基础（三）：深入理解容器镜像" class="headerlink" title="07 | 白话容器基础（三）：深入理解容器镜像"></a>07 | 白话容器基础（三）：深入理解容器镜像</h3><blockquote><p>1.容器里的进程看到的文件系统是什么样子的呢？<br>2.用户希望每次创建一个新容器时都是看到一个独立的隔离环境</p></blockquote><ul><li><p>即使开启了<code>Mount Namespace</code>，容器进程看到的文件系统也跟宿主机完全一致</p><ul><li>原因：<code>Mount Namespace</code>修改的是容器进程对于文件系统”挂载点”的认知</li><li>所以：只有”挂载”后，进程的视图才会被改变。而在此之前，新创建的容器会直接继承宿主机的各个挂载点</li><li>修改前：继承宿主机的挂载点</li><li>修改后：可以修改挂载点</li></ul></li><li><p>可以在容器进程启动之前，让容器以<code>tmpfs(内存盘)</code>格式，重新挂载<code>/xxx</code>目录</p></li><li><p><code>Mount Namespace</code>只有挂载(mount)之后才能生效</p></li><li><p>我们一般会在容器的根目录下挂载一个完成操作系统的文件系统，比如<code>Ubuntu 16.04</code>的ISO。这样容器启动之后，我们在容器里通过执行<code>ls /</code>查看根目录下的内容，就是<code>Ubuntu 16.4</code>的所有目录和文件</p><ul><li><code>容器镜像</code>：挂载在容器根目录上，用来为容器进程提供隔离后执行环境的文件系统。也叫<code>rootfs</code>(根文件系统)</li><li><code>rootfs</code>只是一个操作系统包含的文件、配置和目录，并不包括操作系统内核(Linux中这两部分是分开存放的，操作系统只有在开机启动时才会加载指定版本的内核镜像)</li></ul></li><li><p>Docker项目最核心原理就是为待创建的用户进程</p><ul><li>1.启用<code>Linux Namespace</code>配置</li><li>2.设置指定的<code>Cgroups</code>参数</li><li>3.切换进程的根目录<code>chroot</code>(Change Root) //会优先使用<code>pivot_root</code>系统调用(如果不支持采用<code>chroot</code>)</li></ul></li><li><p>同一台机器上的所有容器，都共享宿主机操作系统的内核</p><ul><li>意味着是全局变量，牵一发而动全身</li><li>相比<code>虚拟机</code>的主要缺陷之一：<code>虚拟机</code>拥有一个完整的<code>Guest OS</code>(不存在影响其他应用)</li></ul></li><li><p>一致性</p><ul><li>镜像打包后，无论在本地、云端等地方，只要解压打包好的容器镜像，那么这个应用所需要的完整的执行环境就会被重现出来</li><li>打通了应用在本地开发和远端执行环境之间难以逾越的鸿沟</li></ul></li></ul><blockquote><p>1.但是否每开发/升级一个应用，都需要重复制作一次rootfs吗<br>2.比如我在rootfs安装了Java环境来部署我的Java应用，这时候其他同事也需要部署Java应用，那显然希望是能直接用我安装了Java环境的rootfs，而不是重复这个流程</p></blockquote><ul><li><p>层(layer)</p><ul><li>用户制作镜像的每一步操作，都会生成一个层，也就是一个增量<code>rootfs</code></li><li><code>UnionFS</code>：目的是将多个不同位置的目录联合挂载(union mount)到同一个目录下。<br><img src="https://lee-blog-picture.oss-cn-shenzhen.aliyuncs.com/before-union-mount.png" alt="挂载前"><br>执行<br><code>mkdir C</code><br><code>mount -t aufs -o dirs=./A:./B none ./C</code><br><img src="https://lee-blog-picture.oss-cn-shenzhen.aliyuncs.com/after-union-mount.png" alt="挂载后"><br>可以发现原来A目录下有a、x，B目录下有b、x，合并后的C中只有a、b、x(x被去重合并了)</li><li>层分为<code>只读层</code>+<code>可读写层</code>+<code>Init层</code></li></ul></li><li><p>总结</p><ul><li><code>rootfs</code>是一个操作系统的所有文件和目录，并不包含内核。而传统虚拟机的镜像大多是一个磁盘的”快照”，磁盘有多大，镜像就至少有多大</li><li>通过结合<code>Mount Namespace</code>和<code>rootfs</code>，容器就能为进程构建一个完善的文件隔离环境(依赖<code>chroot</code>和<code>pivot_root</code>这两个系统调用切换根目录的能力)  </li><li>docker公司提出了使用多个增量<code>rootfs</code>联合挂载一个完整<code>rootfs</code>的方案，这就是容器镜像中“<code>层</code>”的概念<ul><li>共享层的存在，使得所有这些容器镜像需要的总空间，也比每个镜像的综合要小</li></ul></li><li><code>强一致性</code>：一旦一个镜像被发布，那么任何地方下载这个镜像得到的内容都完全一致，可以完全复现这个镜像制作者当初的完整环境</li><li>容器镜像将会变成未来软件的主流发布方式</li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> k8s </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>代码库</title>
      <link href="/2021/08/07/%E4%BB%A3%E7%A0%81%E5%BA%93/"/>
      <url>/2021/08/07/%E4%BB%A3%E7%A0%81%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<h2 id="多线程执行器"><a href="#多线程执行器" class="headerlink" title="多线程执行器"></a>多线程执行器</h2><p>1.具体代码<a href="https://github.com/GaryLeeeee/lee-code-repository/tree/master/lee-common-code/src/test/java/com/garylee/repository/thread">点此跳转</a><br>2.相关笔记<a href="https://garyleeeee.github.io/2021/07/28/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/">点此跳转</a><br>3.代码介绍&amp;使用</p><ul><li>封装了一个可指定线程名的方法</li><li>可通过<code>ThreadExecutor.execute(()-&gt;&#123;do sth.&#125;);</code>异步执行逻辑</li><li>可通过<code>Future&lt;V&gt; future=ThreadExecutor.submit(()-&gt;&#123;do sth.&#125;);</code>提交可返回结果的执行，并通过<code>future.get()</code>获取返回结果(get会等待线程执行完逻辑)</li><li>特殊场景独立线程池可通过<code>ThreadExecutor.createThreadPoolExecutor</code>创建</li></ul><p>4.疑问点</p><ul><li>为什么线程池大小指定为2n(n为系统cpu数)？<ul><li>CPU密集型任务一般用CPU核心数+1</li><li>IO密集型任务一般用2*CPU核心数</li></ul></li></ul><h2 id="MyBatis-Plus"><a href="#MyBatis-Plus" class="headerlink" title="MyBatis-Plus"></a>MyBatis-Plus</h2><p>1.具体代码<a href="https://github.com/GaryLeeeee/lee-code-repository/tree/master/lee-db-code/src/main/java/com/garylee/repository/mybatisplus">点此跳转</a><br>2.使用步骤</p><ul><li>引入<code>mybatis-plus-boot-starter</code>依赖</li><li><code>application.yml</code>加<code>mybatis-plus</code>相关配置</li><li>实体类加<code>@TableName(&quot;xxx&quot;)</code>注解(对应mysql表名)</li><li><code>mapper</code>层继承<code>BaseMapper</code>接口用于提供db操作方法(CRUD)</li><li><code>service</code>层继承<code>ServiceImpl</code>类用于提供业务操作方法(CRUD、分页等)</li><li>具体CRUD可参考<code>1.具体代码</code></li></ul><p>3.优点</p><ul><li>不用写复杂xml文件，容易出错</li><li>封装了简易的API接口(如CRUD、分页等)</li></ul><h2 id="Guava-Cache"><a href="#Guava-Cache" class="headerlink" title="Guava Cache"></a>Guava Cache</h2><p>1.具体代码<a href="https://github.com/GaryLeeeee/lee-code-repository/blob/master/lee-common-code/src/test/java/com/garylee/repository/loadingcache/LoadingCacheServiceTest.java">点击跳转</a><br>2.代码介绍&amp;使用</p><ul><li><code>refreshAfterWrite</code>：第一次请求会load一遍缓存，并在设置时间内读到的都是缓存的旧值。当设置时间到了，下次请求来了会有进程去异步load一遍新的，新的结果返回之类get读到的都是旧值</li><li><code>expireAfterWrite</code>：设置缓存在指定时间内如果没有更新则会移除(一般与<code>refreshAfterWrite</code>搭配使用)</li></ul><p>3.注意点</p><ul><li>报错CacheLoader returned null for key怎么办？<ul><li><code>load()</code>方法不允许返回null，如需要需包一层<code>Optional</code></li><li>如原来的<code>String load(String key)</code>改为<code>Optional&lt;String&gt; load(String key)</code></li><li>返回的<code>Optional</code>对象通过调用<code>orElse(other)</code>方法(如果为null则返回other)获取到实际对象</li></ul></li></ul><h2 id="Redisson"><a href="#Redisson" class="headerlink" title="Redisson"></a>Redisson</h2><p>1.具体代码<a href="https://github.com/GaryLeeeee/lee-code-repository/blob/master/lee-common-code/src/main/java/com/garylee/repository/lock/RedissonLockUtil.java">点击跳转</a><br>2.介绍</p><ul><li><code>redisson</code>实现了分布式和可扩展的java数据结构</li><li>需要配合<code>redis</code>使用，host为localhost时需启动<code>redis server</code></li></ul><p>3.使用步骤</p><ul><li>添加<code>redisson</code>依赖</li><li>先通过<code>RedissLockUtil.getRedissonLock()</code>拿到分布式锁<code>DistributedLocker</code></li><li>然后通过<code>tryLock()</code>尝试拿到锁</li><li>最后在<code>finally</code>代码块执行<code>unlock()</code>即可</li></ul>]]></content>
      
      
      <categories>
          
          <category> 仓库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 代码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试指南</title>
      <link href="/2021/08/03/%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/"/>
      <url>/2021/08/03/%E9%9D%A2%E8%AF%95%E6%8C%87%E5%8D%97/</url>
      
        <content type="html"><![CDATA[<h1 id="面试指南"><a href="#面试指南" class="headerlink" title="面试指南"></a>面试指南</h1><h2 id="技术面可能会被问到的问题"><a href="#技术面可能会被问到的问题" class="headerlink" title="技术面可能会被问到的问题"></a>技术面可能会被问到的问题</h2><p><img src="https://lee-blog-picture.oss-cn-shenzhen.aliyuncs.com/%E6%8A%80%E6%9C%AF%E9%9D%A2%E9%97%AE%E9%A2%98%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE.jpg" alt="技术面问题思维导图"></p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>面试题(Java)</title>
      <link href="/2021/08/03/%E9%9D%A2%E8%AF%95%E9%A2%98-Java/"/>
      <url>/2021/08/03/%E9%9D%A2%E8%AF%95%E9%A2%98-Java/</url>
      
        <content type="html"><![CDATA[<h1 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h1><h2 id="一、面向对象和面向过程的区别"><a href="#一、面向对象和面向过程的区别" class="headerlink" title="一、面向对象和面向过程的区别"></a>一、面向对象和面向过程的区别</h2><ul><li>面向过程<ul><li>性能比<code>面向对象</code>高</li><li>当性能最重要时，比如嵌入式开发、Linux/Unix等一般采用<code>面向过程</code>开发</li></ul></li><li>面向对象<ul><li>性能比<code>面向过程</code>低</li><li>易维护、易复用、易扩展</li><li>特性：<code>封装</code>、<code>继承</code>、<code>多态</code></li><li>可以设计低耦合系统，使系统更加灵活、更加易于维护</li></ul></li></ul><p>参见 issue :<a href="https://github.com/Snailclimb/JavaGuide/issues/431">面向过程 ：面向过程性能比面向对象高？？</a></p><blockquote><p>这个并不是根本原因，面向过程也需要分配内存，计算内存偏移量，Java性能差的主要原因并不是因为它是面向对象语音，而是Java是半编译语言，最终的执行代码并不是可以直接被CPU执行的二进制机械吗。<br>而面向过程大多都是直接编译成机械码在电脑上执行，并且其他一些面向过程的脚本语言性能也并不一定比Java好。</p></blockquote><h2 id="二、Java语言有哪些特点"><a href="#二、Java语言有哪些特点" class="headerlink" title="二、Java语言有哪些特点"></a>二、Java语言有哪些特点</h2><ul><li>简单易学</li><li>面向对象(封装、继承、多态)</li><li>平台无关性(Java虚拟机实现平台无关性)</li><li>可靠性</li><li>安全性</li><li>支持多线程(C++语言没有内置的多线程机制，因为必须调用操作系统的多线程功能来进行多线程程序设计)<br><code>C++11开始就引入了多线程库</code></li><li>支持网络编程并且很方便</li><li>编译与解释并存</li></ul><h2 id="三、JDK和JRE"><a href="#三、JDK和JRE" class="headerlink" title="三、JDK和JRE"></a>三、JDK和JRE</h2><h3 id="1-JDK"><a href="#1-JDK" class="headerlink" title="1.JDK"></a>1.JDK</h3><ul><li><code>JDK</code>是<code>Java Development Kit</code>的缩写，它是功能齐全的Java SDK。</li><li>拥有<code>JRE</code>所拥有的一切</li><li>有编译器<code>javac</code></li><li>允许创建和编译程序</li></ul><h3 id="2-JRE"><a href="#2-JRE" class="headerlink" title="2.JRE"></a>2.JRE</h3><ul><li><code>JDK</code>是<code>Java Runtime Environment</code>的缩写，也就是Java运行时环境</li><li>包含Java虚拟机(<code>JVM</code>)，Java类库，Java命令等</li><li>不允许创建新程序</li></ul><h3 id="3-用途"><a href="#3-用途" class="headerlink" title="3.用途"></a>3.用途</h3><ul><li>如果只是想运行<code>Java</code>程序，只需要安装<code>JRE</code></li><li>如果需要进行<code>Java</code>编程方面工作，就需要安装<code>JDK</code></li><li>…</li></ul><h2 id="四、Java和C-的区别？"><a href="#四、Java和C-的区别？" class="headerlink" title="四、Java和C++的区别？"></a>四、Java和C++的区别？</h2><ul><li><strong>特点</strong>：都是<code>面向对象</code>语言，都支持<code>封装</code>、<code>继承</code>和<code>多态</code></li><li><strong>安全</strong>：<code>Java</code>不提供<code>指针</code>来直接访问内存，程序内存更加安全</li><li><strong>继承</strong>：<code>Java</code>类是单继承的(接口可以多继承)，C++支持多重继承</li><li><strong>内存</strong>：<code>Java</code>有自动内存管理机制，不需要程序员手动释放无用内存</li><li><strong>结束符</strong>：C语言字符串或字符数组最后会有一个额外的字符’\0’表示结束，而Java语言没有结束符的概念。(具体<a href="https://blog.csdn.net/sszgg2006/article/details/49148189">参考这里</a>)</li></ul><h2 id="五、部分简单总结"><a href="#五、部分简单总结" class="headerlink" title="五、部分简单总结"></a>五、部分简单总结</h2><ul><li>构造器<code>Constructor</code>不能被重写(<code>Override</code>)，但是可以被重载(<code>Overload</code>)</li><li>重载(<code>Overload</code>)是方法名相同，参数类型不同的实现。重写(<code>Override</code>)是子类覆盖父类方法的实现。方法的重写要遵循“两同两小一大”<ul><li>“两同”即方法名相同、形参列表相同；</li><li>“两小”指的是子类方法返回值类型应比父类方法返回值类型更小或相等，子类方法声明抛出的异常类应比父类方法声明抛出的异常类更小或相等；</li><li>“一大”指的是子类方法的访问权限应比父类方法的访问权限更大或相等。</li></ul></li><li></li></ul><p>。。。</p>]]></content>
      
      
      <categories>
          
          <category> 面试 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>高可用学习笔记(科普向)</title>
      <link href="/2021/08/01/%E9%AB%98%E5%8F%AF%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%A7%91%E6%99%AE%E5%90%91/"/>
      <url>/2021/08/01/%E9%AB%98%E5%8F%AF%E7%94%A8%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0-%E7%A7%91%E6%99%AE%E5%90%91/</url>
      
        <content type="html"><![CDATA[<h2 id="什么是高可用"><a href="#什么是高可用" class="headerlink" title="什么是高可用"></a>什么是高可用</h2><ul><li>高可用描述的是一个系统在大部分时间都是可用的，可以为我们提供服务的。</li><li>高可用代表系统即使在发生硬件故障或者系统升级的时候，服务仍然是可用的。</li></ul><h2 id="相关概念"><a href="#相关概念" class="headerlink" title="相关概念"></a>相关概念</h2><h3 id="限流"><a href="#限流" class="headerlink" title="限流"></a>限流</h3><ul><li><code>限流</code>是从用户访问压力的角度来考虑如何应对系统故障。</li><li><code>限流</code>是为了对服务端的接口接受请求的频率进行限制，防止服务挂掉。比如某一个接口的请求限制为100个每秒，对超过限制的请求放弃处理或者放到队列中等待处理。</li><li><code>限流</code>可以有效应对突发请求过多。</li></ul><h3 id="降级"><a href="#降级" class="headerlink" title="降级"></a>降级</h3><ul><li><code>降级</code>是从系统功能优先级的角度考虑如何应对系统故障。</li><li><code>服务降级</code>指的是当服务器压力剧增的情况下，根据当前业务情况及流量对一些服务和页面有策略的降级，以此释放服务器资源以保证核心任务的正常运行。</li></ul><h3 id="熔断"><a href="#熔断" class="headerlink" title="熔断"></a>熔断</h3><ul><li><code>熔断</code>和<code>降级</code>是两个比较容易混淆的概念，两者的含义并不相同。</li><li><code>降级</code>的目的在于应对系统自身的故障，而<code>熔断</code>的目的在于应对当前系统依赖的外部系统或者第三方系统的故障。</li></ul><h3 id="排队"><a href="#排队" class="headerlink" title="排队"></a>排队</h3><ul><li>另类的一种<code>限流</code>，类比于现实世界的排队。比如LOL一有大活动就需要排队(很久)才能进入游戏。</li></ul><h3 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h3><ul><li>相同的服务部署多份，避免<code>单点</code>故障。</li></ul><h3 id="超时和重试机制"><a href="#超时和重试机制" class="headerlink" title="超时和重试机制"></a>超时和重试机制</h3><ul><li>一旦用户的请求超过某个时间得不到响应就结束此次请求并抛出异常。</li><li>如果不进行<code>超时设置</code>可能会导致请求响应速度慢，甚至导致请求堆积进而让系统无法再处理请求。</li><li><code>重试</code>次数一般设为3次，再多次<code>重试</code>并没有好处，反而会加重服务器压力(部分场景使用失败重试机制会不太合适)</li></ul><h2 id="现阶段总结"><a href="#现阶段总结" class="headerlink" title="现阶段总结"></a>现阶段总结</h2><ul><li>没有做过<code>限流</code></li><li>了解但没实际应用过<code>降级</code></li><li>了解但没实际应用过<code>熔断</code></li><li>目前项目在<code>集群</code>方面是做到多机房多实例</li><li>目前项目在<code>超时/重试</code>方面有对请求做重试(一般是3次)，大部分用到的dubbo接口都会指定超时时间(3~5s)</li></ul><h2 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h2><p><a href="https://snailclimb.gitee.io/javaguide/#/?id=%e9%ab%98%e5%8f%af%e7%94%a8">Java Guide</a></p>]]></content>
      
      
      <categories>
          
          <category> 高可用 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> 科普向 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo使用笔记</title>
      <link href="/2021/07/31/hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/31/hexo%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前提工作"><a href="#1-前提工作" class="headerlink" title="1.前提工作"></a>1.前提工作</h2><ul><li>github(本文针对github，其他如gitee类似)</li><li>node.js、npm</li><li>git客户端</li><li>hexo(本文会介绍怎么安装)</li></ul><h2 id="2-搭建博客项目-h5"><a href="#2-搭建博客项目-h5" class="headerlink" title="2.搭建博客项目(h5)"></a>2.搭建博客项目(h5)</h2><ul><li>创建github仓库<br>新建一个名为 <strong>{用户名}.github.io</strong>的仓库</li><li>在settings-pages可以看到博客部署的地址<br><img src="https://lee-blog-picture.oss-cn-shenzhen.aliyuncs.com/github%20page.png"></li></ul><h2 id="3-如何使用hexo"><a href="#3-如何使用hexo" class="headerlink" title="3.如何使用hexo"></a>3.如何使用hexo</h2><h3 id="3-1-install-安装"><a href="#3-1-install-安装" class="headerlink" title="3.1 install(安装)"></a>3.1 install(安装)</h3><p><code>npm install -g hexo</code></p><h3 id="3-2-hexo-init-初始化"><a href="#3-2-hexo-init-初始化" class="headerlink" title="3.2 hexo init(初始化)"></a>3.2 hexo init(初始化)</h3><p>随便找一个目录放代码(后面发博客内容等需要修改) 如d:/hexo<br>并初始化为hexo项目<br><code>cd d:/hexo</code><br><code>hexo init</code><br>这时候会自动生成一些文件<br>  <img src="https://lee-blog-picture.oss-cn-shenzhen.aliyuncs.com/hexo-init.png" alt="hexo init"></p><h3 id="3-3-hexo-g-生成"><a href="#3-3-hexo-g-生成" class="headerlink" title="3.3 hexo g(生成)"></a>3.3 hexo g(生成)</h3><p>hexo g是hexo generate的缩写，用于在public文件夹生成最终的文件(.md文件会被生成.html文件)<br><img src="https://lee-blog-picture.oss-cn-shenzhen.aliyuncs.com/hexo-g.png" alt="hexo g"></p><h3 id="3-4-hexo-s-启动服务"><a href="#3-4-hexo-s-启动服务" class="headerlink" title="3.4 hexo s(启动服务)"></a>3.4 hexo s(启动服务)</h3><p>hexo s是hexo server的缩写，用于本地启动服务，可以通过<a href="http://localhost:4000访问">http://localhost:4000访问</a><br><img src="https://lee-blog-picture.oss-cn-shenzhen.aliyuncs.com/hexo-s.png" alt="hexo s"></p><h3 id="3-5-重要目录-文件的作用"><a href="#3-5-重要目录-文件的作用" class="headerlink" title="3.5 重要目录/文件的作用"></a>3.5 重要目录/文件的作用</h3><table><thead><tr><th>文件夹</th><th>作用</th></tr></thead><tbody><tr><td>source</td><td>存放静态文件的文件夹(包括md、图片等)</td></tr><tr><td>themes</td><td>模板库(可以网上下载到这里)</td></tr><tr><td>_config.yml</td><td>全局配置(如username等)</td></tr></tbody></table><h2 id="4-使用主题并写博客"><a href="#4-使用主题并写博客" class="headerlink" title="4.使用主题并写博客"></a>4.使用主题并写博客</h2><p>一般我们下载网上的主题，就可以直接修改配置文件(_config.yml)来自定义页面内容</p><ul><li>找一个主题并下载到<code>/themes</code>目录下<br>比如我的主题是<a href="https://github.com/blinkfox/hexo-theme-matery">https://github.com/blinkfox/hexo-theme-matery</a></li><li>修改<code>_config.yml</code>的<code>theme: landscape</code>为<code>theme: matery</code></li></ul><h2 id="5-如何部署到远程-username-github-io"><a href="#5-如何部署到远程-username-github-io" class="headerlink" title="5.如何部署到远程{username.github.io}"></a>5.如何部署到远程{username.github.io}</h2><h3 id="5-1-配置git账户信息"><a href="#5-1-配置git账户信息" class="headerlink" title="5.1 配置git账户信息"></a>5.1 配置git账户信息</h3><p>deploy:<br>  type: git<br>  repository: <a href="mailto:&#x67;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#x6d;">&#x67;&#x69;&#116;&#x40;&#x67;&#x69;&#x74;&#104;&#x75;&#98;&#x2e;&#x63;&#111;&#x6d;</a>:GaryLeeeee/garyleeeee.github.io.git<br>  branch: master</p><h3 id="5-2-安装deployer插件"><a href="#5-2-安装deployer插件" class="headerlink" title="5.2 安装deployer插件"></a>5.2 安装deployer插件</h3><p><code>npm install hexo-deployer-git --save</code><br>如果没安装的话<code>hexo d</code>一般会报错”Deployer not found: github”或者”Deployer not found: git”</p><h3 id="5-3-hexo-d-部署"><a href="#5-3-hexo-d-部署" class="headerlink" title="5.3 hexo d(部署)"></a>5.3 hexo d(部署)</h3><p>hexo d是hexo doploy的缩写，用来部署服务到远程</p><h2 id="6-如何写博客"><a href="#6-如何写博客" class="headerlink" title="6.如何写博客"></a>6.如何写博客</h2><h3 id="6-1-hexo-new-xxx-新建博客"><a href="#6-1-hexo-new-xxx-新建博客" class="headerlink" title="6.1 hexo new xxx(新建博客)"></a>6.1 hexo new xxx(新建博客)</h3><p>通过hexo new ‘my-first-blog’即可创建一个名字为my-first-blog的微博文件<br><img src="http://image.liuxianan.com/201608/20160823_183325_470_9306.png"></p><h3 id="6-2-hexo-new-page-xxx-新建页面"><a href="#6-2-hexo-new-page-xxx-新建页面" class="headerlink" title="6.2 hexo new page xxx(新建页面)"></a>6.2 hexo new page xxx(新建页面)</h3><p>与new不同的是他是生成一个页面，并不会以一个博客显示在目录中</p><h3 id="6-3-博客配置"><a href="#6-3-博客配置" class="headerlink" title="6.3 博客配置"></a>6.3 博客配置</h3><table><thead><tr><th>属性</th><th>作用</th></tr></thead><tbody><tr><td>title</td><td>博客名</td></tr><tr><td>date</td><td>创建日期</td></tr><tr><td>tags</td><td>标签名(后面有讲)</td></tr><tr><td>categories</td><td>分类名(后面有讲)</td></tr></tbody></table><h2 id="7-常见问题"><a href="#7-常见问题" class="headerlink" title="7.常见问题"></a>7.常见问题</h2><h3 id="matery主题如果没有tags-categories-about页面？"><a href="#matery主题如果没有tags-categories-about页面？" class="headerlink" title="matery主题如果没有tags/categories/about页面？"></a>matery主题如果没有tags/categories/about页面？</h3><p>新增标签tags页面(categories/about类似)<br><code>tags</code>页是用来展示所有标签的页面，如果在你的博客<code>source</code>目录下还没有<code>tags/index.md</code>文件，那么你就需要新建一个，命令如下：</p><blockquote><p>hexo new page “tags”</p></blockquote><p>并且在生成的md文件中加上type和layout，如下</p><blockquote><p>title: tags<br>date: 2021-07-31 16:40:30<br>type: “tags”<br>layout: “tags”</p></blockquote><h3 id="部署远程后没更新"><a href="#部署远程后没更新" class="headerlink" title="部署远程后没更新"></a>部署远程后没更新</h3><p>删除本地.deploy_git目录，重新执行<code>hexo d -g</code></p><h3 id="如何上传本地图片"><a href="#如何上传本地图片" class="headerlink" title="如何上传本地图片"></a>如何上传本地图片</h3><p>在source目录新建一个图片目录(如images)，然后在博客里引用(参考<a href="https://zhuanlan.zhihu.com/p/104996801">https://zhuanlan.zhihu.com/p/104996801</a>)<br><code>![img.png](/images/img.png)</code></p><h3 id="如何代码格式化"><a href="#如何代码格式化" class="headerlink" title="如何代码格式化"></a>如何代码格式化</h3><p><img src="source/images/%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E4%BC%98%E5%8C%96%E5%89%8D.png" alt="img.png"><br><img src="/images/%E4%BB%A3%E7%A0%81%E9%AB%98%E4%BA%AE%E4%BC%98%E5%8C%96%E5%90%8E.png" alt="代码高亮优化后"></p>]]></content>
      
      
      <categories>
          
          <category> hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>线程池学习笔记</title>
      <link href="/2021/07/28/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2021/07/28/%E7%BA%BF%E7%A8%8B%E6%B1%A0%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一-使用线程池的好处"><a href="#一-使用线程池的好处" class="headerlink" title="一.使用线程池的好处"></a>一.使用线程池的好处</h2><ul><li><strong>降低资源消耗</strong><br><code>通过重复利用已创建的线程降低线程创建和销毁造成的消耗</code></li><li><strong>提高响应速度</strong><br><code>当任务到达时，任务可以不需要等到线程创建就能立即执行</code></li><li><strong>提高线程的可管理性</strong><br><code>线程是稀缺资源，如果无限制的创建，不仅会消耗系统资源，还会降低系统的稳定性，使用线程池可以进行统一的分配、调优和监控</code></li></ul><h2 id="二-线程池使用场景"><a href="#二-线程池使用场景" class="headerlink" title="二.线程池使用场景"></a>二.线程池使用场景</h2><h3 id="1-用和不用有什么区别"><a href="#1-用和不用有什么区别" class="headerlink" title="1.用和不用有什么区别"></a>1.用和不用有什么区别</h3><ul><li>不使用线程池的情况下，任务顺序执行</li><li>使用线程池的情况下，任务同时执行</li></ul><h3 id="2-什么时候适合用"><a href="#2-什么时候适合用" class="headerlink" title="2.什么时候适合用"></a>2.什么时候适合用</h3><ul><li>对于多个耗时且互不依赖的任务，可选择使用线程池<blockquote><p>eg. 我们可以做家务的时候可以同时拖地和洗衣服(洗衣机)</p></blockquote></li><li>对于多个耗时且依赖结果的任务，可选择使用线程池+CountDownLatch<br><code>CountDownLatch是一个同步工具类，它允许一个或多个线程一直等待，直到其他线程执行完后再执行(阻塞)</code><blockquote><p>eg. 比如做一个项目需求，后端和前端同时开发(却不一定同时结束)，这时候快的一方必须等到慢的一方完成还可上线</p></blockquote></li></ul><h2 id="三-如何使用线程池"><a href="#三-如何使用线程池" class="headerlink" title="三.如何使用线程池"></a>三.如何使用线程池</h2><p>一般是通过ThreadPoolExecutor的构造函数来创建线程池，然后提交任务给线程池执行即可。<br><img src="https://lee-blog-picture.oss-cn-shenzhen.aliyuncs.com/ThreadPoolExecutor.png" alt="ThreadPoolExecutor构造函数"></p><h3 id="1-构造函数参数作用"><a href="#1-构造函数参数作用" class="headerlink" title="1.构造函数参数作用"></a>1.构造函数参数作用</h3><table><thead><tr><th>参数</th><th>作用</th></tr></thead><tbody><tr><td>int corePoolSize</td><td>线程池核心线程数</td></tr><tr><td>int maximumPoolSize</td><td>线程池最大线程数</td></tr><tr><td>long keepAliveTime</td><td>线程数大于核心线程数时，多余的空闲线程存活的最长时间</td></tr><tr><td>TimeUnit unit</td><td>时间单位</td></tr><tr><td>ThreadFactory threadFactory</td><td>线程工厂，用来创建线程，一般默认即可</td></tr><tr><td>RejectedExecutionHandler handler</td><td>拒绝策略，当提交的任务过多而不能及时处理时，我们可以定制策略来处理任务</td></tr><tr><td>BlockingQueue<Runnable> workQueue</td><td>阻塞队列，可指定大小</td></tr></tbody></table><h3 id="2-参数之间的关系"><a href="#2-参数之间的关系" class="headerlink" title="2.参数之间的关系"></a>2.参数之间的关系</h3><p>提交任务时：</p><ul><li>如果<code>poolSize</code>&lt;<code>corePoolSize</code>，会新创建一条线程并执行该任务</li><li>如果<code>poolSize</code>=<code>corePoolSize</code>，该任务会被放到阻塞队列(<code>workQueue</code>)等待</li><li>如果<code>workQueue</code>满了，且<code>poolSize</code>&lt;<code>maxmumPoolSize</code>，会新创建一条线程来执行该任务</li><li>如果<code>workQueue</code>满了，且<code>poolSize</code>=<code>maxmumPoolSize</code>，会根据拒绝策略<code>handler</code>拒绝该任务</li></ul><h3 id="3-示例"><a href="#3-示例" class="headerlink" title="3.示例"></a>3.示例</h3><p>new ThreadPoolExecutor().execute(()-&gt;{do sth.});<br><a href="https://github.com/GaryLeeeee/lee-code-repository">点击跳转</a></p><h3 id="4-execute、submit区别"><a href="#4-execute、submit区别" class="headerlink" title="4.execute、submit区别"></a>4.execute、submit区别</h3><ul><li>传参<ul><li>execute只能接受Runnable类型的任务</li><li>submit能接受Runnable和Callable类型的任务</li></ul></li><li>返回值<ul><li>execute没有返回值</li><li>submit有返回值(通过Future.get()获取)</li></ul></li><li>异常<ul><li>execute跟普通线程处理方式一致，通过try-catch捕获异常</li><li>submit会在call()抛出异常，所以需要Future.get()才能抛出异常</li></ul></li></ul><h3 id="5-建议不同类别的业务用不同的线程池"><a href="#5-建议不同类别的业务用不同的线程池" class="headerlink" title="5.建议不同类别的业务用不同的线程池"></a>5.建议不同类别的业务用不同的线程池</h3><h4 id="5-1-为什么呢？"><a href="#5-1-为什么呢？" class="headerlink" title="5.1 为什么呢？"></a>5.1 为什么呢？</h4><p>一般建议是不同的业务使用不同的线程池，配置线程池的时候根据当前业务的情况对当前线程池进行配置，因为不同的业务的并发以及对资源的使用情况都不同，重心优化系统性能瓶颈相关的业务</p><h4 id="5-2-错误案例"><a href="#5-2-错误案例" class="headerlink" title="5.2 错误案例"></a>5.2 错误案例</h4><p><a href="https://www.heapdump.cn/article/646639">《线程池运用不当的一次线上事故》</a></p><p>简单来说，就是线程池被父任务占满了，导致所有的子任务没有线程去执行(导致队列堆积)，而且父任务会阻塞住，造成死锁<br><img src="https://a.perfma.net/img/646605" alt="共用线程池死锁图示"></p><h2 id="四-正确配置线程池参数"><a href="#四-正确配置线程池参数" class="headerlink" title="四.正确配置线程池参数"></a>四.正确配置线程池参数</h2><ul><li>如果我们设置的线程池数量太小，如果同一时间有大量任务需要处理，那么就可能会导致大量任务要在任务队列等待，导致OOM。这样的CPU并没有得到充分利用。</li><li>如果我们设置的线程池数量太大，大量线程可能会同时争取CPU资源，导致有大量的上下文切换，从而增加线程的执行时间，影响整体的执行效率</li></ul><p>所以我们在设置线程池大小时有个公式</p><ul><li><strong>CPU密集型任务(N+1)</strong> 这种任务消耗的主要是CPU资源，可以将线程数设置为N(CPU核心数)+1，比CPU核心数多出来的一个线程是为了防止线程偶发的缺页中断，或者其他原因导致的任务暂停而带来的的影响。一旦任务暂停，CPU就会处于空闲状态，而在这种情况下多出来的一个线程就可以充分利用CPU的空闲时间。</li><li><strong>I/O密集型任务(2N)</strong> 这种任务引用起来，系统会用大部分的事件来处理I/O交互，而线程在处理I/O的时间段内不会占用CPU来处理，这时就可以将CPU交出给其它线程使用。因此在I/O密集型任务的应用中，我们可以多配置一些线程，具体的计算方法是2N。</li></ul><h2 id="五-总结"><a href="#五-总结" class="headerlink" title="五.总结"></a>五.总结</h2><ul><li>建议不同场景使用不同的线程池，防止死锁</li><li>空间换时间</li><li>不允许使用Executors创建线程池，应该通过ThreadPoolExecutor去创建</li><li>不同线程池命不同的名(如pool-1-thread-n)，有利于定位问题<ul><li><a href="https://github.com/GaryLeeeee/lee-code-repository">示例</a></li></ul></li></ul><h2 id="六-拒绝策略"><a href="#六-拒绝策略" class="headerlink" title="六.拒绝策略"></a>六.拒绝策略</h2><h3 id="1-什么时候会触发拒绝策略？"><a href="#1-什么时候会触发拒绝策略？" class="headerlink" title="1.什么时候会触发拒绝策略？"></a>1.什么时候会触发拒绝策略？</h3><p>当线程池的任务缓存队列<code>workQueue</code>已满且线程大小<code>poolSize</code>已达到<code>maximumPoolSize</code>，如果这时候还有新任务到来就会采取任务拒绝策略，通常有以下四种策略</p><ul><li>AbortPolicy(默认)：丢弃任务并抛出<code>RejectedExecutionException</code>异常</li><li>DiscardPolicy：丢弃任务(不抛出异常)</li><li>DiscardOldestPolicy：丢弃阻塞队列<code>workQueue</code>最前面的任务，然后执行新任务</li><li>CallerRunPolicy：由调用线程执行该任务</li></ul><h3 id="2-AbortPolicy"><a href="#2-AbortPolicy" class="headerlink" title="2.AbortPolicy"></a>2.AbortPolicy</h3><p>创建一个corePoolSize和maximumPoolSize都为1，阻塞队列大小为1的线程池。for循环起10个任务，每个任务sleep一秒。</p><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">AbortPolicyDemo</span> <span class="token punctuation">&#123;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> THREAD_SIZE <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">final</span> <span class="token keyword">int</span> CAPACITY <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">void</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token class-name">String</span><span class="token punctuation">[</span><span class="token punctuation">]</span> args<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 创建线程池：指定corePoolSize和maximumPoolSize都为1，阻塞队列大小为1</span>    <span class="token class-name">ThreadPoolExecutor</span> pool <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor</span><span class="token punctuation">(</span>THREAD_SIZE<span class="token punctuation">,</span> THREAD_SIZE<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token class-name">TimeUnit</span><span class="token punctuation">.</span>SECONDS<span class="token punctuation">,</span> <span class="token keyword">new</span> <span class="token class-name">ArrayBlockingQueue</span><span class="token generics"><span class="token punctuation">&lt;</span><span class="token punctuation">></span></span><span class="token punctuation">(</span>CAPACITY<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    pool<span class="token punctuation">.</span><span class="token function">setRejectedExecutionHandler</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">ThreadPoolExecutor<span class="token punctuation">.</span>AbortPolicy</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span><span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">;</span>i<span class="token operator">&lt;=</span><span class="token number">10</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      pool<span class="token punctuation">.</span><span class="token function">execute</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token string">"task-"</span> <span class="token operator">+</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">public</span> <span class="token keyword">static</span> <span class="token keyword">class</span> <span class="token class-name">MyRunnable</span> <span class="token keyword">implements</span> <span class="token class-name">Runnable</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> name<span class="token punctuation">;</span>    <span class="token keyword">public</span> <span class="token class-name">MyRunnable</span><span class="token punctuation">(</span><span class="token class-name">String</span> name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Override</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">run</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>      <span class="token class-name">System</span><span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">+</span> <span class="token string">" is running"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">try</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">Thread</span><span class="token punctuation">.</span><span class="token function">sleep</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">InterruptedException</span> e<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//ignore</span>      <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>测试结果：</p><pre class="line-numbers language-none"><code class="language-none">Exception in thread &quot;main&quot; java.util.concurrent.RejectedExecutionException: Task com.garylee.config.server.controller.admin.AdminLeeObjectConfigController$MyRunnable@3f8f9dd6 rejected from java.util.concurrent.ThreadPoolExecutor@aec6354[Running, pool size &#x3D; 1, active threads &#x3D; 1, queued tasks &#x3D; 1, completed tasks &#x3D; 0]at java.util.concurrent.ThreadPoolExecutor$AbortPolicy.rejectedExecution(ThreadPoolExecutor.java:2047)at java.util.concurrent.ThreadPoolExecutor.reject(ThreadPoolExecutor.java:823)at java.util.concurrent.ThreadPoolExecutor.execute(ThreadPoolExecutor.java:1369)at com.garylee.config.server.controller.admin.AdminLeeObjectConfigController.main(AdminLeeObjectConfigController.java:150)task-1 is runningtask-2 is running<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果分析：</p><ul><li><code>task-1</code>任务来了，起了一个线程，此时<code>poolSize</code>=<code>corePoolSize</code>=<code>maxmumPoolSize</code></li><li><code>task-2</code>任务来了，发现<code>poolSize</code>=<code>corePoolSize</code>，就把<code>task-2</code>塞入阻塞队列<code>workQueue</code>中</li><li><code>task-3</code>任务来了，发现<code>poolSize</code>=<code>corePoolSize</code>，且阻塞队列<code>workQueue</code>满了，触发<code>AbortPolicy</code>拒绝策略，直接抛出<code>RejectExecutionException</code>异常</li><li><code>task-1</code>执行完毕</li><li><code>task-2</code>执行完毕</li><li>end</li></ul><h3 id="3-DiscardPolicy"><a href="#3-DiscardPolicy" class="headerlink" title="3.DiscardPolicy"></a>3.DiscardPolicy</h3><p>创建一个corePoolSize和maximumPoolSize都为1，阻塞队列大小为1的线程池。for循环起10个任务，每个任务sleep一秒。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** 其他代码省略，具体见6.2 &#x2F;**pool.setRejectedExecutionHandler(new ThreadPoolExecutor.DiscardPolicy());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试结果：</p><pre class="line-numbers language-none"><code class="language-none">task-1 is runningtask-2 is running<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果分析：</p><ul><li><code>task-1</code>任务来了，起了一个线程，此时<code>poolSize</code>=<code>corePoolSize</code>=<code>maxmumPoolSize</code></li><li><code>task-2</code>任务来了，发现<code>poolSize</code>=<code>corePoolSize</code>，就把<code>task-2</code>塞入阻塞队列<code>workQueue</code>中</li><li><code>task-3</code>任务来了，发现<code>poolSize</code>=<code>corePoolSize</code>，且阻塞队列<code>workQueue</code>满了，触发<code>DiscardPolicy</code>拒绝策略，直接丢弃任务</li><li><code>task-4</code>任务来了，发现<code>poolSize</code>=<code>corePoolSize</code>，且阻塞队列<code>workQueue</code>满了，触发<code>DiscardPolicy</code>拒绝策略，直接丢弃任务</li><li>…</li><li><code>task-10</code>任务来了，发现<code>poolSize</code>=<code>corePoolSize</code>，且阻塞队列<code>workQueue</code>满了，触发<code>DiscardPolicy</code>拒绝策略，直接丢弃任务</li><li><code>task-1</code>执行完毕</li><li><code>task-2</code>执行完毕</li><li>end</li></ul><h3 id="4-DiscardOldestPolicy"><a href="#4-DiscardOldestPolicy" class="headerlink" title="4.DiscardOldestPolicy"></a>4.DiscardOldestPolicy</h3><p>创建一个corePoolSize和maximumPoolSize都为1，阻塞队列大小为1的线程池。for循环起10个任务，每个任务sleep一秒。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** 其他代码省略，具体见6.2 &#x2F;**pool.setRejectedExecutionHandler(new ThreadPoolExecutor.DiscardOldestPolicy());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试结果：</p><pre class="line-numbers language-none"><code class="language-none">task-1 is runningtask-10 is running<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>结果分析：</p><ul><li><code>task-1</code>任务来了，起了一个线程，此时<code>poolSize</code>=<code>corePoolSize</code>=<code>maxmumPoolSize</code></li><li><code>task-2</code>任务来了，发现<code>poolSize</code>=<code>corePoolSize</code>，就把<code>task-2</code>塞入阻塞队列<code>workQueue</code>中</li><li><code>task-3</code>任务来了，发现<code>poolSize</code>=<code>corePoolSize</code>，且阻塞队列<code>workQueue</code>满了，触发<code>DiscardOldestPolicy</code>拒绝策略，丢弃阻塞队列<code>workQueue</code>最前面的任务<code>task-2</code></li><li><code>task-4</code>任务来了，发现<code>poolSize</code>=<code>corePoolSize</code>，且阻塞队列<code>workQueue</code>满了，触发<code>DiscardOldestPolicy</code>拒绝策略，丢弃阻塞队列<code>workQueue</code>最前面的任务<code>task-3</code></li><li>…</li><li><code>task-10</code>任务来了，发现<code>poolSize</code>=<code>corePoolSize</code>，且阻塞队列<code>workQueue</code>满了，触发<code>DiscardOldestPolicy</code>拒绝策略，丢弃阻塞队列<code>workQueue</code>最前面的任务<code>task-9</code></li><li><code>task-1</code>执行完毕</li><li><code>task-10</code>执行完毕</li><li>end</li></ul><h3 id="5-CallerRunsPolicy"><a href="#5-CallerRunsPolicy" class="headerlink" title="5.CallerRunsPolicy"></a>5.CallerRunsPolicy</h3><p>创建一个corePoolSize和maximumPoolSize都为1，阻塞队列大小为1的线程池。for循环起10个任务，每个任务sleep一秒。</p><pre class="line-numbers language-none"><code class="language-none">&#x2F;** 其他代码省略，具体见6.2 &#x2F;**pool.setRejectedExecutionHandler(new ThreadPoolExecutor.CallerRunsPolicy());<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>测试结果：</p><pre class="line-numbers language-none"><code class="language-none">task-1 is runningtask-3 is runningtask-2 is runningtask-5 is runningtask-4 is runningtask-7 is runningtask-6 is runningtask-9 is runningtask-8 is runningtask-10 is running<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果分析：</p><ul><li><code>task-1</code>任务来了，起了一个线程，此时<code>poolSize</code>=<code>corePoolSize</code>=<code>maxmumPoolSize</code></li><li><code>task-2</code>任务来了，发现<code>poolSize</code>=<code>corePoolSize</code>，就把<code>task-2</code>塞入阻塞队列<code>workQueue</code>中</li><li><code>task-3</code>任务来了，发现<code>poolSize</code>=<code>corePoolSize</code>，且阻塞队列<code>workQueue</code>满了，触发<code>CallerRunsPolicy</code>拒绝策略，加入<code>task-1</code>所在线程执行</li><li><code>task-1</code>和<code>task-3</code>执行完毕，<code>task-2</code>占用线程</li><li><code>task-4</code>任务来了，发现<code>poolSize</code>=<code>corePoolSize</code>，就把<code>task-4</code>塞入阻塞队列<code>workQueue</code>中</li><li><code>task-5</code>任务来了，发现<code>poolSize</code>=<code>corePoolSize</code>，且阻塞队列<code>workQueue</code>满了，触发<code>CallerRunsPolicy</code>拒绝策略，加入<code>task-2</code>所在线程执行</li><li><code>task-2</code>和<code>task-5</code>执行完毕，<code>task-4</code>占用线程</li><li>…</li><li>end</li></ul>]]></content>
      
      
      <categories>
          
          <category> 并发 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2021/07/25/hello-world/"/>
      <url>/2021/07/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
